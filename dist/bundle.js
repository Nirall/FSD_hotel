!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);var s;i(3),i(2),i(1);(s=i(5)).keys().forEach(s)},function(t,e){class i{constructor(){this.init()}init(){const t=$(".datepicker-1f .datepicker-1f__input-field").datepicker().data("datepicker"),e=$(".datepicker-1f .datepicker-1f__input-field");e.datepicker({onSelect:t=>{let i="";if(t)if(t.split(" - ").length>1){let e=t.toLowerCase().split(" - ");e=e.map(t=>t.match(/\d{2}\s[а-яА-Я]{3}/)[0]),i=e.join(" - ")}else i=t.match(/\d{2}\s[а-яА-Я]{3}/)[0];e.val(i)}}),e.datepicker({clearButton:!0}),e.datepicker({todayButton:!0}),e.datepicker({dateFormat:"dd MM"}),e.datepicker({prevHtml:'<i class = "db-arrow material-icons">arrow_back</i>'}),e.datepicker({nextHtml:'<i class = "db-arrow material-icons">arrow_forward</i>'});let i=$(".datepicker--button[data-action='today']");i.html("Применить"),i.on("click",()=>{t&&t.hide()}),$(".datepicker-1f__wrapper-input-field").on("click",()=>t.show())}}try{new i}catch{console.log("there is no datepicker1f")}},function(t,e){class i{constructor(){this.init()}init(){const t=$(".js-datepicker-2f__input-field").datepicker().data("datepicker"),e=$(".js-datepicker-2f__out-date-field"),i=$(".js-datepicker-2f__input-field");i.datepicker({onSelect:t=>{let s=t.match(/.+?(?=\s|$)/)?t.match(/.+?(?=\s|$)/)[0]:"",n=t.match(/(?<=\s-\s).+/)?t.match(/(?<=\s-\s).+/)[0]:"";i.val(s),e.val(n)}}),i.datepicker({clearButton:!0}),i.datepicker({todayButton:!0}),i.datepicker({prevHtml:'<i class = "db-arrow material-icons">arrow_back</i>'}),i.datepicker({nextHtml:'<i class = "db-arrow material-icons">arrow_forward</i>'});const s=$(".datepicker--button[data-action='today']");s.html("Применить"),s.on("click",()=>t.hide()),$(".js-datepicker-2f__wrapper-input-field").on("click",()=>t.show())}}try{new i}catch{console.log("Something wrong with datepicker-2f")}},function(t,e){!function(t,e,i){var s,n,a,r,o,c,l;r=!1,o={classes:"",inline:!1,language:"ru",startDate:new Date,firstDay:"",weekends:[6,0],dateFormat:"",altField:"",altFieldDateFormat:"@",toggleSelected:!0,keyboardNav:!0,position:"bottom left",offset:12,view:"days",minView:"days",showOtherMonths:!0,selectOtherMonths:!0,moveToOtherMonthsOnSelect:!0,showOtherYears:!0,selectOtherYears:!0,moveToOtherYearsOnSelect:!0,minDate:"",maxDate:"",disableNavWhenOutOfRange:!0,multipleDates:!1,multipleDatesSeparator:",",range:!1,todayButton:!1,clearButton:!1,showEvent:"focus",autoClose:!1,monthsField:"monthsShort",prevHtml:'<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>',nextHtml:'<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>',navTitles:{days:"MM <i>yyyy</i>",months:"yyyy",years:"yyyy1 - yyyy2"},timepicker:!1,onlyTimepicker:!1,dateTimeSeparator:" ",timeFormat:"",minHours:0,maxHours:24,minMinutes:0,maxMinutes:59,hoursStep:1,minutesStep:1,onSelect:"",onShow:"",onHide:"",onChangeMonth:"",onChangeYear:"",onChangeDecade:"",onChangeView:"",onRenderCell:""},c={ctrlRight:[17,39],ctrlUp:[17,38],ctrlLeft:[17,37],ctrlDown:[17,40],shiftRight:[16,39],shiftUp:[16,38],shiftLeft:[16,37],shiftDown:[16,40],altUp:[18,38],altRight:[18,39],altLeft:[18,37],altDown:[18,40],ctrlShiftUp:[16,17,38]},(a=l=function(t,i){this.el=t,this.$el=e(t),this.opts=e.extend(!0,{},o,i,this.$el.data()),null==s&&(s=e("body")),this.opts.startDate||(this.opts.startDate=new Date),"INPUT"==this.el.nodeName&&(this.elIsInput=!0),this.opts.altField&&(this.$altField="string"==typeof this.opts.altField?e(this.opts.altField):this.opts.altField),this.inited=!1,this.visible=!1,this.silent=!1,this.currentDate=this.opts.startDate,this.currentView=this.opts.view,this._createShortCuts(),this.selectedDates=[],this.views={},this.keys=[],this.minRange="",this.maxRange="",this._prevOnSelectValue="",this.init()}).prototype={VERSION:"2.2.3",viewIndexes:["days","months","years"],init:function(){r||this.opts.inline||!this.elIsInput||this._buildDatepickersContainer(),this._buildBaseHtml(),this._defineLocale(this.opts.language),this._syncWithMinMaxDates(),this.elIsInput&&(this.opts.inline||(this._setPositionClasses(this.opts.position),this._bindEvents()),this.opts.keyboardNav&&!this.opts.onlyTimepicker&&this._bindKeyboardEvents(),this.$datepicker.on("mousedown",this._onMouseDownDatepicker.bind(this)),this.$datepicker.on("mouseup",this._onMouseUpDatepicker.bind(this))),this.opts.classes&&this.$datepicker.addClass(this.opts.classes),this.opts.timepicker&&(this.timepicker=new e.fn.datepicker.Timepicker(this,this.opts),this._bindTimepickerEvents()),this.opts.onlyTimepicker&&this.$datepicker.addClass("-only-timepicker-"),this.views[this.currentView]=new e.fn.datepicker.Body(this,this.currentView,this.opts),this.views[this.currentView].show(),this.nav=new e.fn.datepicker.Navigation(this,this.opts),this.view=this.currentView,this.$el.on("clickCell.adp",this._onClickCell.bind(this)),this.$datepicker.on("mouseenter",".datepicker--cell",this._onMouseEnterCell.bind(this)),this.$datepicker.on("mouseleave",".datepicker--cell",this._onMouseLeaveCell.bind(this)),this.inited=!0},_createShortCuts:function(){this.minDate=this.opts.minDate?this.opts.minDate:new Date(-86399999136e5),this.maxDate=this.opts.maxDate?this.opts.maxDate:new Date(86399999136e5)},_bindEvents:function(){this.$el.on(this.opts.showEvent+".adp",this._onShowEvent.bind(this)),this.$el.on("mouseup.adp",this._onMouseUpEl.bind(this)),this.$el.on("blur.adp",this._onBlur.bind(this)),this.$el.on("keyup.adp",this._onKeyUpGeneral.bind(this)),e(t).on("resize.adp",this._onResize.bind(this)),e("body").on("mouseup.adp",this._onMouseUpBody.bind(this))},_bindKeyboardEvents:function(){this.$el.on("keydown.adp",this._onKeyDown.bind(this)),this.$el.on("keyup.adp",this._onKeyUp.bind(this)),this.$el.on("hotKey.adp",this._onHotKey.bind(this))},_bindTimepickerEvents:function(){this.$el.on("timeChange.adp",this._onTimeChange.bind(this))},isWeekend:function(t){return-1!==this.opts.weekends.indexOf(t)},_defineLocale:function(t){"string"==typeof t?(this.loc=e.fn.datepicker.language[t],this.loc||(console.warn("Can't find language \""+t+'" in Datepicker.language, will use "ru" instead'),this.loc=e.extend(!0,{},e.fn.datepicker.language.ru)),this.loc=e.extend(!0,{},e.fn.datepicker.language.ru,e.fn.datepicker.language[t])):this.loc=e.extend(!0,{},e.fn.datepicker.language.ru,t),this.opts.dateFormat&&(this.loc.dateFormat=this.opts.dateFormat),this.opts.timeFormat&&(this.loc.timeFormat=this.opts.timeFormat),""!==this.opts.firstDay&&(this.loc.firstDay=this.opts.firstDay),this.opts.timepicker&&(this.loc.dateFormat=[this.loc.dateFormat,this.loc.timeFormat].join(this.opts.dateTimeSeparator)),this.opts.onlyTimepicker&&(this.loc.dateFormat=this.loc.timeFormat);var i=this._getWordBoundaryRegExp;(this.loc.timeFormat.match(i("aa"))||this.loc.timeFormat.match(i("AA")))&&(this.ampm=!0)},_buildDatepickersContainer:function(){r=!0,s.append('<div class="datepickers-container" id="datepickers-container"></div>'),n=e("#datepickers-container")},_buildBaseHtml:function(){var t,i=e('<div class="datepicker-inline">');t="INPUT"==this.el.nodeName?this.opts.inline?i.insertAfter(this.$el):n:i.appendTo(this.$el),this.$datepicker=e('<div class="datepicker"><i class="datepicker--pointer"></i><nav class="datepicker--nav"></nav><div class="datepicker--content"></div></div>').appendTo(t),this.$content=e(".datepicker--content",this.$datepicker),this.$nav=e(".datepicker--nav",this.$datepicker)},_triggerOnChange:function(){if(!this.selectedDates.length){if(""===this._prevOnSelectValue)return;return this._prevOnSelectValue="",this.opts.onSelect("","",this)}var t,e=this.selectedDates,i=a.getParsedDate(e[0]),s=this,n=new Date(i.year,i.month,i.date,i.hours,i.minutes);t=e.map((function(t){return s.formatDate(s.loc.dateFormat,t)})).join(this.opts.multipleDatesSeparator),(this.opts.multipleDates||this.opts.range)&&(n=e.map((function(t){var e=a.getParsedDate(t);return new Date(e.year,e.month,e.date,e.hours,e.minutes)}))),this._prevOnSelectValue=t,this.opts.onSelect(t,n,this)},next:function(){var t=this.parsedDate,e=this.opts;switch(this.view){case"days":this.date=new Date(t.year,t.month+1,1),e.onChangeMonth&&e.onChangeMonth(this.parsedDate.month,this.parsedDate.year);break;case"months":this.date=new Date(t.year+1,t.month,1),e.onChangeYear&&e.onChangeYear(this.parsedDate.year);break;case"years":this.date=new Date(t.year+10,0,1),e.onChangeDecade&&e.onChangeDecade(this.curDecade)}},prev:function(){var t=this.parsedDate,e=this.opts;switch(this.view){case"days":this.date=new Date(t.year,t.month-1,1),e.onChangeMonth&&e.onChangeMonth(this.parsedDate.month,this.parsedDate.year);break;case"months":this.date=new Date(t.year-1,t.month,1),e.onChangeYear&&e.onChangeYear(this.parsedDate.year);break;case"years":this.date=new Date(t.year-10,0,1),e.onChangeDecade&&e.onChangeDecade(this.curDecade)}},formatDate:function(t,e){e=e||this.date;var i,s=t,n=this._getWordBoundaryRegExp,r=this.loc,o=a.getLeadingZeroNum,c=a.getDecade(e),l=a.getParsedDate(e),u=l.fullHours,h=l.hours,d=t.match(n("aa"))||t.match(n("AA")),p="am",m=this._replacer;switch(this.opts.timepicker&&this.timepicker&&d&&(u=o((i=this.timepicker._getValidHoursFromDate(e,d)).hours),h=i.hours,p=i.dayPeriod),!0){case/@/.test(s):s=s.replace(/@/,e.getTime());case/aa/.test(s):s=m(s,n("aa"),p);case/AA/.test(s):s=m(s,n("AA"),p.toUpperCase());case/dd/.test(s):s=m(s,n("dd"),l.fullDate);case/d/.test(s):s=m(s,n("d"),l.date);case/DD/.test(s):s=m(s,n("DD"),r.days[l.day]);case/D/.test(s):s=m(s,n("D"),r.daysShort[l.day]);case/mm/.test(s):s=m(s,n("mm"),l.fullMonth);case/m/.test(s):s=m(s,n("m"),l.month+1);case/MM/.test(s):s=m(s,n("MM"),this.loc.months[l.month]);case/M/.test(s):s=m(s,n("M"),r.monthsShort[l.month]);case/ii/.test(s):s=m(s,n("ii"),l.fullMinutes);case/i/.test(s):s=m(s,n("i"),l.minutes);case/hh/.test(s):s=m(s,n("hh"),u);case/h/.test(s):s=m(s,n("h"),h);case/yyyy/.test(s):s=m(s,n("yyyy"),l.year);case/yyyy1/.test(s):s=m(s,n("yyyy1"),c[0]);case/yyyy2/.test(s):s=m(s,n("yyyy2"),c[1]);case/yy/.test(s):s=m(s,n("yy"),l.year.toString().slice(-2))}return s},_replacer:function(t,e,i){return t.replace(e,(function(t,e,s,n){return e+i+n}))},_getWordBoundaryRegExp:function(t){var e="\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;";return new RegExp("(^|>|"+e+")("+t+")($|<|"+e+")","g")},selectDate:function(t){var e=this,i=e.opts,s=e.parsedDate,n=e.selectedDates.length,r="";if(Array.isArray(t))t.forEach((function(t){e.selectDate(t)}));else if(t instanceof Date){if(this.lastSelectedDate=t,this.timepicker&&this.timepicker._setTime(t),e._trigger("selectDate",t),this.timepicker&&(t.setHours(this.timepicker.hours),t.setMinutes(this.timepicker.minutes)),"days"==e.view&&t.getMonth()!=s.month&&i.moveToOtherMonthsOnSelect&&(r=new Date(t.getFullYear(),t.getMonth(),1)),"years"==e.view&&t.getFullYear()!=s.year&&i.moveToOtherYearsOnSelect&&(r=new Date(t.getFullYear(),0,1)),r&&(e.silent=!0,e.date=r,e.silent=!1,e.nav._render()),i.multipleDates&&!i.range){if(n===i.multipleDates)return;e._isSelected(t)||e.selectedDates.push(t)}else i.range?2==n?(e.selectedDates=[t],e.minRange=t,e.maxRange=""):1==n?(e.selectedDates.push(t),e.maxRange?e.minRange=t:e.maxRange=t,a.bigger(e.maxRange,e.minRange)&&(e.maxRange=e.minRange,e.minRange=t),e.selectedDates=[e.minRange,e.maxRange]):(e.selectedDates=[t],e.minRange=t):e.selectedDates=[t];e._setInputValue(),i.onSelect&&e._triggerOnChange(),i.autoClose&&!this.timepickerIsActive&&(i.multipleDates||i.range?i.range&&2==e.selectedDates.length&&e.hide():e.hide()),e.views[this.currentView]._render()}},removeDate:function(t){var e=this.selectedDates,i=this;if(t instanceof Date)return e.some((function(s,n){if(a.isSame(s,t))return e.splice(n,1),i.selectedDates.length?i.lastSelectedDate=i.selectedDates[i.selectedDates.length-1]:(i.minRange="",i.maxRange="",i.lastSelectedDate=""),i.views[i.currentView]._render(),i._setInputValue(),i.opts.onSelect&&i._triggerOnChange(),!0}))},today:function(){this.silent=!0,this.view=this.opts.minView,this.silent=!1,this.date=new Date,this.opts.todayButton instanceof Date&&this.selectDate(this.opts.todayButton)},clear:function(){this.selectedDates=[],this.minRange="",this.maxRange="",this.views[this.currentView]._render(),this._setInputValue(),this.opts.onSelect&&this._triggerOnChange()},update:function(t,i){var s=arguments.length,n=this.lastSelectedDate;return 2==s?this.opts[t]=i:1==s&&"object"==typeof t&&(this.opts=e.extend(!0,this.opts,t)),this._createShortCuts(),this._syncWithMinMaxDates(),this._defineLocale(this.opts.language),this.nav._addButtonsIfNeed(),this.opts.onlyTimepicker||this.nav._render(),this.views[this.currentView]._render(),this.elIsInput&&!this.opts.inline&&(this._setPositionClasses(this.opts.position),this.visible&&this.setPosition(this.opts.position)),this.opts.classes&&this.$datepicker.addClass(this.opts.classes),this.opts.onlyTimepicker&&this.$datepicker.addClass("-only-timepicker-"),this.opts.timepicker&&(n&&this.timepicker._handleDate(n),this.timepicker._updateRanges(),this.timepicker._updateCurrentTime(),n&&(n.setHours(this.timepicker.hours),n.setMinutes(this.timepicker.minutes))),this._setInputValue(),this},_syncWithMinMaxDates:function(){var t=this.date.getTime();this.silent=!0,this.minTime>t&&(this.date=this.minDate),this.maxTime<t&&(this.date=this.maxDate),this.silent=!1},_isSelected:function(t,e){var i=!1;return this.selectedDates.some((function(s){if(a.isSame(s,t,e))return i=s,!0})),i},_setInputValue:function(){var t,e=this,i=e.opts,s=e.loc.dateFormat,n=i.altFieldDateFormat,a=e.selectedDates.map((function(t){return e.formatDate(s,t)}));i.altField&&e.$altField.length&&(t=(t=this.selectedDates.map((function(t){return e.formatDate(n,t)}))).join(this.opts.multipleDatesSeparator),this.$altField.val(t)),a=a.join(this.opts.multipleDatesSeparator),this.$el.val(a)},_isInRange:function(t,e){var i=t.getTime(),s=a.getParsedDate(t),n=a.getParsedDate(this.minDate),r=a.getParsedDate(this.maxDate),o=new Date(s.year,s.month,n.date).getTime(),c=new Date(s.year,s.month,r.date).getTime(),l={day:i>=this.minTime&&i<=this.maxTime,month:o>=this.minTime&&c<=this.maxTime,year:s.year>=n.year&&s.year<=r.year};return e?l[e]:l.day},_getDimensions:function(t){var e=t.offset();return{width:t.outerWidth(),height:t.outerHeight(),left:e.left,top:e.top}},_getDateFromCell:function(t){var e=this.parsedDate,i=t.data("year")||e.year,s=null==t.data("month")?e.month:t.data("month"),n=t.data("date")||1;return new Date(i,s,n)},_setPositionClasses:function(t){var e=(t=t.split(" "))[0],i="datepicker -"+e+"-"+t[1]+"- -from-"+e+"-";this.visible&&(i+=" active"),this.$datepicker.removeAttr("class").addClass(i)},setPosition:function(t){t=t||this.opts.position;var e,i,s=this._getDimensions(this.$el),n=this._getDimensions(this.$datepicker),a=t.split(" "),r=this.opts.offset,o=a[0],c=a[1];switch(o){case"top":e=s.top-n.height-r;break;case"right":i=s.left+s.width+r;break;case"bottom":e=s.top+s.height+r;break;case"left":i=s.left-n.width-r}switch(c){case"top":e=s.top;break;case"right":i=s.left+s.width-n.width;break;case"bottom":e=s.top+s.height-n.height;break;case"left":i=s.left;break;case"center":/left|right/.test(o)?e=s.top+s.height/2-n.height/2:i=s.left+s.width/2-n.width/2}this.$datepicker.css({left:i,top:e})},show:function(){var t=this.opts.onShow;this.setPosition(this.opts.position),this.$datepicker.addClass("active"),this.visible=!0,t&&this._bindVisionEvents(t)},hide:function(){var t=this.opts.onHide;this.$datepicker.removeClass("active").css({left:"-100000px"}),this.focused="",this.keys=[],this.inFocus=!1,this.visible=!1,this.$el.blur(),t&&this._bindVisionEvents(t)},down:function(t){this._changeView(t,"down")},up:function(t){this._changeView(t,"up")},_bindVisionEvents:function(t){this.$datepicker.off("transitionend.dp"),t(this,!1),this.$datepicker.one("transitionend.dp",t.bind(this,this,!0))},_changeView:function(t,e){t=t||this.focused||this.date;var i="up"==e?this.viewIndex+1:this.viewIndex-1;i>2&&(i=2),i<0&&(i=0),this.silent=!0,this.date=new Date(t.getFullYear(),t.getMonth(),1),this.silent=!1,this.view=this.viewIndexes[i]},_handleHotKey:function(t){var e,i,s,n=a.getParsedDate(this._getFocusedDate()),r=this.opts,o=!1,c=!1,l=!1,u=n.year,h=n.month,d=n.date;switch(t){case"ctrlRight":case"ctrlUp":h+=1,o=!0;break;case"ctrlLeft":case"ctrlDown":h-=1,o=!0;break;case"shiftRight":case"shiftUp":c=!0,u+=1;break;case"shiftLeft":case"shiftDown":c=!0,u-=1;break;case"altRight":case"altUp":l=!0,u+=10;break;case"altLeft":case"altDown":l=!0,u-=10;break;case"ctrlShiftUp":this.up()}s=a.getDaysCount(new Date(u,h)),i=new Date(u,h,d),s<d&&(d=s),i.getTime()<this.minTime?i=this.minDate:i.getTime()>this.maxTime&&(i=this.maxDate),this.focused=i,e=a.getParsedDate(i),o&&r.onChangeMonth&&r.onChangeMonth(e.month,e.year),c&&r.onChangeYear&&r.onChangeYear(e.year),l&&r.onChangeDecade&&r.onChangeDecade(this.curDecade)},_registerKey:function(t){this.keys.some((function(e){return e==t}))||this.keys.push(t)},_unRegisterKey:function(t){var e=this.keys.indexOf(t);this.keys.splice(e,1)},_isHotKeyPressed:function(){var t,e=!1,i=this.keys.sort();for(var s in c)t=c[s],i.length==t.length&&t.every((function(t,e){return t==i[e]}))&&(this._trigger("hotKey",s),e=!0);return e},_trigger:function(t,e){this.$el.trigger(t,e)},_focusNextCell:function(t,e){e=e||this.cellType;var i=a.getParsedDate(this._getFocusedDate()),s=i.year,n=i.month,r=i.date;if(!this._isHotKeyPressed()){switch(t){case 37:"day"==e&&(r-=1),"month"==e&&(n-=1),"year"==e&&(s-=1);break;case 38:"day"==e&&(r-=7),"month"==e&&(n-=3),"year"==e&&(s-=4);break;case 39:"day"==e&&(r+=1),"month"==e&&(n+=1),"year"==e&&(s+=1);break;case 40:"day"==e&&(r+=7),"month"==e&&(n+=3),"year"==e&&(s+=4)}var o=new Date(s,n,r);o.getTime()<this.minTime?o=this.minDate:o.getTime()>this.maxTime&&(o=this.maxDate),this.focused=o}},_getFocusedDate:function(){var t=this.focused||this.selectedDates[this.selectedDates.length-1],e=this.parsedDate;if(!t)switch(this.view){case"days":t=new Date(e.year,e.month,(new Date).getDate());break;case"months":t=new Date(e.year,e.month,1);break;case"years":t=new Date(e.year,0,1)}return t},_getCell:function(t,i){i=i||this.cellType;var s,n=a.getParsedDate(t),r='.datepicker--cell[data-year="'+n.year+'"]';switch(i){case"month":r='[data-month="'+n.month+'"]';break;case"day":r+='[data-month="'+n.month+'"][data-date="'+n.date+'"]'}return(s=this.views[this.currentView].$el.find(r)).length?s:e("")},destroy:function(){this.$el.off(".adp").data("datepicker",""),this.selectedDates=[],this.focused="",this.views={},this.keys=[],this.minRange="",this.maxRange="",this.opts.inline||!this.elIsInput?this.$datepicker.closest(".datepicker-inline").remove():this.$datepicker.remove()},_handleAlreadySelectedDates:function(t,e){this.opts.range?this.opts.toggleSelected?this.removeDate(e):2!=this.selectedDates.length&&this._trigger("clickCell",e):this.opts.toggleSelected&&this.removeDate(e),this.opts.toggleSelected||(this.lastSelectedDate=t,this.opts.timepicker&&(this.timepicker._setTime(t),this.timepicker.update()))},_onShowEvent:function(t){this.visible||this.show()},_onBlur:function(){!this.inFocus&&this.visible&&this.hide()},_onMouseDownDatepicker:function(t){this.inFocus=!0},_onMouseUpDatepicker:function(t){this.inFocus=!1,t.originalEvent.inFocus=!0,t.originalEvent.timepickerFocus||this.$el.focus()},_onKeyUpGeneral:function(t){this.$el.val()||this.clear()},_onResize:function(){this.visible&&this.setPosition()},_onMouseUpBody:function(t){t.originalEvent.inFocus||this.visible&&!this.inFocus&&this.hide()},_onMouseUpEl:function(t){t.originalEvent.inFocus=!0,setTimeout(this._onKeyUpGeneral.bind(this),4)},_onKeyDown:function(t){var e=t.which;if(this._registerKey(e),e>=37&&e<=40&&(t.preventDefault(),this._focusNextCell(e)),13==e&&this.focused){if(this._getCell(this.focused).hasClass("-disabled-"))return;if(this.view!=this.opts.minView)this.down();else{var i=this._isSelected(this.focused,this.cellType);if(!i)return this.timepicker&&(this.focused.setHours(this.timepicker.hours),this.focused.setMinutes(this.timepicker.minutes)),void this.selectDate(this.focused);this._handleAlreadySelectedDates(i,this.focused)}}27==e&&this.hide()},_onKeyUp:function(t){var e=t.which;this._unRegisterKey(e)},_onHotKey:function(t,e){this._handleHotKey(e)},_onMouseEnterCell:function(t){var i=e(t.target).closest(".datepicker--cell"),s=this._getDateFromCell(i);this.silent=!0,this.focused&&(this.focused=""),i.addClass("-focus-"),this.focused=s,this.silent=!1,this.opts.range&&1==this.selectedDates.length&&(this.minRange=this.selectedDates[0],this.maxRange="",a.less(this.minRange,this.focused)&&(this.maxRange=this.minRange,this.minRange=""),this.views[this.currentView]._update())},_onMouseLeaveCell:function(t){e(t.target).closest(".datepicker--cell").removeClass("-focus-"),this.silent=!0,this.focused="",this.silent=!1},_onTimeChange:function(t,e,i){var s=new Date,n=!1;this.selectedDates.length&&(n=!0,s=this.lastSelectedDate),s.setHours(e),s.setMinutes(i),n||this._getCell(s).hasClass("-disabled-")?(this._setInputValue(),this.opts.onSelect&&this._triggerOnChange()):this.selectDate(s)},_onClickCell:function(t,e){this.timepicker&&(e.setHours(this.timepicker.hours),e.setMinutes(this.timepicker.minutes)),this.selectDate(e)},set focused(t){if(!t&&this.focused){var e=this._getCell(this.focused);e.length&&e.removeClass("-focus-")}this._focused=t,this.opts.range&&1==this.selectedDates.length&&(this.minRange=this.selectedDates[0],this.maxRange="",a.less(this.minRange,this._focused)&&(this.maxRange=this.minRange,this.minRange="")),this.silent||(this.date=t)},get focused(){return this._focused},get parsedDate(){return a.getParsedDate(this.date)},set date(t){if(t instanceof Date)return this.currentDate=t,this.inited&&!this.silent&&(this.views[this.view]._render(),this.nav._render(),this.visible&&this.elIsInput&&this.setPosition()),t},get date(){return this.currentDate},set view(t){if(this.viewIndex=this.viewIndexes.indexOf(t),!(this.viewIndex<0))return this.prevView=this.currentView,this.currentView=t,this.inited&&(this.views[t]?this.views[t]._render():this.views[t]=new e.fn.datepicker.Body(this,t,this.opts),this.views[this.prevView].hide(),this.views[t].show(),this.nav._render(),this.opts.onChangeView&&this.opts.onChangeView(t),this.elIsInput&&this.visible&&this.setPosition()),t},get view(){return this.currentView},get cellType(){return this.view.substring(0,this.view.length-1)},get minTime(){var t=a.getParsedDate(this.minDate);return new Date(t.year,t.month,t.date).getTime()},get maxTime(){var t=a.getParsedDate(this.maxDate);return new Date(t.year,t.month,t.date).getTime()},get curDecade(){return a.getDecade(this.date)}},a.getDaysCount=function(t){return new Date(t.getFullYear(),t.getMonth()+1,0).getDate()},a.getParsedDate=function(t){return{year:t.getFullYear(),month:t.getMonth(),fullMonth:t.getMonth()+1<10?"0"+(t.getMonth()+1):t.getMonth()+1,date:t.getDate(),fullDate:t.getDate()<10?"0"+t.getDate():t.getDate(),day:t.getDay(),hours:t.getHours(),fullHours:t.getHours()<10?"0"+t.getHours():t.getHours(),minutes:t.getMinutes(),fullMinutes:t.getMinutes()<10?"0"+t.getMinutes():t.getMinutes()}},a.getDecade=function(t){var e=10*Math.floor(t.getFullYear()/10);return[e,e+9]},a.template=function(t,e){return t.replace(/#\{([\w]+)\}/g,(function(t,i){if(e[i]||0===e[i])return e[i]}))},a.isSame=function(t,e,i){if(!t||!e)return!1;var s=a.getParsedDate(t),n=a.getParsedDate(e),r=i||"day";return{day:s.date==n.date&&s.month==n.month&&s.year==n.year,month:s.month==n.month&&s.year==n.year,year:s.year==n.year}[r]},a.less=function(t,e,i){return!(!t||!e)&&e.getTime()<t.getTime()},a.bigger=function(t,e,i){return!(!t||!e)&&e.getTime()>t.getTime()},a.getLeadingZeroNum=function(t){return parseInt(t)<10?"0"+t:t},a.resetTime=function(t){if("object"==typeof t)return t=a.getParsedDate(t),new Date(t.year,t.month,t.date)},e.fn.datepicker=function(t){return this.each((function(){if(e.data(this,"datepicker")){var i=e.data(this,"datepicker");i.opts=e.extend(!0,i.opts,t),i.update()}else e.data(this,"datepicker",new l(this,t))}))},e.fn.datepicker.Constructor=l,e.fn.datepicker.language={ru:{days:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"],daysShort:["Вос","Пон","Вто","Сре","Чет","Пят","Суб"],daysMin:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],months:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthsShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],today:"Сегодня",clear:"Очистить",dateFormat:"dd.mm.yyyy",timeFormat:"hh:ii",firstDay:1}},e((function(){e(".datepicker-here").datepicker()})),function(){var t={days:'<div class="datepicker--days datepicker--body"><div class="datepicker--days-names"></div><div class="datepicker--cells datepicker--cells-days"></div></div>',months:'<div class="datepicker--months datepicker--body"><div class="datepicker--cells datepicker--cells-months"></div></div>',years:'<div class="datepicker--years datepicker--body"><div class="datepicker--cells datepicker--cells-years"></div></div>'},i=e.fn.datepicker,s=i.Constructor;i.Body=function(t,i,s){this.d=t,this.type=i,this.opts=s,this.$el=e(""),this.opts.onlyTimepicker||this.init()},i.Body.prototype={init:function(){this._buildBaseHtml(),this._render(),this._bindEvents()},_bindEvents:function(){this.$el.on("click",".datepicker--cell",e.proxy(this._onClickCell,this))},_buildBaseHtml:function(){this.$el=e(t[this.type]).appendTo(this.d.$content),this.$names=e(".datepicker--days-names",this.$el),this.$cells=e(".datepicker--cells",this.$el)},_getDayNamesHtml:function(t,e,i,s){return i=i||"",(s=null!=s?s:0)>7?i:7==(e=null!=e?e:t)?this._getDayNamesHtml(t,0,i,++s):(i+='<div class="datepicker--day-name'+(this.d.isWeekend(e)?" -weekend-":"")+'">'+this.d.loc.daysMin[e]+"</div>",this._getDayNamesHtml(t,++e,i,++s))},_getCellContents:function(t,e){var i="datepicker--cell datepicker--cell-"+e,n=new Date,a=this.d,r=s.resetTime(a.minRange),o=s.resetTime(a.maxRange),c=a.opts,l=s.getParsedDate(t),u={},h=l.date;switch(e){case"day":a.isWeekend(l.day)&&(i+=" -weekend-"),l.month!=this.d.parsedDate.month&&(i+=" -other-month-",c.selectOtherMonths||(i+=" -disabled-"),c.showOtherMonths||(h=""));break;case"month":h=a.loc[a.opts.monthsField][l.month];break;case"year":var d=a.curDecade;h=l.year,(l.year<d[0]||l.year>d[1])&&(i+=" -other-decade-",c.selectOtherYears||(i+=" -disabled-"),c.showOtherYears||(h=""))}return c.onRenderCell&&(h=(u=c.onRenderCell(t,e)||{}).html?u.html:h,i+=u.classes?" "+u.classes:""),c.range&&(s.isSame(r,t,e)&&(i+=" -range-from-"),s.isSame(o,t,e)&&(i+=" -range-to-"),1==a.selectedDates.length&&a.focused?((s.bigger(r,t)&&s.less(a.focused,t)||s.less(o,t)&&s.bigger(a.focused,t))&&(i+=" -in-range-"),s.less(o,t)&&s.isSame(a.focused,t)&&(i+=" -range-from-"),s.bigger(r,t)&&s.isSame(a.focused,t)&&(i+=" -range-to-")):2==a.selectedDates.length&&s.bigger(r,t)&&s.less(o,t)&&(i+=" -in-range-")),s.isSame(n,t,e)&&(i+=" -current-"),a.focused&&s.isSame(t,a.focused,e)&&(i+=" -focus-"),a._isSelected(t,e)&&(i+=" -selected-"),a._isInRange(t,e)&&!u.disabled||(i+=" -disabled-"),{html:h,classes:i}},_getDaysHtml:function(t){for(var e,i,n=s.getDaysCount(t),a=new Date(t.getFullYear(),t.getMonth(),1).getDay(),r=new Date(t.getFullYear(),t.getMonth(),n).getDay(),o=a-this.d.loc.firstDay,c=6-r+this.d.loc.firstDay,l="",u=1-(o=o<0?o+7:o),h=n+(c=c>6?c-7:c);u<=h;u++)i=t.getFullYear(),e=t.getMonth(),l+=this._getDayHtml(new Date(i,e,u));return l},_getDayHtml:function(t){var e=this._getCellContents(t,"day");return'<div class="'+e.classes+'" data-date="'+t.getDate()+'" data-month="'+t.getMonth()+'" data-year="'+t.getFullYear()+'">'+e.html+"</div>"},_getMonthsHtml:function(t){for(var e="",i=s.getParsedDate(t),n=0;n<12;)e+=this._getMonthHtml(new Date(i.year,n)),n++;return e},_getMonthHtml:function(t){var e=this._getCellContents(t,"month");return'<div class="'+e.classes+'" data-month="'+t.getMonth()+'">'+e.html+"</div>"},_getYearsHtml:function(t){s.getParsedDate(t);for(var e=s.getDecade(t),i="",n=e[0]-1;n<=e[1]+1;n++)i+=this._getYearHtml(new Date(n,0));return i},_getYearHtml:function(t){var e=this._getCellContents(t,"year");return'<div class="'+e.classes+'" data-year="'+t.getFullYear()+'">'+e.html+"</div>"},_renderTypes:{days:function(){var t=this._getDayNamesHtml(this.d.loc.firstDay),e=this._getDaysHtml(this.d.currentDate);this.$cells.html(e),this.$names.html(t)},months:function(){var t=this._getMonthsHtml(this.d.currentDate);this.$cells.html(t)},years:function(){var t=this._getYearsHtml(this.d.currentDate);this.$cells.html(t)}},_render:function(){this.opts.onlyTimepicker||this._renderTypes[this.type].bind(this)()},_update:function(){var t,i,s,n=e(".datepicker--cell",this.$cells),a=this;n.each((function(n,r){i=e(this),s=a.d._getDateFromCell(e(this)),t=a._getCellContents(s,a.d.cellType),i.attr("class",t.classes)}))},show:function(){this.opts.onlyTimepicker||(this.$el.addClass("active"),this.acitve=!0)},hide:function(){this.$el.removeClass("active"),this.active=!1},_handleClick:function(t){var e=t.data("date")||1,i=t.data("month")||0,s=t.data("year")||this.d.parsedDate.year,n=this.d;if(n.view==this.opts.minView){var a=new Date(s,i,e),r=this.d._isSelected(a,this.d.cellType);r?n._handleAlreadySelectedDates.bind(n,r,a)():n._trigger("clickCell",a)}else n.down(new Date(s,i,e))},_onClickCell:function(t){var i=e(t.target).closest(".datepicker--cell");i.hasClass("-disabled-")||this._handleClick.bind(this)(i)}}}(),function(){var t=e.fn.datepicker,i=t.Constructor;t.Navigation=function(t,e){this.d=t,this.opts=e,this.$buttonsContainer="",this.init()},t.Navigation.prototype={init:function(){this._buildBaseHtml(),this._bindEvents()},_bindEvents:function(){this.d.$nav.on("click",".datepicker--nav-action",e.proxy(this._onClickNavButton,this)),this.d.$nav.on("click",".datepicker--nav-title",e.proxy(this._onClickNavTitle,this)),this.d.$datepicker.on("click",".datepicker--button",e.proxy(this._onClickNavButton,this))},_buildBaseHtml:function(){this.opts.onlyTimepicker||this._render(),this._addButtonsIfNeed()},_addButtonsIfNeed:function(){this.opts.todayButton&&this._addButton("today"),this.opts.clearButton&&this._addButton("clear")},_render:function(){var t=this._getTitle(this.d.currentDate),s=i.template('<div class="datepicker--nav-action" data-action="prev">#{prevHtml}</div><div class="datepicker--nav-title">#{title}</div><div class="datepicker--nav-action" data-action="next">#{nextHtml}</div>',e.extend({title:t},this.opts));this.d.$nav.html(s),"years"==this.d.view&&e(".datepicker--nav-title",this.d.$nav).addClass("-disabled-"),this.setNavStatus()},_getTitle:function(t){return this.d.formatDate(this.opts.navTitles[this.d.view],t)},_addButton:function(t){this.$buttonsContainer.length||this._addButtonsContainer();var s={action:t,label:this.d.loc[t]},n=i.template('<span class="datepicker--button" data-action="#{action}">#{label}</span>',s);e("[data-action="+t+"]",this.$buttonsContainer).length||this.$buttonsContainer.append(n)},_addButtonsContainer:function(){this.d.$datepicker.append('<div class="datepicker--buttons"></div>'),this.$buttonsContainer=e(".datepicker--buttons",this.d.$datepicker)},setNavStatus:function(){if((this.opts.minDate||this.opts.maxDate)&&this.opts.disableNavWhenOutOfRange){var t=this.d.parsedDate,e=t.month,s=t.year,n=t.date;switch(this.d.view){case"days":this.d._isInRange(new Date(s,e-1,1),"month")||this._disableNav("prev"),this.d._isInRange(new Date(s,e+1,1),"month")||this._disableNav("next");break;case"months":this.d._isInRange(new Date(s-1,e,n),"year")||this._disableNav("prev"),this.d._isInRange(new Date(s+1,e,n),"year")||this._disableNav("next");break;case"years":var a=i.getDecade(this.d.date);this.d._isInRange(new Date(a[0]-1,0,1),"year")||this._disableNav("prev"),this.d._isInRange(new Date(a[1]+1,0,1),"year")||this._disableNav("next")}}},_disableNav:function(t){e('[data-action="'+t+'"]',this.d.$nav).addClass("-disabled-")},_activateNav:function(t){e('[data-action="'+t+'"]',this.d.$nav).removeClass("-disabled-")},_onClickNavButton:function(t){var i=e(t.target).closest("[data-action]").data("action");this.d[i]()},_onClickNavTitle:function(t){if(!e(t.target).hasClass("-disabled-"))return"days"==this.d.view?this.d.view="months":void(this.d.view="years")}}}(),function(){var t=e.fn.datepicker,i=t.Constructor;t.Timepicker=function(t,e){this.d=t,this.opts=e,this.init()},t.Timepicker.prototype={init:function(){var t="input";this._setTime(this.d.date),this._buildHTML(),navigator.userAgent.match(/trident/gi)&&(t="change"),this.d.$el.on("selectDate",this._onSelectDate.bind(this)),this.$ranges.on(t,this._onChangeRange.bind(this)),this.$ranges.on("mouseup",this._onMouseUpRange.bind(this)),this.$ranges.on("mousemove focus ",this._onMouseEnterRange.bind(this)),this.$ranges.on("mouseout blur",this._onMouseOutRange.bind(this))},_setTime:function(t){var e=i.getParsedDate(t);this._handleDate(t),this.hours=e.hours<this.minHours?this.minHours:e.hours,this.minutes=e.minutes<this.minMinutes?this.minMinutes:e.minutes},_setMinTimeFromDate:function(t){this.minHours=t.getHours(),this.minMinutes=t.getMinutes(),this.d.lastSelectedDate&&this.d.lastSelectedDate.getHours()>t.getHours()&&(this.minMinutes=this.opts.minMinutes)},_setMaxTimeFromDate:function(t){this.maxHours=t.getHours(),this.maxMinutes=t.getMinutes(),this.d.lastSelectedDate&&this.d.lastSelectedDate.getHours()<t.getHours()&&(this.maxMinutes=this.opts.maxMinutes)},_setDefaultMinMaxTime:function(){var t=this.opts;this.minHours=t.minHours<0||t.minHours>23?0:t.minHours,this.minMinutes=t.minMinutes<0||t.minMinutes>59?0:t.minMinutes,this.maxHours=t.maxHours<0||t.maxHours>23?23:t.maxHours,this.maxMinutes=t.maxMinutes<0||t.maxMinutes>59?59:t.maxMinutes},_validateHoursMinutes:function(t){this.hours<this.minHours?this.hours=this.minHours:this.hours>this.maxHours&&(this.hours=this.maxHours),this.minutes<this.minMinutes?this.minutes=this.minMinutes:this.minutes>this.maxMinutes&&(this.minutes=this.maxMinutes)},_buildHTML:function(){var t=i.getLeadingZeroNum,s={hourMin:this.minHours,hourMax:t(this.maxHours),hourStep:this.opts.hoursStep,hourValue:this.hours,hourVisible:t(this.displayHours),minMin:this.minMinutes,minMax:t(this.maxMinutes),minStep:this.opts.minutesStep,minValue:t(this.minutes)},n=i.template('<div class="datepicker--time"><div class="datepicker--time-current">   <span class="datepicker--time-current-hours">#{hourVisible}</span>   <span class="datepicker--time-current-colon">:</span>   <span class="datepicker--time-current-minutes">#{minValue}</span></div><div class="datepicker--time-sliders">   <div class="datepicker--time-row">      <input type="range" name="hours" value="#{hourValue}" min="#{hourMin}" max="#{hourMax}" step="#{hourStep}"/>   </div>   <div class="datepicker--time-row">      <input type="range" name="minutes" value="#{minValue}" min="#{minMin}" max="#{minMax}" step="#{minStep}"/>   </div></div></div>',s);this.$timepicker=e(n).appendTo(this.d.$datepicker),this.$ranges=e('[type="range"]',this.$timepicker),this.$hours=e('[name="hours"]',this.$timepicker),this.$minutes=e('[name="minutes"]',this.$timepicker),this.$hoursText=e(".datepicker--time-current-hours",this.$timepicker),this.$minutesText=e(".datepicker--time-current-minutes",this.$timepicker),this.d.ampm&&(this.$ampm=e('<span class="datepicker--time-current-ampm">').appendTo(e(".datepicker--time-current",this.$timepicker)).html(this.dayPeriod),this.$timepicker.addClass("-am-pm-"))},_updateCurrentTime:function(){var t=i.getLeadingZeroNum(this.displayHours),e=i.getLeadingZeroNum(this.minutes);this.$hoursText.html(t),this.$minutesText.html(e),this.d.ampm&&this.$ampm.html(this.dayPeriod)},_updateRanges:function(){this.$hours.attr({min:this.minHours,max:this.maxHours}).val(this.hours),this.$minutes.attr({min:this.minMinutes,max:this.maxMinutes}).val(this.minutes)},_handleDate:function(t){this._setDefaultMinMaxTime(),t&&(i.isSame(t,this.d.opts.minDate)?this._setMinTimeFromDate(this.d.opts.minDate):i.isSame(t,this.d.opts.maxDate)&&this._setMaxTimeFromDate(this.d.opts.maxDate)),this._validateHoursMinutes(t)},update:function(){this._updateRanges(),this._updateCurrentTime()},_getValidHoursFromDate:function(t,e){var s=t;t instanceof Date&&(s=i.getParsedDate(t).hours);var n="am";if(e||this.d.ampm)switch(!0){case 0==s:s=12;break;case 12==s:n="pm";break;case s>11:s-=12,n="pm"}return{hours:s,dayPeriod:n}},set hours(t){this._hours=t;var e=this._getValidHoursFromDate(t);this.displayHours=e.hours,this.dayPeriod=e.dayPeriod},get hours(){return this._hours},_onChangeRange:function(t){var i=e(t.target),s=i.attr("name");this.d.timepickerIsActive=!0,this[s]=i.val(),this._updateCurrentTime(),this.d._trigger("timeChange",[this.hours,this.minutes]),this._handleDate(this.d.lastSelectedDate),this.update()},_onSelectDate:function(t,e){this._handleDate(e),this.update()},_onMouseEnterRange:function(t){var i=e(t.target).attr("name");e(".datepicker--time-current-"+i,this.$timepicker).addClass("-focus-")},_onMouseOutRange:function(t){var i=e(t.target).attr("name");this.d.inFocus||e(".datepicker--time-current-"+i,this.$timepicker).removeClass("-focus-")},_onMouseUpRange:function(t){this.d.timepickerIsActive=!1}}}()}(window,jQuery)},function(t,e,i){var s,n,a;/*! nouislider - 14.5.0 - 5/11/2020 */n=[],void 0===(a="function"==typeof(s=function(){"use strict";var t="14.5.0";function e(t){t.parentElement.removeChild(t)}function i(t){return null!=t}function s(t){t.preventDefault()}function n(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function a(t,e,i){i>0&&(l(t,e),setTimeout((function(){u(t,e)}),i))}function r(t){return Math.max(Math.min(t,100),0)}function o(t){return Array.isArray(t)?t:[t]}function c(t){var e=(t=String(t)).split(".");return e.length>1?e[1].length:0}function l(t,e){t.classList&&!/\s/.test(e)?t.classList.add(e):t.className+=" "+e}function u(t,e){t.classList&&!/\s/.test(e)?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")}function h(t){var e=void 0!==window.pageXOffset,i="CSS1Compat"===(t.compatMode||"");return{x:e?window.pageXOffset:i?t.documentElement.scrollLeft:t.body.scrollLeft,y:e?window.pageYOffset:i?t.documentElement.scrollTop:t.body.scrollTop}}function d(t,e){return 100/(e-t)}function p(t,e,i){return 100*e/(t[i+1]-t[i])}function m(t,e){for(var i=1;t>=e[i];)i+=1;return i}function f(t,e,i){if(i>=t.slice(-1)[0])return 100;var s=m(i,t),n=t[s-1],a=t[s],r=e[s-1],o=e[s];return r+function(t,e){return p(t,t[0]<0?e+Math.abs(t[0]):e-t[0],0)}([n,a],i)/d(r,o)}function g(t,e,i,s){if(100===s)return s;var n=m(s,t),a=t[n-1],r=t[n];return i?s-a>(r-a)/2?r:a:e[n-1]?t[n-1]+function(t,e){return Math.round(t/e)*e}(s-t[n-1],e[n-1]):s}function v(t,e,i){var s;if("number"==typeof e&&(e=[e]),!Array.isArray(e))throw new Error("noUiSlider (14.5.0): 'range' contains invalid value.");if(!n(s="min"===t?0:"max"===t?100:parseFloat(t))||!n(e[0]))throw new Error("noUiSlider (14.5.0): 'range' value isn't numeric.");i.xPct.push(s),i.xVal.push(e[0]),s?i.xSteps.push(!isNaN(e[1])&&e[1]):isNaN(e[1])||(i.xSteps[0]=e[1]),i.xHighestCompleteStep.push(0)}function y(t,e,i){if(e)if(i.xVal[t]!==i.xVal[t+1]){i.xSteps[t]=p([i.xVal[t],i.xVal[t+1]],e,0)/d(i.xPct[t],i.xPct[t+1]);var s=(i.xVal[t+1]-i.xVal[t])/i.xNumSteps[t],n=Math.ceil(Number(s.toFixed(3))-1),a=i.xVal[t]+i.xNumSteps[t]*n;i.xHighestCompleteStep[t]=a}else i.xSteps[t]=i.xHighestCompleteStep[t]=i.xVal[t]}function b(t,e,i){var s;this.xPct=[],this.xVal=[],this.xSteps=[i||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=e;var n=[];for(s in t)t.hasOwnProperty(s)&&n.push([t[s],s]);for(n.length&&"object"==typeof n[0][0]?n.sort((function(t,e){return t[0][0]-e[0][0]})):n.sort((function(t,e){return t[0]-e[0]})),s=0;s<n.length;s++)v(n[s][1],n[s][0],this);for(this.xNumSteps=this.xSteps.slice(0),s=0;s<this.xNumSteps.length;s++)y(s,this.xNumSteps[s],this)}b.prototype.getDistance=function(t){var e,i=[];for(e=0;e<this.xNumSteps.length-1;e++){var s=this.xNumSteps[e];if(s&&t/s%1!=0)throw new Error("noUiSlider (14.5.0): 'limit', 'margin' and 'padding' of "+this.xPct[e]+"% range must be divisible by step.");i[e]=p(this.xVal,t,e)}return i},b.prototype.getAbsoluteDistance=function(t,e,i){var s,n=0;if(t<this.xPct[this.xPct.length-1])for(;t>this.xPct[n+1];)n++;else t===this.xPct[this.xPct.length-1]&&(n=this.xPct.length-2);i||t!==this.xPct[n+1]||n++;var a=1,r=e[n],o=0,c=0,l=0,u=0;for(s=i?(t-this.xPct[n])/(this.xPct[n+1]-this.xPct[n]):(this.xPct[n+1]-t)/(this.xPct[n+1]-this.xPct[n]);r>0;)o=this.xPct[n+1+u]-this.xPct[n+u],e[n+u]*a+100-100*s>100?(c=o*s,a=(r-100*s)/e[n+u],s=1):(c=e[n+u]*o/100*a,a=0),i?(l-=c,this.xPct.length+u>=1&&u--):(l+=c,this.xPct.length-u>=1&&u++),r=e[n+u]*a;return t+l},b.prototype.toStepping=function(t){return t=f(this.xVal,this.xPct,t)},b.prototype.fromStepping=function(t){return function(t,e,i){if(i>=100)return t.slice(-1)[0];var s=m(i,e),n=t[s-1],a=t[s],r=e[s-1];return function(t,e){return e*(t[1]-t[0])/100+t[0]}([n,a],(i-r)*d(r,e[s]))}(this.xVal,this.xPct,t)},b.prototype.getStep=function(t){return t=g(this.xPct,this.xSteps,this.snap,t)},b.prototype.getDefaultStep=function(t,e,i){var s=m(t,this.xPct);return(100===t||e&&t===this.xPct[s-1])&&(s=Math.max(s-1,1)),(this.xVal[s]-this.xVal[s-1])/i},b.prototype.getNearbySteps=function(t){var e=m(t,this.xPct);return{stepBefore:{startValue:this.xVal[e-2],step:this.xNumSteps[e-2],highestStep:this.xHighestCompleteStep[e-2]},thisStep:{startValue:this.xVal[e-1],step:this.xNumSteps[e-1],highestStep:this.xHighestCompleteStep[e-1]},stepAfter:{startValue:this.xVal[e],step:this.xNumSteps[e],highestStep:this.xHighestCompleteStep[e]}}},b.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(c);return Math.max.apply(null,t)},b.prototype.convert=function(t){return this.getStep(this.toStepping(t))};var k={to:function(t){return void 0!==t&&t.toFixed(2)},from:Number},_={target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"};function w(t){if(function(t){return"object"==typeof t&&"function"==typeof t.to&&"function"==typeof t.from}(t))return!0;throw new Error("noUiSlider (14.5.0): 'format' requires 'to' and 'from' methods.")}function D(t,e){if(!n(e))throw new Error("noUiSlider (14.5.0): 'step' is not numeric.");t.singleStep=e}function x(t,e){if("object"!=typeof e||Array.isArray(e))throw new Error("noUiSlider (14.5.0): 'range' is not an object.");if(void 0===e.min||void 0===e.max)throw new Error("noUiSlider (14.5.0): Missing 'min' or 'max' in 'range'.");if(e.min===e.max)throw new Error("noUiSlider (14.5.0): 'range' 'min' and 'max' cannot be equal.");t.spectrum=new b(e,t.snap,t.singleStep)}function S(t,e){if(e=o(e),!Array.isArray(e)||!e.length)throw new Error("noUiSlider (14.5.0): 'start' option is incorrect.");t.handles=e.length,t.start=e}function C(t,e){if(t.snap=e,"boolean"!=typeof e)throw new Error("noUiSlider (14.5.0): 'snap' option must be a boolean.")}function M(t,e){if(t.animate=e,"boolean"!=typeof e)throw new Error("noUiSlider (14.5.0): 'animate' option must be a boolean.")}function E(t,e){if(t.animationDuration=e,"number"!=typeof e)throw new Error("noUiSlider (14.5.0): 'animationDuration' option must be a number.")}function T(t,e){var i,s=[!1];if("lower"===e?e=[!0,!1]:"upper"===e&&(e=[!1,!0]),!0===e||!1===e){for(i=1;i<t.handles;i++)s.push(e);s.push(!1)}else{if(!Array.isArray(e)||!e.length||e.length!==t.handles+1)throw new Error("noUiSlider (14.5.0): 'connect' option doesn't match handle count.");s=e}t.connect=s}function N(t,e){switch(e){case"horizontal":t.ort=0;break;case"vertical":t.ort=1;break;default:throw new Error("noUiSlider (14.5.0): 'orientation' option is invalid.")}}function $(t,e){if(!n(e))throw new Error("noUiSlider (14.5.0): 'margin' option must be numeric.");0!==e&&(t.margin=t.spectrum.getDistance(e))}function H(t,e){if(!n(e))throw new Error("noUiSlider (14.5.0): 'limit' option must be numeric.");if(t.limit=t.spectrum.getDistance(e),!t.limit||t.handles<2)throw new Error("noUiSlider (14.5.0): 'limit' option is only supported on linear sliders with 2 or more handles.")}function j(t,e){var i;if(!n(e)&&!Array.isArray(e))throw new Error("noUiSlider (14.5.0): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(e)&&2!==e.length&&!n(e[0])&&!n(e[1]))throw new Error("noUiSlider (14.5.0): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==e){for(Array.isArray(e)||(e=[e,e]),t.padding=[t.spectrum.getDistance(e[0]),t.spectrum.getDistance(e[1])],i=0;i<t.spectrum.xNumSteps.length-1;i++)if(t.padding[0][i]<0||t.padding[1][i]<0)throw new Error("noUiSlider (14.5.0): 'padding' option must be a positive number(s).");var s=e[0]+e[1],a=t.spectrum.xVal[0];if(s/(t.spectrum.xVal[t.spectrum.xVal.length-1]-a)>1)throw new Error("noUiSlider (14.5.0): 'padding' option must not exceed 100% of the range.")}}function P(t,e){switch(e){case"ltr":t.dir=0;break;case"rtl":t.dir=1;break;default:throw new Error("noUiSlider (14.5.0): 'direction' option was not recognized.")}}function R(t,e){if("string"!=typeof e)throw new Error("noUiSlider (14.5.0): 'behaviour' must be a string containing options.");var i=e.indexOf("tap")>=0,s=e.indexOf("drag")>=0,n=e.indexOf("fixed")>=0,a=e.indexOf("snap")>=0,r=e.indexOf("hover")>=0,o=e.indexOf("unconstrained")>=0;if(n){if(2!==t.handles)throw new Error("noUiSlider (14.5.0): 'fixed' behaviour must be used with 2 handles");$(t,t.start[1]-t.start[0])}if(o&&(t.margin||t.limit))throw new Error("noUiSlider (14.5.0): 'unconstrained' behaviour cannot be used with margin or limit");t.events={tap:i||a,drag:s,fixed:n,snap:a,hover:r,unconstrained:o}}function V(t,e){if(!1!==e)if(!0===e){t.tooltips=[];for(var i=0;i<t.handles;i++)t.tooltips.push(!0)}else{if(t.tooltips=o(e),t.tooltips.length!==t.handles)throw new Error("noUiSlider (14.5.0): must pass a formatter for all handles.");t.tooltips.forEach((function(t){if("boolean"!=typeof t&&("object"!=typeof t||"function"!=typeof t.to))throw new Error("noUiSlider (14.5.0): 'tooltips' must be passed a formatter or 'false'.")}))}}function F(t,e){t.ariaFormat=e,w(e)}function L(t,e){t.format=e,w(e)}function O(t,e){if(t.keyboardSupport=e,"boolean"!=typeof e)throw new Error("noUiSlider (14.5.0): 'keyboardSupport' option must be a boolean.")}function U(t,e){t.documentElement=e}function A(t,e){if("string"!=typeof e&&!1!==e)throw new Error("noUiSlider (14.5.0): 'cssPrefix' must be a string or `false`.");t.cssPrefix=e}function B(t,e){if("object"!=typeof e)throw new Error("noUiSlider (14.5.0): 'cssClasses' must be an object.");if("string"==typeof t.cssPrefix)for(var i in t.cssClasses={},e)e.hasOwnProperty(i)&&(t.cssClasses[i]=t.cssPrefix+e[i]);else t.cssClasses=e}function I(t){var e={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:k,format:k},s={step:{r:!1,t:D},start:{r:!0,t:S},connect:{r:!0,t:T},direction:{r:!0,t:P},snap:{r:!1,t:C},animate:{r:!1,t:M},animationDuration:{r:!1,t:E},range:{r:!0,t:x},orientation:{r:!1,t:N},margin:{r:!1,t:$},limit:{r:!1,t:H},padding:{r:!1,t:j},behaviour:{r:!0,t:R},ariaFormat:{r:!1,t:F},format:{r:!1,t:L},tooltips:{r:!1,t:V},keyboardSupport:{r:!0,t:O},documentElement:{r:!1,t:U},cssPrefix:{r:!0,t:A},cssClasses:{r:!0,t:B}},n={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:_};t.format&&!t.ariaFormat&&(t.ariaFormat=t.format),Object.keys(s).forEach((function(a){if(!i(t[a])&&void 0===n[a]){if(s[a].r)throw new Error("noUiSlider (14.5.0): '"+a+"' is required.");return!0}s[a].t(e,i(t[a])?t[a]:n[a])})),e.pips=t.pips;var a=document.createElement("div"),r=void 0!==a.style.msTransform,o=void 0!==a.style.transform;return e.transformRule=o?"transform":r?"msTransform":"webkitTransform",e.style=[["left","top"],["right","bottom"]][e.dir][e.ort],e}function Y(t,i,n){var c,d,p,m,f,g,v,y,b=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},k=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,e)}catch(t){}return t}(),_=t,w=i.spectrum,D=[],x=[],S=[],C=0,M={},E=t.ownerDocument,T=i.documentElement||E.documentElement,N=E.body,$="rtl"===E.dir||1===i.ort?0:100;function H(t,e){var i=E.createElement("div");return e&&l(i,e),t.appendChild(i),i}function j(t,e){var s=H(t,i.cssClasses.origin),n=H(s,i.cssClasses.handle);return H(n,i.cssClasses.touchArea),n.setAttribute("data-handle",e),i.keyboardSupport&&(n.setAttribute("tabindex","0"),n.addEventListener("keydown",(function(t){return function(t,e){if(V()||F(e))return!1;var s=["Left","Right"],n=["Down","Up"],a=["PageDown","PageUp"],r=["Home","End"];i.dir&&!i.ort?s.reverse():i.ort&&!i.dir&&(n.reverse(),a.reverse());var o,c=t.key.replace("Arrow",""),l=c===a[0],u=c===a[1],h=c===n[0]||c===s[0]||l,d=c===n[1]||c===s[1]||u,p=c===r[0],m=c===r[1];if(!(h||d||p||m))return!0;if(t.preventDefault(),d||h){var f=h?0:1,g=dt(e)[f];if(null===g)return!1;!1===g&&(g=w.getDefaultStep(x[e],h,10)),(u||l)&&(g*=5),g=Math.max(g,1e-7),g*=h?-1:1,o=D[e]+g}else o=m?i.spectrum.xVal[i.spectrum.xVal.length-1]:i.spectrum.xVal[0];return ot(e,w.toStepping(o),!0,!0),et("slide",e),et("update",e),et("change",e),et("set",e),!1}(t,e)}))),n.setAttribute("role","slider"),n.setAttribute("aria-orientation",i.ort?"vertical":"horizontal"),0===e?l(n,i.cssClasses.handleLower):e===i.handles-1&&l(n,i.cssClasses.handleUpper),s}function P(t,e){return!!e&&H(t,i.cssClasses.connect)}function R(t,e){return!!i.tooltips[e]&&H(t.firstChild,i.cssClasses.tooltip)}function V(){return _.hasAttribute("disabled")}function F(t){return d[t].hasAttribute("disabled")}function L(){f&&(tt("update.tooltips"),f.forEach((function(t){t&&e(t)})),f=null)}function O(){L(),f=d.map(R),J("update.tooltips",(function(t,e,s){if(f[e]){var n=t[e];!0!==i.tooltips[e]&&(n=i.tooltips[e].to(s[e])),f[e].innerHTML=n}}))}function U(t,e,s){var n=E.createElement("div"),a=[];a[0]=i.cssClasses.valueNormal,a[1]=i.cssClasses.valueLarge,a[2]=i.cssClasses.valueSub;var r=[];r[0]=i.cssClasses.markerNormal,r[1]=i.cssClasses.markerLarge,r[2]=i.cssClasses.markerSub;var o=[i.cssClasses.valueHorizontal,i.cssClasses.valueVertical],c=[i.cssClasses.markerHorizontal,i.cssClasses.markerVertical];function u(t,e){var s=e===i.cssClasses.value,n=s?a:r;return e+" "+(s?o:c)[i.ort]+" "+n[t]}return l(n,i.cssClasses.pips),l(n,0===i.ort?i.cssClasses.pipsHorizontal:i.cssClasses.pipsVertical),Object.keys(t).forEach((function(a){!function(t,a,r){if(-1!==(r=e?e(a,r):r)){var o=H(n,!1);o.className=u(r,i.cssClasses.marker),o.style[i.style]=t+"%",r>0&&((o=H(n,!1)).className=u(r,i.cssClasses.value),o.setAttribute("data-value",a),o.style[i.style]=t+"%",o.innerHTML=s.to(a))}}(a,t[a][0],t[a][1])})),n}function A(){m&&(e(m),m=null)}function B(t){A();var e=t.mode,i=t.density||1,s=t.filter||!1,n=function(t,e,i){if("range"===t||"steps"===t)return w.xVal;if("count"===t){if(e<2)throw new Error("noUiSlider (14.5.0): 'values' (>= 2) required for mode 'count'.");var s=e-1,n=100/s;for(e=[];s--;)e[s]=s*n;e.push(100),t="positions"}return"positions"===t?e.map((function(t){return w.fromStepping(i?w.getStep(t):t)})):"values"===t?i?e.map((function(t){return w.fromStepping(w.getStep(w.toStepping(t)))})):e:void 0}(e,t.values||!1,t.stepped||!1),a=function(t,e,i){var s,n={},a=w.xVal[0],r=w.xVal[w.xVal.length-1],o=!1,c=!1,l=0;return s=i.slice().sort((function(t,e){return t-e})),(i=s.filter((function(t){return!this[t]&&(this[t]=!0)}),{}))[0]!==a&&(i.unshift(a),o=!0),i[i.length-1]!==r&&(i.push(r),c=!0),i.forEach((function(s,a){var r,u,h,d,p,m,f,g,v,y,b=s,k=i[a+1],_="steps"===e;if(_&&(r=w.xNumSteps[a]),r||(r=k-b),!1!==b&&void 0!==k)for(r=Math.max(r,1e-7),u=b;u<=k;u=(u+r).toFixed(7)/1){for(g=(p=(d=w.toStepping(u))-l)/t,y=p/(v=Math.round(g)),h=1;h<=v;h+=1)n[(m=l+h*y).toFixed(5)]=[w.fromStepping(m),0];f=i.indexOf(u)>-1?1:_?2:0,!a&&o&&u!==k&&(f=0),u===k&&c||(n[d.toFixed(5)]=[u,f]),l=d}})),n}(i,e,n),r=t.format||{to:Math.round};return m=_.appendChild(U(a,s,r))}function Y(){var t=c.getBoundingClientRect(),e="offset"+["Width","Height"][i.ort];return 0===i.ort?t.width||c[e]:t.height||c[e]}function q(t,e,s,n){var a=function(a){return!!(a=function(t,e,i){var s,n,a=0===t.type.indexOf("touch"),r=0===t.type.indexOf("mouse"),o=0===t.type.indexOf("pointer");if(0===t.type.indexOf("MSPointer")&&(o=!0),a){var c=function(t){return t.target===i||i.contains(t.target)||t.target.shadowRoot&&t.target.shadowRoot.contains(i)};if("touchstart"===t.type){var l=Array.prototype.filter.call(t.touches,c);if(l.length>1)return!1;s=l[0].pageX,n=l[0].pageY}else{var u=Array.prototype.find.call(t.changedTouches,c);if(!u)return!1;s=u.pageX,n=u.pageY}}return e=e||h(E),(r||o)&&(s=t.clientX+e.x,n=t.clientY+e.y),t.pageOffset=e,t.points=[s,n],t.cursor=r||o,t}(a,n.pageOffset,n.target||e))&&!(V()&&!n.doNotReject)&&(r=_,o=i.cssClasses.tap,!((r.classList?r.classList.contains(o):new RegExp("\\b"+o+"\\b").test(r.className))&&!n.doNotReject)&&!(t===b.start&&void 0!==a.buttons&&a.buttons>1)&&(!n.hover||!a.buttons)&&(k||a.preventDefault(),a.calcPoint=a.points[i.ort],void s(a,n)));var r,o},r=[];return t.split(" ").forEach((function(t){e.addEventListener(t,a,!!k&&{passive:!0}),r.push([t,a])})),r}function z(t){var e,s,n,a,o,l,u=100*(t-(e=c,s=i.ort,n=e.getBoundingClientRect(),a=e.ownerDocument,o=a.documentElement,l=h(a),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(l.x=0),s?n.top+l.y-o.clientTop:n.left+l.x-o.clientLeft))/Y();return u=r(u),i.dir?100-u:u}function K(t,e){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&Q(t,e)}function W(t,e){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==e.buttonsProperty)return Q(t,e);var s=(i.dir?-1:1)*(t.calcPoint-e.startCalcPoint);nt(s>0,100*s/e.baseSize,e.locations,e.handleNumbers)}function Q(t,e){e.handle&&(u(e.handle,i.cssClasses.active),C-=1),e.listeners.forEach((function(t){T.removeEventListener(t[0],t[1])})),0===C&&(u(_,i.cssClasses.drag),rt(),t.cursor&&(N.style.cursor="",N.removeEventListener("selectstart",s))),e.handleNumbers.forEach((function(t){et("change",t),et("set",t),et("end",t)}))}function X(t,e){if(e.handleNumbers.some(F))return!1;var n;1===e.handleNumbers.length&&(n=d[e.handleNumbers[0]].children[0],C+=1,l(n,i.cssClasses.active)),t.stopPropagation();var a=[],r=q(b.move,T,W,{target:t.target,handle:n,listeners:a,startCalcPoint:t.calcPoint,baseSize:Y(),pageOffset:t.pageOffset,handleNumbers:e.handleNumbers,buttonsProperty:t.buttons,locations:x.slice()}),o=q(b.end,T,Q,{target:t.target,handle:n,listeners:a,doNotReject:!0,handleNumbers:e.handleNumbers}),c=q("mouseout",T,K,{target:t.target,handle:n,listeners:a,doNotReject:!0,handleNumbers:e.handleNumbers});a.push.apply(a,r.concat(o,c)),t.cursor&&(N.style.cursor=getComputedStyle(t.target).cursor,d.length>1&&l(_,i.cssClasses.drag),N.addEventListener("selectstart",s,!1)),e.handleNumbers.forEach((function(t){et("start",t)}))}function Z(t){t.stopPropagation();var e=z(t.calcPoint),s=function(t){var e=100,i=!1;return d.forEach((function(s,n){if(!F(n)){var a=x[n],r=Math.abs(a-t);(r<e||r<=e&&t>a||100===r&&100===e)&&(i=n,e=r)}})),i}(e);if(!1===s)return!1;i.events.snap||a(_,i.cssClasses.tap,i.animationDuration),ot(s,e,!0,!0),rt(),et("slide",s,!0),et("update",s,!0),et("change",s,!0),et("set",s,!0),i.events.snap&&X(t,{handleNumbers:[s]})}function G(t){var e=z(t.calcPoint),i=w.getStep(e),s=w.fromStepping(i);Object.keys(M).forEach((function(t){"hover"===t.split(".")[0]&&M[t].forEach((function(t){t.call(g,s)}))}))}function J(t,e){M[t]=M[t]||[],M[t].push(e),"update"===t.split(".")[0]&&d.forEach((function(t,e){et("update",e)}))}function tt(t){var e=t&&t.split(".")[0],i=e&&t.substring(e.length);Object.keys(M).forEach((function(t){var s=t.split(".")[0],n=t.substring(s.length);e&&e!==s||i&&i!==n||delete M[t]}))}function et(t,e,s){Object.keys(M).forEach((function(n){var a=n.split(".")[0];t===a&&M[n].forEach((function(t){t.call(g,D.map(i.format.to),e,D.slice(),s||!1,x.slice(),g)}))}))}function it(t,e,s,n,a,o){var c;return d.length>1&&!i.events.unconstrained&&(n&&e>0&&(c=w.getAbsoluteDistance(t[e-1],i.margin,0),s=Math.max(s,c)),a&&e<d.length-1&&(c=w.getAbsoluteDistance(t[e+1],i.margin,1),s=Math.min(s,c))),d.length>1&&i.limit&&(n&&e>0&&(c=w.getAbsoluteDistance(t[e-1],i.limit,0),s=Math.min(s,c)),a&&e<d.length-1&&(c=w.getAbsoluteDistance(t[e+1],i.limit,1),s=Math.max(s,c))),i.padding&&(0===e&&(c=w.getAbsoluteDistance(0,i.padding[0],0),s=Math.max(s,c)),e===d.length-1&&(c=w.getAbsoluteDistance(100,i.padding[1],1),s=Math.min(s,c))),!((s=r(s=w.getStep(s)))===t[e]&&!o)&&s}function st(t,e){var s=i.ort;return(s?e:t)+", "+(s?t:e)}function nt(t,e,i,s){var n=i.slice(),a=[!t,t],r=[t,!t];s=s.slice(),t&&s.reverse(),s.length>1?s.forEach((function(t,i){var s=it(n,t,n[t]+e,a[i],r[i],!1);!1===s?e=0:(e=s-n[t],n[t]=s)})):a=r=[!0];var o=!1;s.forEach((function(t,s){o=ot(t,i[t]+e,a[s],r[s])||o})),o&&s.forEach((function(t){et("update",t),et("slide",t)}))}function at(t,e){return i.dir?100-t-e:t}function rt(){S.forEach((function(t){var e=x[t]>50?-1:1,i=3+(d.length+e*t);d[t].style.zIndex=i}))}function ot(t,e,s,n){return!1!==(e=it(x,t,e,s,n,!1))&&(function(t,e){x[t]=e,D[t]=w.fromStepping(e);var s="translate("+st(10*(at(e,0)-$)+"%","0")+")";d[t].style[i.transformRule]=s,ct(t),ct(t+1)}(t,e),!0)}function ct(t){if(p[t]){var e=0,s=100;0!==t&&(e=x[t-1]),t!==p.length-1&&(s=x[t]);var n=s-e,a="translate("+st(at(e,n)+"%","0")+")",r="scale("+st(n/100,"1")+")";p[t].style[i.transformRule]=a+" "+r}}function lt(t,e){return null===t||!1===t||void 0===t?x[e]:("number"==typeof t&&(t=String(t)),t=i.format.from(t),!1===(t=w.toStepping(t))||isNaN(t)?x[e]:t)}function ut(t,e){var s=o(t),n=void 0===x[0];e=void 0===e||!!e,i.animate&&!n&&a(_,i.cssClasses.tap,i.animationDuration),S.forEach((function(t){ot(t,lt(s[t],t),!0,!1)}));for(var r=1===S.length?0:1;r<S.length;++r)S.forEach((function(t){ot(t,x[t],!0,!0)}));rt(),S.forEach((function(t){et("update",t),null!==s[t]&&e&&et("set",t)}))}function ht(){var t=D.map(i.format.to);return 1===t.length?t[0]:t}function dt(t){var e=x[t],s=w.getNearbySteps(e),n=D[t],a=s.thisStep.step,r=null;if(i.snap)return[n-s.stepBefore.startValue||null,s.stepAfter.startValue-n||null];!1!==a&&n+a>s.stepAfter.startValue&&(a=s.stepAfter.startValue-n),r=n>s.thisStep.startValue?s.thisStep.step:!1!==s.stepBefore.step&&n-s.stepBefore.highestStep,100===e?a=null:0===e&&(r=null);var o=w.countStepDecimals();return null!==a&&!1!==a&&(a=Number(a.toFixed(o))),null!==r&&!1!==r&&(r=Number(r.toFixed(o))),[r,a]}return l(v=_,i.cssClasses.target),0===i.dir?l(v,i.cssClasses.ltr):l(v,i.cssClasses.rtl),0===i.ort?l(v,i.cssClasses.horizontal):l(v,i.cssClasses.vertical),l(v,"rtl"===getComputedStyle(v).direction?i.cssClasses.textDirectionRtl:i.cssClasses.textDirectionLtr),c=H(v,i.cssClasses.base),function(t,e){var s=H(e,i.cssClasses.connects);d=[],(p=[]).push(P(s,t[0]));for(var n=0;n<i.handles;n++)d.push(j(e,n)),S[n]=n,p.push(P(s,t[n+1]))}(i.connect,c),(y=i.events).fixed||d.forEach((function(t,e){q(b.start,t.children[0],X,{handleNumbers:[e]})})),y.tap&&q(b.start,c,Z,{}),y.hover&&q(b.move,c,G,{hover:!0}),y.drag&&p.forEach((function(t,e){if(!1!==t&&0!==e&&e!==p.length-1){var s=d[e-1],n=d[e],a=[t];l(t,i.cssClasses.draggable),y.fixed&&(a.push(s.children[0]),a.push(n.children[0])),a.forEach((function(t){q(b.start,t,X,{handles:[s,n],handleNumbers:[e-1,e]})}))}})),ut(i.start),i.pips&&B(i.pips),i.tooltips&&O(),J("update",(function(t,e,s,n,a){S.forEach((function(t){var e=d[t],n=it(x,t,0,!0,!0,!0),r=it(x,t,100,!0,!0,!0),o=a[t],c=i.ariaFormat.to(s[t]);n=w.fromStepping(n).toFixed(1),r=w.fromStepping(r).toFixed(1),o=w.fromStepping(o).toFixed(1),e.children[0].setAttribute("aria-valuemin",n),e.children[0].setAttribute("aria-valuemax",r),e.children[0].setAttribute("aria-valuenow",o),e.children[0].setAttribute("aria-valuetext",c)}))})),g={destroy:function(){for(var t in i.cssClasses)i.cssClasses.hasOwnProperty(t)&&u(_,i.cssClasses[t]);for(;_.firstChild;)_.removeChild(_.firstChild);delete _.noUiSlider},steps:function(){return S.map(dt)},on:J,off:tt,get:ht,set:ut,setHandle:function(t,e,i){if(!((t=Number(t))>=0&&t<S.length))throw new Error("noUiSlider (14.5.0): invalid handle number, got: "+t);ot(t,lt(e,t),!0,!0),et("update",t),i&&et("set",t)},reset:function(t){ut(i.start,t)},__moveHandles:function(t,e,i){nt(t,e,x,i)},options:n,updateOptions:function(t,e){var s=ht(),a=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];a.forEach((function(e){void 0!==t[e]&&(n[e]=t[e])}));var r=I(n);a.forEach((function(e){void 0!==t[e]&&(i[e]=r[e])})),w=r.spectrum,i.margin=r.margin,i.limit=r.limit,i.padding=r.padding,i.pips?B(i.pips):A(),i.tooltips?O():L(),x=[],ut(t.start||s,e)},target:_,removePips:A,removeTooltips:L,getTooltips:function(){return f},getOrigins:function(){return d},pips:B}}return{__spectrum:b,version:t,cssClasses:_,create:function(t,e){if(!t||!t.nodeName)throw new Error("noUiSlider (14.5.0): create requires a single element, got: "+t);if(t.noUiSlider)throw new Error("noUiSlider (14.5.0): Slider was already initialized.");var i=Y(t,I(e),e);return t.noUiSlider=i,i}}})?s.apply(e,n):s)||(t.exports=a)},function(t,e,i){var s={"./blocks/apartment-card/apartment-card.scss":6,"./blocks/apartment-card/images/room-350.jpg":7,"./blocks/apartment-card/images/room-352.jpg":8,"./blocks/apartment-card/images/room-444.jpg":9,"./blocks/apartment-card/images/room-450.jpg":10,"./blocks/apartment-card/images/room-666.jpg":11,"./blocks/apartment-card/images/room-678.jpg":12,"./blocks/apartment-card/images/room-740.jpg":13,"./blocks/apartment-card/images/room-840.jpg":14,"./blocks/apartment-card/images/room-856.jpg":15,"./blocks/apartment-card/images/room-888.jpg":16,"./blocks/apartment-card/images/room-980.jpg":17,"./blocks/apartment-card/images/room-982.jpg":18,"./blocks/apartment-form/apartment-form.js":19,"./blocks/apartment-form/apartment-form.scss":20,"./blocks/apartments-finder/apartments-finder.scss":21,"./blocks/button-with-arrow/button-with-arrow.scss":22,"./blocks/button/button.scss":23,"./blocks/checkbox-item/checkbox-item.scss":24,"./blocks/datepicker-1f/datepicker-1f.js":1,"./blocks/datepicker-1f/datepicker-1f.scss":25,"./blocks/datepicker-2f/datepicker-2f.js":2,"./blocks/datepicker-2f/datepicker-2f.scss":26,"./blocks/datepicker-2f/datepicker.css":27,"./blocks/datepicker-2f/datepicker.js":3,"./blocks/dropdown/dropdown.js":28,"./blocks/dropdown/dropdown.scss":29,"./blocks/email/email.scss":30,"./blocks/footer-large/footer-large.scss":31,"./blocks/footer-large/images/logo-toxin.png":32,"./blocks/footer-medium/footer-medium.scss":33,"./blocks/footer-medium/images/facebook-icon.png":34,"./blocks/footer-medium/images/instagram-icon.png":35,"./blocks/footer-medium/images/tweeter-icon.png":36,"./blocks/footer-small/footer-small.scss":37,"./blocks/footer-small/images/facebook-icon.png":38,"./blocks/footer-small/images/instagram-icon.png":39,"./blocks/footer-small/images/tweeter-icon.png":40,"./blocks/in-form/in-form.scss":41,"./blocks/info-apartment/info-apartment.scss":42,"./blocks/like-button/like-button.scss":43,"./blocks/navbar/images/logo-toxin.png":44,"./blocks/navbar/navbar.js":45,"./blocks/navbar/navbar.scss":46,"./blocks/nouislider/customise.js":47,"./blocks/nouislider/nouislider.css":48,"./blocks/nouislider/nouislider.js":4,"./blocks/pie-chart-legend/pie-chart-legend.scss":49,"./blocks/pie-chart/pie-chart.scss":50,"./blocks/radio-button/radio-button.scss":51,"./blocks/receipt/receipt.scss":52,"./blocks/registration-form/registration-form.scss":53,"./blocks/toggle-button/toggle-button.scss":54,"./blocks/visitor-review/images/guest-1.jpg":55,"./blocks/visitor-review/images/guest-2.jpg":56,"./blocks/visitor-review/visitor-review.scss":57,"./favicons/android-chrome-144x144.png":58,"./favicons/apple-touch-icon.png":59,"./favicons/favicon-16x16.png":60,"./favicons/favicon-32x32.png":61,"./favicons/mstile-150x150.png":62,"./favicons/safari-pinned-tab.svg":63,"./fonts.scss":64,"./fonts/Montserrat-Bold.svg":65,"./fonts/Montserrat-Light.svg":66,"./fonts/Montserrat-Medium.svg":67,"./fonts/Montserrat-Regular.svg":68,"./fonts/Montserrat-SemiBold.svg":69,"./fonts/Quicksand-Bold.svg":70,"./fonts/Quicksand-Regular.svg":71,"./index.js":0,"./index.scss":72,"./pages/landing-page/images/landingpage-bg.jpg":73,"./pages/landing-page/landing-page.scss":74,"./pages/registration/images/registration-bg.jpg":75,"./pages/registration/registration.js":76,"./pages/registration/registration.scss":77,"./pages/room-details/images/room-888a.jpg":78,"./pages/room-details/images/room-888b.jpg":79,"./pages/room-details/images/room-888c.jpg":80,"./pages/room-details/room-details.scss":81,"./pages/search-room/search-room.scss":82,"./pages/ui-cards/ui-cards.scss":83,"./pages/ui-colors/ui-colors.scss":84,"./pages/ui-form-elements/ui-form-elements.js":85,"./pages/ui-form-elements/ui-form-elements.scss":86,"./pages/ui-headers/ui-headers.scss":87,"./template.scss":88,"./variables.scss":89};function n(t){var e=a(t);return i(e)}function a(t){if(!i.o(s,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return s[t]}n.keys=function(){return Object.keys(s)},n.resolve=a,t.exports=n,n.id=5},function(t,e,i){},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/room-350.jpg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/room-352.jpg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/room-444.jpg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/room-450.jpg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/room-666.jpg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/room-678.jpg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/room-740.jpg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/room-840.jpg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/room-856.jpg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/room-888.jpg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/room-980.jpg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/room-982.jpg"},function(t,e){class i{constructor(){this.init()}init(){const t=document.getElementsByClassName("js-apartment-form__dropdown-title");for(let e of t)e.onclick=()=>{const t=e.parentNode.querySelector(".js-apartment-form__symbol-expand");e.parentNode.querySelector(".js-apartment-form__checkboxes").classList.toggle("apartment-form__checkboxes_hidden"),t.classList.toggle("apartment-form__symbol-expand_rotated")}}}try{new i}catch{console.log("There is no apartment's form.")}},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e){class i{constructor(){this.init()}init(){const t=function(t,e){const i='<span class = "material-icons">expand_more</span>';if(function(t){return"Сколько гостей"===t.innerHTML.split("<span")[0]||"Гостей"===t.innerHTML.split(" ")[0]}(e)){let s=parseInt(t.item(0).innerHTML)+parseInt(t.item(1).innerHTML),n=parseInt(t.item(2).innerHTML);e.innerHTML=0!==n?`Гостей - ${s.toString()}, младенцев - ${n.toString()}<span class = "material-icons">expand_more</span>`:0===s?"Сколько гостей"+i:"Гостей - "+s.toString()+i}else if(function(t){return"Выберите удобства"==t.innerHTML.split("<span")[0]||"Спален"==t.innerHTML.split(" ")[0]}(e)){let s=parseInt(t.item(0).innerHTML),n=parseInt(t.item(1).innerHTML);e.innerHTML=0!==n?`Спален - ${s.toString()}, кроватей - ${n.toString()} ...<span class = "material-icons">expand_more</span>`:0===s?"Выберите удобства"+i:`Спален - ${s.toString()}, спать сидя ...<span class = "material-icons">expand_more</span>`}},e=document.getElementsByClassName("js-dropdown__minus");Array.from(e,t=>{t.onclick=()=>{let e=t.nextSibling.innerHTML;if("0"!==e){let i=parseInt(e)-1;t.nextSibling.innerHTML=i.toString()}}});const i=document.getElementsByClassName("js-dropdown__plus");Array.from(i,t=>{t.onclick=()=>{let e=t.previousSibling.previousSibling.innerHTML,i=parseInt(e)+1;t.previousSibling.previousSibling.innerHTML=i.toString()}});const s=document.getElementsByClassName("js-dropdown__clear");Array.from(s,t=>{t.onclick=()=>{t.parentNode.parentNode.querySelectorAll(".js-dropdown__quantity").forEach(t=>t.innerHTML="0")}});const n=document.getElementsByClassName("js-dropdown__apply");Array.from(n,e=>{let i=e.parentNode.parentNode.querySelector(".js-dropdown__field"),s=e.parentNode.parentNode.querySelectorAll(".js-dropdown__quantity");e.onclick=()=>{t(s,i),e.parentNode.parentNode.querySelector(".js-dropdown__list").classList.remove("dropdown__list_activated"),e.parentNode.parentNode.querySelector(".dropdown__field_activated").classList.remove("dropdown__field_activated"),e.parentNode.parentNode.querySelector(".js-dropdown__buttons").classList.remove("dropdown__buttons_activated")}});const a=document.getElementsByClassName("js-dropdown__field");Array.from(a,e=>{e.onclick=()=>{let i=e.parentNode.querySelectorAll(".js-dropdown__quantity");t(i,e),e.parentNode.querySelector(".js-dropdown__list").classList.toggle("dropdown__list_activated"),e.classList.toggle("dropdown__field_activated"),e.parentNode.querySelector(".js-dropdown__buttons").classList.contains("dropdown__buttons_hidden")||e.parentNode.querySelector(".js-dropdown__buttons").classList.toggle("dropdown__buttons_activated")}})}}try{new i}catch{console.log("There are no dropdowns")}},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/logo-toxin.png"},function(t,e,i){},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/facebook-icon.png"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/instagram-icon.png"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/tweeter-icon.png"},function(t,e,i){},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/facebook-icon.png"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/instagram-icon.png"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/tweeter-icon.png"},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/logo-toxin.png"},function(t,e){try{(class{static init(){document.querySelector(".js-navbar__expand-btn").onclick=()=>{document.querySelector(".js-navbar__list").classList.toggle("navbar__item_visible_flex"),document.querySelector(".js-navbar__buttons").classList.toggle("navbar__item_visible_flex")}}}).init()}catch{console.log("There is no navbar")}},function(t,e,i){},function(t,e,i){class s{constructor(){this.init()}init(){const t=i(4),e=document.getElementById("slider");t.create(e,{start:[2e3,8e3],connect:!0,step:100,range:{min:0,max:15e3}}),e.noUiSlider.on("update",()=>{let t=e.noUiSlider.get()[0].match(/.+(?=\.00)/)[0].replace(/(\d+)(\d{3}$)/,"$1 $2₽"),i=e.noUiSlider.get()[1].match(/.+(?=\.00)/)[0].replace(/(\d+)(\d{3}$)/,"$1 $2₽");document.getElementById("form-price").innerHTML=`${t} - ${i}`})}}try{new s}catch{console.log("There is no uislider.")}},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/guest-1.jpg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/guest-2.jpg"},function(t,e,i){},function(t,e,i){"use strict";i.r(e),e.default=i.p+"assets/favicons/android-chrome-144x144.png"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"assets/favicons/apple-touch-icon.png"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"assets/favicons/favicon-16x16.png"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"assets/favicons/favicon-32x32.png"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"assets/favicons/mstile-150x150.png"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"assets/favicons/safari-pinned-tab.svg"},function(t,e,i){},function(t,e,i){"use strict";i.r(e),e.default=i.p+"fonts/Montserrat-Bold.svg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"fonts/Montserrat-Light.svg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"fonts/Montserrat-Medium.svg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"fonts/Montserrat-Regular.svg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"fonts/Montserrat-SemiBold.svg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"fonts/Quicksand-Bold.svg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"fonts/Quicksand-Regular.svg"},function(t,e,i){},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/landingpage-bg.jpg"},function(t,e,i){},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/registration-bg.jpg"},function(t,e){class i{constructor(){this.init()}init(){const t=document.querySelector(".js-navbar__in-btn"),e=document.querySelector(".js-navbar__reg-btn"),i=document.querySelector(".js-registration__in-form"),s=document.querySelector(".js-registration__reg-form");t.onclick=()=>{s.classList.add("registration__reg-form_hidden"),i.classList.add("registration__in-form_displayed")},e.onclick=()=>{s.classList.remove("registration__reg-form_hidden"),i.classList.remove("registration__in-form_displayed")}}}try{new i}catch{console.log("It's not a registration page")}},function(t,e,i){},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/room-888a.jpg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/room-888b.jpg"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"images/room-888c.jpg"},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e){try{(class{static init(){const t=document.getElementsByClassName("js-ui-form-elements__dropdown_expanded"),e=new Event("click");Array.from(t,t=>{t.querySelector(".js-dropdown__field").dispatchEvent(e)});const i=document.getElementsByClassName("js-ui-form-elements__more-options_collapsed");Array.from(i,t=>{const e=t.querySelector("span.material-icons");t.querySelector(".apartment-form__checkboxes").classList.toggle("apartment-form__checkboxes_disappear"),e.classList.toggle("apartment-form__expand-butt_rotate")})}}).init()}catch{console.log("There is no UIFormElements")}},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MvZGF0ZXBpY2tlci0xZi9kYXRlcGlja2VyLTFmLmpzIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MvZGF0ZXBpY2tlci0yZi9kYXRlcGlja2VyLTJmLmpzIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MvZGF0ZXBpY2tlci0yZi9kYXRlcGlja2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3Mvbm91aXNsaWRlci9ub3Vpc2xpZGVyLmpzIiwid2VicGFjazovLy8uL3NyYyBzeW5jIFxcLihqc3xzIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MvYXBhcnRtZW50LWNhcmQvaW1hZ2VzL3Jvb20tMzUwLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2tzL2FwYXJ0bWVudC1jYXJkL2ltYWdlcy9yb29tLTM1Mi5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy9hcGFydG1lbnQtY2FyZC9pbWFnZXMvcm9vbS00NDQuanBnIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MvYXBhcnRtZW50LWNhcmQvaW1hZ2VzL3Jvb20tNDUwLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2tzL2FwYXJ0bWVudC1jYXJkL2ltYWdlcy9yb29tLTY2Ni5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy9hcGFydG1lbnQtY2FyZC9pbWFnZXMvcm9vbS02NzguanBnIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MvYXBhcnRtZW50LWNhcmQvaW1hZ2VzL3Jvb20tNzQwLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2tzL2FwYXJ0bWVudC1jYXJkL2ltYWdlcy9yb29tLTg0MC5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy9hcGFydG1lbnQtY2FyZC9pbWFnZXMvcm9vbS04NTYuanBnIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MvYXBhcnRtZW50LWNhcmQvaW1hZ2VzL3Jvb20tODg4LmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2tzL2FwYXJ0bWVudC1jYXJkL2ltYWdlcy9yb29tLTk4MC5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy9hcGFydG1lbnQtY2FyZC9pbWFnZXMvcm9vbS05ODIuanBnIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MvYXBhcnRtZW50LWZvcm0vYXBhcnRtZW50LWZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy9kcm9wZG93bi9kcm9wZG93bi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2tzL2Zvb3Rlci1sYXJnZS9pbWFnZXMvbG9nby10b3hpbi5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy9mb290ZXItbWVkaXVtL2ltYWdlcy9mYWNlYm9vay1pY29uLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2tzL2Zvb3Rlci1tZWRpdW0vaW1hZ2VzL2luc3RhZ3JhbS1pY29uLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2tzL2Zvb3Rlci1tZWRpdW0vaW1hZ2VzL3R3ZWV0ZXItaWNvbi5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy9mb290ZXItc21hbGwvaW1hZ2VzL2ZhY2Vib29rLWljb24ucG5nIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MvZm9vdGVyLXNtYWxsL2ltYWdlcy9pbnN0YWdyYW0taWNvbi5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy9mb290ZXItc21hbGwvaW1hZ2VzL3R3ZWV0ZXItaWNvbi5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy9uYXZiYXIvaW1hZ2VzL2xvZ28tdG94aW4ucG5nIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MvbmF2YmFyL25hdmJhci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2tzL25vdWlzbGlkZXIvY3VzdG9taXNlLmpzIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MvdmlzaXRvci1yZXZpZXcvaW1hZ2VzL2d1ZXN0LTEuanBnIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MvdmlzaXRvci1yZXZpZXcvaW1hZ2VzL2d1ZXN0LTIuanBnIiwid2VicGFjazovLy8uL3NyYy9mYXZpY29ucy9hbmRyb2lkLWNocm9tZS0xNDR4MTQ0LnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zhdmljb25zL2Zhdmljb24tMTZ4MTYucG5nIiwid2VicGFjazovLy8uL3NyYy9mYXZpY29ucy9mYXZpY29uLTMyeDMyLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvZmF2aWNvbnMvbXN0aWxlLTE1MHgxNTAucG5nIiwid2VicGFjazovLy8uL3NyYy9mYXZpY29ucy9zYWZhcmktcGlubmVkLXRhYi5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL01vbnRzZXJyYXQtQm9sZC5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL01vbnRzZXJyYXQtTGlnaHQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9mb250cy9Nb250c2VycmF0LU1lZGl1bS5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL01vbnRzZXJyYXQtUmVndWxhci5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL01vbnRzZXJyYXQtU2VtaUJvbGQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtQm9sZC5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL1F1aWNrc2FuZC1SZWd1bGFyLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvbGFuZGluZy1wYWdlL2ltYWdlcy9sYW5kaW5ncGFnZS1iZy5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3JlZ2lzdHJhdGlvbi9pbWFnZXMvcmVnaXN0cmF0aW9uLWJnLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcmVnaXN0cmF0aW9uL3JlZ2lzdHJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcm9vbS1kZXRhaWxzL2ltYWdlcy9yb29tLTg4OGEuanBnIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9yb29tLWRldGFpbHMvaW1hZ2VzL3Jvb20tODg4Yi5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3Jvb20tZGV0YWlscy9pbWFnZXMvcm9vbS04ODhjLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvdWktZm9ybS1lbGVtZW50cy91aS1mb3JtLWVsZW1lbnRzLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwia2V5cyIsImZvckVhY2giLCJEYXRlcGlja2VyMWYiLCJ0aGlzIiwiaW5pdCIsImRhdGVwaWNrZXJBcGlfMWYiLCIkIiwiZGF0ZXBpY2tlciIsImRhdGEiLCJpbkRhdGVGaWVsZF8xZiIsIm9uU2VsZWN0IiwiZm9ybWF0dGVkRGF0ZSIsInJlc0RhdGUiLCJzcGxpdCIsImxlbmd0aCIsImFyckRhdGVzIiwidG9Mb3dlckNhc2UiLCJtYXAiLCJ2YWwiLCJtYXRjaCIsImpvaW4iLCJjbGVhckJ1dHRvbiIsInRvZGF5QnV0dG9uIiwiZGF0ZUZvcm1hdCIsInByZXZIdG1sIiwibmV4dEh0bWwiLCJhcHBseUJ1dHQiLCJodG1sIiwib24iLCJoaWRlIiwic2hvdyIsImNvbnNvbGUiLCJsb2ciLCJEYXRlcGlja2VyMmYiLCJkYXRlcGlja2VyQXBpXzJmIiwib3V0RGF0ZUZpZWxkXzJmIiwiaW5EYXRlRmllbGRfMmYiLCJpbkRhdGUiLCJvdXREYXRlIiwid2luZG93IiwidW5kZWZpbmVkIiwiJGJvZHkiLCIkZGF0ZXBpY2tlcnNDb250YWluZXIiLCJjb250YWluZXJCdWlsdCIsImRlZmF1bHRzIiwiaG90S2V5cyIsIkRhdGVwaWNrZXIiLCJjbGFzc2VzIiwiaW5saW5lIiwibGFuZ3VhZ2UiLCJzdGFydERhdGUiLCJEYXRlIiwiZmlyc3REYXkiLCJ3ZWVrZW5kcyIsImFsdEZpZWxkIiwiYWx0RmllbGREYXRlRm9ybWF0IiwidG9nZ2xlU2VsZWN0ZWQiLCJrZXlib2FyZE5hdiIsInBvc2l0aW9uIiwib2Zmc2V0IiwidmlldyIsIm1pblZpZXciLCJzaG93T3RoZXJNb250aHMiLCJzZWxlY3RPdGhlck1vbnRocyIsIm1vdmVUb090aGVyTW9udGhzT25TZWxlY3QiLCJzaG93T3RoZXJZZWFycyIsInNlbGVjdE90aGVyWWVhcnMiLCJtb3ZlVG9PdGhlclllYXJzT25TZWxlY3QiLCJtaW5EYXRlIiwibWF4RGF0ZSIsImRpc2FibGVOYXZXaGVuT3V0T2ZSYW5nZSIsIm11bHRpcGxlRGF0ZXMiLCJtdWx0aXBsZURhdGVzU2VwYXJhdG9yIiwicmFuZ2UiLCJzaG93RXZlbnQiLCJhdXRvQ2xvc2UiLCJtb250aHNGaWVsZCIsIm5hdlRpdGxlcyIsImRheXMiLCJtb250aHMiLCJ5ZWFycyIsInRpbWVwaWNrZXIiLCJvbmx5VGltZXBpY2tlciIsImRhdGVUaW1lU2VwYXJhdG9yIiwidGltZUZvcm1hdCIsIm1pbkhvdXJzIiwibWF4SG91cnMiLCJtaW5NaW51dGVzIiwibWF4TWludXRlcyIsImhvdXJzU3RlcCIsIm1pbnV0ZXNTdGVwIiwib25TaG93Iiwib25IaWRlIiwib25DaGFuZ2VNb250aCIsIm9uQ2hhbmdlWWVhciIsIm9uQ2hhbmdlRGVjYWRlIiwib25DaGFuZ2VWaWV3Iiwib25SZW5kZXJDZWxsIiwiZWwiLCJvcHRpb25zIiwiJGVsIiwib3B0cyIsImV4dGVuZCIsIm5vZGVOYW1lIiwiZWxJc0lucHV0IiwiJGFsdEZpZWxkIiwiaW5pdGVkIiwidmlzaWJsZSIsInNpbGVudCIsImN1cnJlbnREYXRlIiwiY3VycmVudFZpZXciLCJfY3JlYXRlU2hvcnRDdXRzIiwic2VsZWN0ZWREYXRlcyIsInZpZXdzIiwibWluUmFuZ2UiLCJtYXhSYW5nZSIsIl9wcmV2T25TZWxlY3RWYWx1ZSIsIlZFUlNJT04iLCJ2aWV3SW5kZXhlcyIsIl9idWlsZERhdGVwaWNrZXJzQ29udGFpbmVyIiwiX2J1aWxkQmFzZUh0bWwiLCJfZGVmaW5lTG9jYWxlIiwiX3N5bmNXaXRoTWluTWF4RGF0ZXMiLCJfc2V0UG9zaXRpb25DbGFzc2VzIiwiX2JpbmRFdmVudHMiLCJfYmluZEtleWJvYXJkRXZlbnRzIiwiJGRhdGVwaWNrZXIiLCJfb25Nb3VzZURvd25EYXRlcGlja2VyIiwiX29uTW91c2VVcERhdGVwaWNrZXIiLCJhZGRDbGFzcyIsImZuIiwiVGltZXBpY2tlciIsIl9iaW5kVGltZXBpY2tlckV2ZW50cyIsIkJvZHkiLCJuYXYiLCJOYXZpZ2F0aW9uIiwiX29uQ2xpY2tDZWxsIiwiX29uTW91c2VFbnRlckNlbGwiLCJfb25Nb3VzZUxlYXZlQ2VsbCIsIl9vblNob3dFdmVudCIsIl9vbk1vdXNlVXBFbCIsIl9vbkJsdXIiLCJfb25LZXlVcEdlbmVyYWwiLCJfb25SZXNpemUiLCJfb25Nb3VzZVVwQm9keSIsIl9vbktleURvd24iLCJfb25LZXlVcCIsIl9vbkhvdEtleSIsIl9vblRpbWVDaGFuZ2UiLCJpc1dlZWtlbmQiLCJkYXkiLCJpbmRleE9mIiwibGFuZyIsImxvYyIsIndhcm4iLCJydSIsImJvdW5kYXJ5IiwiX2dldFdvcmRCb3VuZGFyeVJlZ0V4cCIsImFtcG0iLCJhcHBlbmQiLCIkYXBwZW5kVGFyZ2V0IiwiJGlubGluZSIsImluc2VydEFmdGVyIiwiYXBwZW5kVG8iLCIkY29udGVudCIsIiRuYXYiLCJfdHJpZ2dlck9uQ2hhbmdlIiwiZm9ybWF0dGVkRGF0ZXMiLCJwYXJzZWRTZWxlY3RlZCIsImdldFBhcnNlZERhdGUiLCJfdGhpcyIsImRhdGVzIiwieWVhciIsIm1vbnRoIiwiZGF0ZSIsImhvdXJzIiwibWludXRlcyIsImZvcm1hdERhdGUiLCJwYXJzZWREYXRlIiwibmV4dCIsImN1ckRlY2FkZSIsInByZXYiLCJzdHJpbmciLCJ2YWxpZEhvdXJzIiwicmVzdWx0IiwibG9jYWxlIiwibGVhZGluZ1plcm8iLCJnZXRMZWFkaW5nWmVyb051bSIsImRlY2FkZSIsImdldERlY2FkZSIsImZ1bGxIb3VycyIsImRheVBlcmlvZCIsInJlcGxhY2VyIiwiX3JlcGxhY2VyIiwiX2dldFZhbGlkSG91cnNGcm9tRGF0ZSIsInRlc3QiLCJyZXBsYWNlIiwiZ2V0VGltZSIsInRvVXBwZXJDYXNlIiwiZnVsbERhdGUiLCJkYXlzU2hvcnQiLCJmdWxsTW9udGgiLCJtb250aHNTaG9ydCIsImZ1bGxNaW51dGVzIiwidG9TdHJpbmciLCJzbGljZSIsInN0ciIsInJlZyIsInAxIiwicDIiLCJwMyIsInNpZ24iLCJzeW1ib2xzIiwiUmVnRXhwIiwic2VsZWN0RGF0ZSIsImxlbiIsIm5ld0RhdGUiLCJBcnJheSIsImlzQXJyYXkiLCJsYXN0U2VsZWN0ZWREYXRlIiwiX3NldFRpbWUiLCJfdHJpZ2dlciIsInNldEhvdXJzIiwic2V0TWludXRlcyIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJfcmVuZGVyIiwiX2lzU2VsZWN0ZWQiLCJwdXNoIiwiYmlnZ2VyIiwiX3NldElucHV0VmFsdWUiLCJ0aW1lcGlja2VySXNBY3RpdmUiLCJyZW1vdmVEYXRlIiwic2VsZWN0ZWQiLCJzb21lIiwiY3VyRGF0ZSIsImlzU2FtZSIsInNwbGljZSIsInRvZGF5IiwiY2xlYXIiLCJ1cGRhdGUiLCJwYXJhbSIsImFyZ3VtZW50cyIsIl9hZGRCdXR0b25zSWZOZWVkIiwic2V0UG9zaXRpb24iLCJfaGFuZGxlRGF0ZSIsIl91cGRhdGVSYW5nZXMiLCJfdXBkYXRlQ3VycmVudFRpbWUiLCJjdXJUaW1lIiwibWluVGltZSIsIm1heFRpbWUiLCJjaGVja0RhdGUiLCJjZWxsVHlwZSIsInJlcyIsImFsdFZhbHVlcyIsImZvcm1hdCIsImFsdEZvcm1hdCIsIl9pc0luUmFuZ2UiLCJ0eXBlIiwidGltZSIsIm1pbiIsIm1heCIsImRNaW5UaW1lIiwiZE1heFRpbWUiLCJ0eXBlcyIsIl9nZXREaW1lbnNpb25zIiwid2lkdGgiLCJvdXRlcldpZHRoIiwiaGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJsZWZ0IiwidG9wIiwiX2dldERhdGVGcm9tQ2VsbCIsImNlbGwiLCJwb3MiLCJtYWluIiwicmVtb3ZlQXR0ciIsImRpbXMiLCJzZWxmRGltcyIsInNlY29uZGFyeSIsImNzcyIsIl9iaW5kVmlzaW9uRXZlbnRzIiwicmVtb3ZlQ2xhc3MiLCJmb2N1c2VkIiwiaW5Gb2N1cyIsImJsdXIiLCJkb3duIiwiX2NoYW5nZVZpZXciLCJ1cCIsImV2ZW50Iiwib2ZmIiwib25lIiwiZGlyIiwibmV4dFZpZXciLCJ2aWV3SW5kZXgiLCJfaGFuZGxlSG90S2V5IiwiZm9jdXNlZFBhcnNlZCIsInRvdGFsRGF5c0luTmV4dE1vbnRoIiwiX2dldEZvY3VzZWREYXRlIiwibW9udGhDaGFuZ2VkIiwieWVhckNoYW5nZWQiLCJkZWNhZGVDaGFuZ2VkIiwieSIsImdldERheXNDb3VudCIsIl9yZWdpc3RlcktleSIsImN1cktleSIsIl91blJlZ2lzdGVyS2V5IiwiaW5kZXgiLCJfaXNIb3RLZXlQcmVzc2VkIiwiY3VycmVudEhvdEtleSIsImZvdW5kIiwicHJlc3NlZEtleXMiLCJzb3J0IiwiaG90S2V5IiwiZXZlcnkiLCJhcmdzIiwidHJpZ2dlciIsIl9mb2N1c05leHRDZWxsIiwia2V5Q29kZSIsIm5kIiwiZ2V0RGF0ZSIsIl9nZXRDZWxsIiwiJGNlbGwiLCJzZWxlY3RvciIsImZpbmQiLCJkZXN0cm95IiwiY2xvc2VzdCIsInJlbW92ZSIsIl9oYW5kbGVBbHJlYWR5U2VsZWN0ZWREYXRlcyIsImFscmVhZHlTZWxlY3RlZCIsInNlbGVjdGVkRGF0ZSIsImUiLCJvcmlnaW5hbEV2ZW50IiwidGltZXBpY2tlckZvY3VzIiwiZm9jdXMiLCJzZXRUaW1lb3V0IiwiY29kZSIsIndoaWNoIiwicHJldmVudERlZmF1bHQiLCJoYXNDbGFzcyIsInRhcmdldCIsImxlc3MiLCJfdXBkYXRlIiwiaCIsIl9mb2N1c2VkIiwicHJldlZpZXciLCJzdWJzdHJpbmciLCJnZXREYXkiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJmaXJzdFllYXIiLCJNYXRoIiwiZmxvb3IiLCJ0ZW1wbGF0ZSIsInNvdXJjZSIsImRhdGUxIiwiZGF0ZTIiLCJkMSIsImQyIiwiX3R5cGUiLCJkYXRlQ29tcGFyZVRvIiwibnVtIiwicGFyc2VJbnQiLCJyZXNldFRpbWUiLCJlYWNoIiwiQ29uc3RydWN0b3IiLCJkYXlzTWluIiwidGVtcGxhdGVzIiwiZHAiLCJwcm94eSIsIiRuYW1lcyIsIiRjZWxscyIsIl9nZXREYXlOYW1lc0h0bWwiLCJjdXJEYXkiLCJfZ2V0Q2VsbENvbnRlbnRzIiwicGFyZW50IiwicmVuZGVyIiwiZGlzYWJsZWQiLCJfZ2V0RGF5c0h0bWwiLCJ0b3RhbE1vbnRoRGF5cyIsImZpcnN0TW9udGhEYXkiLCJsYXN0TW9udGhEYXkiLCJkYXlzRnJvbVBldk1vbnRoIiwiZGF5c0Zyb21OZXh0TW9udGgiLCJfZ2V0RGF5SHRtbCIsImNvbnRlbnQiLCJfZ2V0TW9udGhzSHRtbCIsIl9nZXRNb250aEh0bWwiLCJfZ2V0WWVhcnNIdG1sIiwiX2dldFllYXJIdG1sIiwiX3JlbmRlclR5cGVzIiwiZGF5TmFtZXMiLCJhdHRyIiwiYWNpdHZlIiwiYWN0aXZlIiwiX2hhbmRsZUNsaWNrIiwiJGJ1dHRvbnNDb250YWluZXIiLCJfb25DbGlja05hdkJ1dHRvbiIsIl9vbkNsaWNrTmF2VGl0bGUiLCJfYWRkQnV0dG9uIiwidGl0bGUiLCJfZ2V0VGl0bGUiLCJzZXROYXZTdGF0dXMiLCJfYWRkQnV0dG9uc0NvbnRhaW5lciIsImFjdGlvbiIsImxhYmVsIiwiX2Rpc2FibGVOYXYiLCJfYWN0aXZhdGVOYXYiLCJpbnN0IiwiaW5wdXQiLCJfYnVpbGRIVE1MIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiX29uU2VsZWN0RGF0ZSIsIiRyYW5nZXMiLCJfb25DaGFuZ2VSYW5nZSIsIl9vbk1vdXNlVXBSYW5nZSIsIl9vbk1vdXNlRW50ZXJSYW5nZSIsIl9vbk1vdXNlT3V0UmFuZ2UiLCJfZGF0ZSIsIl9zZXRNaW5UaW1lRnJvbURhdGUiLCJfc2V0TWF4VGltZUZyb21EYXRlIiwiX3NldERlZmF1bHRNaW5NYXhUaW1lIiwiX3ZhbGlkYXRlSG91cnNNaW51dGVzIiwibHoiLCJob3VyTWluIiwiaG91ck1heCIsImhvdXJTdGVwIiwiaG91clZhbHVlIiwiaG91clZpc2libGUiLCJkaXNwbGF5SG91cnMiLCJtaW5NaW4iLCJtaW5NYXgiLCJtaW5TdGVwIiwibWluVmFsdWUiLCJfdGVtcGxhdGUiLCIkdGltZXBpY2tlciIsIiRob3VycyIsIiRtaW51dGVzIiwiJGhvdXJzVGV4dCIsIiRtaW51dGVzVGV4dCIsIiRhbXBtIiwiX2hvdXJzIiwiJHRhcmdldCIsImpRdWVyeSIsInJlbW92ZUVsZW1lbnQiLCJwYXJlbnRFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJpc1NldCIsImlzTnVtZXJpYyIsImEiLCJpc05hTiIsImlzRmluaXRlIiwiYWRkQ2xhc3NGb3IiLCJlbGVtZW50IiwiY2xhc3NOYW1lIiwiZHVyYXRpb24iLCJsaW1pdCIsImFzQXJyYXkiLCJjb3VudERlY2ltYWxzIiwibnVtU3RyIiwicGllY2VzIiwiU3RyaW5nIiwiY2xhc3NMaXN0IiwiYWRkIiwiZ2V0UGFnZU9mZnNldCIsImRvYyIsInN1cHBvcnRQYWdlT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJpc0NTUzFDb21wYXQiLCJjb21wYXRNb2RlIiwieCIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbExlZnQiLCJib2R5IiwicGFnZVlPZmZzZXQiLCJzY3JvbGxUb3AiLCJzdWJSYW5nZVJhdGlvIiwicGEiLCJwYiIsImZyb21QZXJjZW50YWdlIiwic3RhcnRSYW5nZSIsImdldEoiLCJhcnIiLCJqIiwidG9TdGVwcGluZyIsInhWYWwiLCJ4UGN0IiwidmEiLCJ2YiIsImFicyIsInRvUGVyY2VudGFnZSIsImdldFN0ZXAiLCJ4U3RlcHMiLCJzbmFwIiwiYiIsInRvIiwicm91bmQiLCJoYW5kbGVFbnRyeVBvaW50IiwidGhhdCIsInBlcmNlbnRhZ2UiLCJFcnJvciIsInBhcnNlRmxvYXQiLCJ4SGlnaGVzdENvbXBsZXRlU3RlcCIsImhhbmRsZVN0ZXBQb2ludCIsInRvdGFsU3RlcHMiLCJ4TnVtU3RlcHMiLCJoaWdoZXN0U3RlcCIsImNlaWwiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwic3RlcCIsIlNwZWN0cnVtIiwiZW50cnkiLCJzaW5nbGVTdGVwIiwib3JkZXJlZCIsImdldERpc3RhbmNlIiwiZGlzdGFuY2VzIiwiZ2V0QWJzb2x1dGVEaXN0YW5jZSIsImRpcmVjdGlvbiIsInN0YXJ0X2ZhY3RvciIsInhQY3RfaW5kZXgiLCJyZXN0X2ZhY3RvciIsInJlc3RfcmVsX2Rpc3RhbmNlIiwicmFuZ2VfcGN0IiwicmVsX3JhbmdlX2Rpc3RhbmNlIiwiYWJzX2Rpc3RhbmNlX2NvdW50ZXIiLCJyYW5nZV9jb3VudGVyIiwiZnJvbVN0ZXBwaW5nIiwiaXNQZXJjZW50YWdlIiwiZ2V0RGVmYXVsdFN0ZXAiLCJpc0Rvd24iLCJzaXplIiwiZ2V0TmVhcmJ5U3RlcHMiLCJzdGVwQmVmb3JlIiwic3RhcnRWYWx1ZSIsInRoaXNTdGVwIiwic3RlcEFmdGVyIiwiY291bnRTdGVwRGVjaW1hbHMiLCJzdGVwRGVjaW1hbHMiLCJhcHBseSIsImNvbnZlcnQiLCJkZWZhdWx0Rm9ybWF0dGVyIiwiZnJvbSIsImNzc0NsYXNzZXMiLCJiYXNlIiwib3JpZ2luIiwiaGFuZGxlIiwiaGFuZGxlTG93ZXIiLCJoYW5kbGVVcHBlciIsInRvdWNoQXJlYSIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsImJhY2tncm91bmQiLCJjb25uZWN0IiwiY29ubmVjdHMiLCJsdHIiLCJydGwiLCJ0ZXh0RGlyZWN0aW9uTHRyIiwidGV4dERpcmVjdGlvblJ0bCIsImRyYWdnYWJsZSIsImRyYWciLCJ0YXAiLCJ0b29sdGlwIiwicGlwcyIsInBpcHNIb3Jpem9udGFsIiwicGlwc1ZlcnRpY2FsIiwibWFya2VyIiwibWFya2VySG9yaXpvbnRhbCIsIm1hcmtlclZlcnRpY2FsIiwibWFya2VyTm9ybWFsIiwibWFya2VyTGFyZ2UiLCJtYXJrZXJTdWIiLCJ2YWx1ZUhvcml6b250YWwiLCJ2YWx1ZVZlcnRpY2FsIiwidmFsdWVOb3JtYWwiLCJ2YWx1ZUxhcmdlIiwidmFsdWVTdWIiLCJ2YWxpZGF0ZUZvcm1hdCIsImlzVmFsaWRGb3JtYXR0ZXIiLCJ0ZXN0U3RlcCIsInBhcnNlZCIsInRlc3RSYW5nZSIsInNwZWN0cnVtIiwidGVzdFN0YXJ0IiwiaGFuZGxlcyIsInN0YXJ0IiwidGVzdFNuYXAiLCJ0ZXN0QW5pbWF0ZSIsImFuaW1hdGUiLCJ0ZXN0QW5pbWF0aW9uRHVyYXRpb24iLCJhbmltYXRpb25EdXJhdGlvbiIsInRlc3RDb25uZWN0IiwidGVzdE9yaWVudGF0aW9uIiwib3J0IiwidGVzdE1hcmdpbiIsIm1hcmdpbiIsInRlc3RMaW1pdCIsInRlc3RQYWRkaW5nIiwicGFkZGluZyIsInRvdGFsUGFkZGluZyIsImZpcnN0VmFsdWUiLCJ0ZXN0RGlyZWN0aW9uIiwidGVzdEJlaGF2aW91ciIsImZpeGVkIiwiaG92ZXIiLCJ1bmNvbnN0cmFpbmVkIiwiZXZlbnRzIiwidGVzdFRvb2x0aXBzIiwidG9vbHRpcHMiLCJmb3JtYXR0ZXIiLCJ0ZXN0QXJpYUZvcm1hdCIsImFyaWFGb3JtYXQiLCJ0ZXN0Rm9ybWF0IiwidGVzdEtleWJvYXJkU3VwcG9ydCIsImtleWJvYXJkU3VwcG9ydCIsInRlc3REb2N1bWVudEVsZW1lbnQiLCJ0ZXN0Q3NzUHJlZml4IiwiY3NzUHJlZml4IiwidGVzdENzc0NsYXNzZXMiLCJ0ZXN0T3B0aW9ucyIsInRlc3RzIiwib3JpZW50YXRpb24iLCJiZWhhdmlvdXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJtc1ByZWZpeCIsInN0eWxlIiwibXNUcmFuc2Zvcm0iLCJub1ByZWZpeCIsInRyYW5zZm9ybSIsInRyYW5zZm9ybVJ1bGUiLCJzY29wZSIsIm9yaWdpbmFsT3B0aW9ucyIsInNjb3BlX0Jhc2UiLCJzY29wZV9IYW5kbGVzIiwic2NvcGVfQ29ubmVjdHMiLCJzY29wZV9QaXBzIiwic2NvcGVfVG9vbHRpcHMiLCJzY29wZV9TZWxmIiwiYWRkVGFyZ2V0IiwiYWN0aW9ucyIsInBvaW50ZXJFbmFibGVkIiwibW92ZSIsImVuZCIsIm1zUG9pbnRlckVuYWJsZWQiLCJzdXBwb3J0c1Bhc3NpdmUiLCJDU1MiLCJzdXBwb3J0cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZXRTdXBwb3J0c1Bhc3NpdmUiLCJzY29wZV9UYXJnZXQiLCJzY29wZV9TcGVjdHJ1bSIsInNjb3BlX1ZhbHVlcyIsInNjb3BlX0xvY2F0aW9ucyIsInNjb3BlX0hhbmRsZU51bWJlcnMiLCJzY29wZV9BY3RpdmVIYW5kbGVzQ291bnQiLCJzY29wZV9FdmVudHMiLCJzY29wZV9Eb2N1bWVudCIsIm93bmVyRG9jdW1lbnQiLCJzY29wZV9Eb2N1bWVudEVsZW1lbnQiLCJzY29wZV9Cb2R5Iiwic2NvcGVfRGlyT2Zmc2V0IiwiYWRkTm9kZVRvIiwiZGl2IiwiYXBwZW5kQ2hpbGQiLCJhZGRPcmlnaW4iLCJoYW5kbGVOdW1iZXIiLCJzZXRBdHRyaWJ1dGUiLCJpc1NsaWRlckRpc2FibGVkIiwiaXNIYW5kbGVEaXNhYmxlZCIsImhvcml6b250YWxLZXlzIiwidmVydGljYWxLZXlzIiwibGFyZ2VTdGVwS2V5cyIsImVkZ2VLZXlzIiwicmV2ZXJzZSIsImlzTGFyZ2VEb3duIiwiaXNMYXJnZVVwIiwiaXNVcCIsImlzTWluIiwiaXNNYXgiLCJnZXROZXh0U3RlcHNGb3JIYW5kbGUiLCJzZXRIYW5kbGUiLCJmaXJlRXZlbnQiLCJldmVudEtleWRvd24iLCJhZGRDb25uZWN0IiwiYWRkVG9vbHRpcCIsImZpcnN0Q2hpbGQiLCJoYXNBdHRyaWJ1dGUiLCJyZW1vdmVUb29sdGlwcyIsInJlbW92ZUV2ZW50IiwiYmluZEV2ZW50IiwidmFsdWVzIiwidW5lbmNvZGVkIiwiZm9ybWF0dGVkVmFsdWUiLCJpbm5lckhUTUwiLCJhZGRNYXJraW5nIiwic3ByZWFkIiwiZmlsdGVyRnVuYyIsInZhbHVlU2l6ZUNsYXNzZXMiLCJtYXJrZXJTaXplQ2xhc3NlcyIsInZhbHVlT3JpZW50YXRpb25DbGFzc2VzIiwibWFya2VyT3JpZW50YXRpb25DbGFzc2VzIiwiZ2V0Q2xhc3NlcyIsInNpemVDbGFzc2VzIiwibm9kZSIsImFkZFNwcmVhZCIsInJlbW92ZVBpcHMiLCJncmlkIiwiZGVuc2l0eSIsImZpbHRlciIsImdyb3VwIiwic3RlcHBlZCIsImludGVydmFsIiwiZ2V0R3JvdXAiLCJhcnJheSIsImluZGV4ZXMiLCJmaXJzdEluUmFuZ2UiLCJsYXN0SW5SYW5nZSIsImlnbm9yZUZpcnN0IiwiaWdub3JlTGFzdCIsInByZXZQY3QiLCJ1bnNoaWZ0IiwiY3VycmVudCIsInEiLCJuZXdQY3QiLCJwY3REaWZmZXJlbmNlIiwicGN0UG9zIiwic3RlcHMiLCJyZWFsU3RlcHMiLCJzdGVwU2l6ZSIsImxvdyIsImhpZ2giLCJpc1N0ZXBzIiwiZ2VuZXJhdGVTcHJlYWQiLCJiYXNlU2l6ZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhbHQiLCJhdHRhY2hFdmVudCIsImNhbGxiYWNrIiwibWV0aG9kIiwicGFnZU9mZnNldCIsImV2ZW50VGFyZ2V0IiwidG91Y2giLCJtb3VzZSIsInBvaW50ZXIiLCJpc1RvdWNoT25UYXJnZXQiLCJjaGVja1RvdWNoIiwiY29udGFpbnMiLCJzaGFkb3dSb290IiwidGFyZ2V0VG91Y2hlcyIsInRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwidGFyZ2V0VG91Y2giLCJjaGFuZ2VkVG91Y2hlcyIsImNsaWVudFgiLCJjbGllbnRZIiwicG9pbnRzIiwiY3Vyc29yIiwiZml4RXZlbnQiLCJkb05vdFJlamVjdCIsImJ1dHRvbnMiLCJjYWxjUG9pbnQiLCJtZXRob2RzIiwiZXZlbnROYW1lIiwicGFzc2l2ZSIsImNhbGNQb2ludFRvUGVyY2VudGFnZSIsImVsZW0iLCJkb2NFbGVtIiwicHJvcG9zYWwiLCJjbGllbnRUb3AiLCJjbGllbnRMZWZ0IiwiZG9jdW1lbnRMZWF2ZSIsInJlbGF0ZWRUYXJnZXQiLCJldmVudEVuZCIsImV2ZW50TW92ZSIsImFwcFZlcnNpb24iLCJidXR0b25zUHJvcGVydHkiLCJtb3ZlbWVudCIsInN0YXJ0Q2FsY1BvaW50IiwibW92ZUhhbmRsZXMiLCJsb2NhdGlvbnMiLCJoYW5kbGVOdW1iZXJzIiwibGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldFppbmRleCIsImV2ZW50U3RhcnQiLCJjaGlsZHJlbiIsInN0b3BQcm9wYWdhdGlvbiIsIm1vdmVFdmVudCIsImVuZEV2ZW50Iiwib3V0RXZlbnQiLCJjb25jYXQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZXZlbnRUYXAiLCJjbGlja2VkUG9zaXRpb24iLCJzbWFsbGVzdERpZmZlcmVuY2UiLCJoYW5kbGVQb3NpdGlvbiIsImRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZSIsImdldENsb3Nlc3RIYW5kbGUiLCJldmVudEhvdmVyIiwidGFyZ2V0RXZlbnQiLCJuYW1lc3BhY2VkRXZlbnQiLCJuYW1lc3BhY2UiLCJ0RXZlbnQiLCJ0TmFtZXNwYWNlIiwiZXZlbnRUeXBlIiwiY2hlY2tIYW5kbGVQb3NpdGlvbiIsInJlZmVyZW5jZSIsImxvb2tCYWNrd2FyZCIsImxvb2tGb3J3YXJkIiwiZ2V0VmFsdWUiLCJkaXN0YW5jZSIsImluUnVsZU9yZGVyIiwidiIsInVwd2FyZCIsInByb3Bvc2FscyIsImYiLCJzdGF0ZSIsInRyYW5zZm9ybURpcmVjdGlvbiIsInpJbmRleCIsInRyYW5zbGF0ZVJ1bGUiLCJ1cGRhdGVDb25uZWN0IiwidXBkYXRlSGFuZGxlUG9zaXRpb24iLCJjb25uZWN0V2lkdGgiLCJzY2FsZVJ1bGUiLCJyZXNvbHZlVG9WYWx1ZSIsInZhbHVlU2V0IiwiZmlyZVNldEV2ZW50IiwiaXNJbml0IiwidmFsdWVHZXQiLCJsb2NhdGlvbiIsIm5lYXJieVN0ZXBzIiwiaW5jcmVtZW50IiwiZGVjcmVtZW50IiwiY29ubmVjdE9wdGlvbnMiLCJjb25uZWN0QmFzZSIsImFkZEVsZW1lbnRzIiwiaGFuZGxlQmVmb3JlIiwiaGFuZGxlQWZ0ZXIiLCJldmVudEhvbGRlcnMiLCJldmVudEhvbGRlciIsInBvc2l0aW9ucyIsIm5vdyIsInRleHQiLCJub1VpU2xpZGVyIiwic2V0IiwicmVzZXQiLCJfX21vdmVIYW5kbGVzIiwidXBkYXRlT3B0aW9ucyIsIm9wdGlvbnNUb1VwZGF0ZSIsInVwZGF0ZUFibGUiLCJuZXdPcHRpb25zIiwiZ2V0VG9vbHRpcHMiLCJnZXRPcmlnaW5zIiwiX19zcGVjdHJ1bSIsInZlcnNpb24iLCJhcGkiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsImlkIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwicmVzb2x2ZSIsIkFwYXJ0bWVudEZvcm0iLCJkcm9wZG93bldyYXBwZXJMaXN0IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIml0ZW0iLCJvbmNsaWNrIiwiZXhwYW5kQnV0dCIsInBhcmVudE5vZGUiLCJxdWVyeVNlbGVjdG9yIiwidG9nZ2xlIiwiRHJvcGRvd24iLCJwbGFjZWhvbGRlckNoYW5nZXIiLCJxdWFuTGlzdCIsInBsYWNlaG9sZGVyIiwiZXhwYW5kIiwiaXNHdWVzdHNEcm9wZG93biIsInF1YW5QZW9wbGUiLCJxdWFuQmFieSIsImlzQmVkc0Ryb3Bkb3duIiwicXVhblJvb20iLCJxdWFuQmVkIiwibGlzdE1pbnVzIiwibmV4dFNpYmxpbmciLCJuZXdDb250ZW50IiwibGlzdFBsdXMiLCJwcmV2aW91c1NpYmxpbmciLCJsaXN0Q2xlYXIiLCJxdWVyeVNlbGVjdG9yQWxsIiwicXVhbiIsImxpc3RBcHBseSIsImxpc3RGaWVsZCIsIk5vdWlzbGlkZXIiLCJzbGlkZXIiLCJnZXRFbGVtZW50QnlJZCIsIlJlZ2lzdHJhdGlvbiIsImluQnV0dCIsInJlZ0J1dHQiLCJpbkZvcm0iLCJyZWdGb3JtIiwiRHJvcGRvd25FbGVtcyIsImNsaWNrRXZlbnQiLCJFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJjaGVja2JveEVsZW1zIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUks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QVNtUCx1QkFBdUIsMENBQ2hEcUMsRUFBYSxJQUFJQyxNQUFNLFNBRTdCaHJCLE1BQU1zVSxLQUFLd1csRUFBZ0J0SSxJQUN6QkEsRUFBS3VHLGNBQWMsdUJBQXVCa0MsY0FBY0YsS0FHMUQsTUFBTUcsRUFBZ0IzUixTQUFTbVAsdUJBQXVCLCtDQUN0RDFvQixNQUFNc1UsS0FBSzRXLEVBQWdCMUksSUFDekIsTUFBTXFHLEVBQWFyRyxFQUFLdUcsY0FBYyx1QkFDbkJ2RyxFQUFLdUcsY0FBYywrQkFDM0J6WixVQUFVMFosT0FBTyx3Q0FDNUJILEVBQVd2WixVQUFVMFosT0FBTywyQ0FNakJyMkIsT0FDZixNQUNBMkIsUUFBUUMsSUFBSSxnQyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJmdW5jdGlvbiBpbXBvcnRBbGwocikge1xyXG4gIHIua2V5cygpLmZvckVhY2gocik7XHJcbn1cclxuXHJcbmltcG9ydEFsbChyZXF1aXJlLmNvbnRleHQoXCIuL1wiLCB0cnVlLCAvXFwuKGpzfHM/Y3NzfHBuZ3xqcGU/Z3xnaWZ8c3ZnKSQvaSkpO1xyXG5cclxuaW1wb3J0IFwiLi9ibG9ja3MvZGF0ZXBpY2tlci0yZi9kYXRlcGlja2VyLmpzXCI7XHJcbmltcG9ydCBcIi4vYmxvY2tzL2RhdGVwaWNrZXItMmYvZGF0ZXBpY2tlci0yZi5qc1wiO1xyXG5pbXBvcnQgXCIuL2Jsb2Nrcy9kYXRlcGlja2VyLTFmL2RhdGVwaWNrZXItMWYuanNcIjtcclxuIiwiY2xhc3MgRGF0ZXBpY2tlcjFmIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH1cclxuXHJcbiAgaW5pdCgpIHtcclxuICAgIGNvbnN0IGRhdGVwaWNrZXJBcGlfMWYgPSAkKCcuZGF0ZXBpY2tlci0xZiAuZGF0ZXBpY2tlci0xZl9faW5wdXQtZmllbGQnKS5kYXRlcGlja2VyKCkuZGF0YSgnZGF0ZXBpY2tlcicpO1xyXG4gICAgY29uc3QgaW5EYXRlRmllbGRfMWYgPSAkKFwiLmRhdGVwaWNrZXItMWYgLmRhdGVwaWNrZXItMWZfX2lucHV0LWZpZWxkXCIpO1xyXG4gICAgaW5EYXRlRmllbGRfMWYuZGF0ZXBpY2tlcih7XHJcbiAgICAgIG9uU2VsZWN0OiAoZm9ybWF0dGVkRGF0ZSkgPT4ge1xyXG4gICAgICAgIGxldCByZXNEYXRlID0gXCJcIjtcclxuICAgICAgICBpZiAoZm9ybWF0dGVkRGF0ZSkge1xyXG4gICAgICAgICAgaWYgKGZvcm1hdHRlZERhdGUuc3BsaXQoXCIgLSBcIikubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBsZXQgYXJyRGF0ZXMgPSBmb3JtYXR0ZWREYXRlLnRvTG93ZXJDYXNlKCkuc3BsaXQoXCIgLSBcIik7XHJcbiAgICAgICAgICAgIGFyckRhdGVzID0gYXJyRGF0ZXMubWFwKHZhbCA9PiB2YWwubWF0Y2goL1xcZHsyfVxcc1vQsC3Rj9CQLdCvXXszfS8pWzBdKTtcclxuICAgICAgICAgICAgcmVzRGF0ZSA9IGFyckRhdGVzLmpvaW4oXCIgLSBcIik7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXNEYXRlID0gZm9ybWF0dGVkRGF0ZS5tYXRjaCgvXFxkezJ9XFxzW9CwLdGP0JAt0K9dezN9LylbMF07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluRGF0ZUZpZWxkXzFmLnZhbChyZXNEYXRlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaW5EYXRlRmllbGRfMWYuZGF0ZXBpY2tlcih7Y2xlYXJCdXR0b246IHRydWV9KTtcclxuICAgIGluRGF0ZUZpZWxkXzFmLmRhdGVwaWNrZXIoe3RvZGF5QnV0dG9uOiB0cnVlfSk7XHJcbiAgICBpbkRhdGVGaWVsZF8xZi5kYXRlcGlja2VyKHtkYXRlRm9ybWF0OiBcImRkIE1NXCJ9KTtcclxuICAgIGluRGF0ZUZpZWxkXzFmLmRhdGVwaWNrZXIoe3ByZXZIdG1sOiAnPGkgY2xhc3MgPSBcImRiLWFycm93IG1hdGVyaWFsLWljb25zXCI+YXJyb3dfYmFjazwvaT4nfSk7XHJcbiAgICBpbkRhdGVGaWVsZF8xZi5kYXRlcGlja2VyKHtuZXh0SHRtbDogJzxpIGNsYXNzID0gXCJkYi1hcnJvdyBtYXRlcmlhbC1pY29uc1wiPmFycm93X2ZvcndhcmQ8L2k+J30pO1xyXG4gICAgbGV0IGFwcGx5QnV0dCA9ICQoXCIuZGF0ZXBpY2tlci0tYnV0dG9uW2RhdGEtYWN0aW9uPSd0b2RheSddXCIpO1xyXG4gICAgYXBwbHlCdXR0Lmh0bWwoXCLQn9GA0LjQvNC10L3QuNGC0YxcIik7XHJcbiAgICBhcHBseUJ1dHQub24oXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIGRhdGVwaWNrZXJBcGlfMWYgPyBkYXRlcGlja2VyQXBpXzFmLmhpZGUoKSA6IG51bGw7XHJcbiAgICB9KTtcclxuICAgICQoJy5kYXRlcGlja2VyLTFmX193cmFwcGVyLWlucHV0LWZpZWxkJykub24oXCJjbGlja1wiLCAoKSA9PiBkYXRlcGlja2VyQXBpXzFmLnNob3coKSk7XHJcbiAgfVxyXG59XHJcblxyXG50cnkge1xyXG4gIGNvbnN0IGRhdGVwaWNrZXIxZiA9IG5ldyBEYXRlcGlja2VyMWYoKTtcclxufSBjYXRjaCB7XHJcbiAgY29uc29sZS5sb2coXCJ0aGVyZSBpcyBubyBkYXRlcGlja2VyMWZcIilcclxufVxyXG4iLCJjbGFzcyBEYXRlcGlja2VyMmYge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5pbml0KCk7XHJcbiAgfVxyXG5cclxuICBpbml0KCkge1xyXG4gICAgY29uc3QgZGF0ZXBpY2tlckFwaV8yZiA9ICQoJy5qcy1kYXRlcGlja2VyLTJmX19pbnB1dC1maWVsZCcpLmRhdGVwaWNrZXIoKS5kYXRhKCdkYXRlcGlja2VyJyk7XHJcbiAgICBjb25zdCBvdXREYXRlRmllbGRfMmYgPSAkKFwiLmpzLWRhdGVwaWNrZXItMmZfX291dC1kYXRlLWZpZWxkXCIpO1xyXG4gICAgY29uc3QgaW5EYXRlRmllbGRfMmYgPSAkKFwiLmpzLWRhdGVwaWNrZXItMmZfX2lucHV0LWZpZWxkXCIpO1xyXG4gICAgaW5EYXRlRmllbGRfMmYuZGF0ZXBpY2tlcih7XHJcbiAgICAgICAgb25TZWxlY3Q6IChmb3JtYXR0ZWREYXRlKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBpbkRhdGUgPSBmb3JtYXR0ZWREYXRlLm1hdGNoKC8uKz8oPz1cXHN8JCkvKSA/IGZvcm1hdHRlZERhdGUubWF0Y2goLy4rPyg/PVxcc3wkKS8pWzBdIDogXCJcIjtcclxuICAgICAgICAgICAgbGV0IG91dERhdGUgPSBmb3JtYXR0ZWREYXRlLm1hdGNoKC8oPzw9XFxzLVxccykuKy8pID8gZm9ybWF0dGVkRGF0ZS5tYXRjaCgvKD88PVxccy1cXHMpLisvKVswXSA6IFwiXCI7XHJcbiAgICAgICAgICAgIGluRGF0ZUZpZWxkXzJmLnZhbChpbkRhdGUpO1xyXG4gICAgICAgICAgICBvdXREYXRlRmllbGRfMmYudmFsKG91dERhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGluRGF0ZUZpZWxkXzJmLmRhdGVwaWNrZXIoe2NsZWFyQnV0dG9uOiB0cnVlfSk7XHJcbiAgICBpbkRhdGVGaWVsZF8yZi5kYXRlcGlja2VyKHt0b2RheUJ1dHRvbjogdHJ1ZX0pO1xyXG4gICAgaW5EYXRlRmllbGRfMmYuZGF0ZXBpY2tlcih7cHJldkh0bWw6ICc8aSBjbGFzcyA9IFwiZGItYXJyb3cgbWF0ZXJpYWwtaWNvbnNcIj5hcnJvd19iYWNrPC9pPid9KTtcclxuICAgIGluRGF0ZUZpZWxkXzJmLmRhdGVwaWNrZXIoe25leHRIdG1sOiAnPGkgY2xhc3MgPSBcImRiLWFycm93IG1hdGVyaWFsLWljb25zXCI+YXJyb3dfZm9yd2FyZDwvaT4nfSk7XHJcbiAgICBjb25zdCBhcHBseUJ1dHQgPSAkKFwiLmRhdGVwaWNrZXItLWJ1dHRvbltkYXRhLWFjdGlvbj0ndG9kYXknXVwiKTtcclxuICAgIGFwcGx5QnV0dC5odG1sKFwi0J/RgNC40LzQtdC90LjRgtGMXCIpO1xyXG4gICAgYXBwbHlCdXR0Lm9uKFwiY2xpY2tcIiwgKCkgPT4gZGF0ZXBpY2tlckFwaV8yZi5oaWRlKCkpO1xyXG4gICAgJCgnLmpzLWRhdGVwaWNrZXItMmZfX3dyYXBwZXItaW5wdXQtZmllbGQnKS5vbihcImNsaWNrXCIsICgpID0+IGRhdGVwaWNrZXJBcGlfMmYuc2hvdygpKTtcclxuICB9XHJcbn1cclxuXHJcbnRyeSB7XHJcbiAgY29uc3QgZGF0ZXBpY2tlcjJmID0gbmV3IERhdGVwaWNrZXIyZigpO1xyXG59IGNhdGNoIHtcclxuICBjb25zb2xlLmxvZyhcIlNvbWV0aGluZyB3cm9uZyB3aXRoIGRhdGVwaWNrZXItMmZcIik7XHJcbn1cclxuXHJcbiIsIjsoZnVuY3Rpb24gKHdpbmRvdywgJCwgdW5kZWZpbmVkKSB7IDsoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIFZFUlNJT04gPSAnMi4yLjMnLFxyXG4gICAgICAgIHBsdWdpbk5hbWUgPSAnZGF0ZXBpY2tlcicsXHJcbiAgICAgICAgYXV0b0luaXRTZWxlY3RvciA9ICcuZGF0ZXBpY2tlci1oZXJlJyxcclxuICAgICAgICAkYm9keSwgJGRhdGVwaWNrZXJzQ29udGFpbmVyLFxyXG4gICAgICAgIGNvbnRhaW5lckJ1aWx0ID0gZmFsc2UsXHJcbiAgICAgICAgYmFzZVRlbXBsYXRlID0gJycgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXJcIj4nICtcclxuICAgICAgICAgICAgJzxpIGNsYXNzPVwiZGF0ZXBpY2tlci0tcG9pbnRlclwiPjwvaT4nICtcclxuICAgICAgICAgICAgJzxuYXYgY2xhc3M9XCJkYXRlcGlja2VyLS1uYXZcIj48L25hdj4nICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1jb250ZW50XCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nLFxyXG4gICAgICAgIGRlZmF1bHRzID0ge1xyXG4gICAgICAgICAgICBjbGFzc2VzOiAnJyxcclxuICAgICAgICAgICAgaW5saW5lOiBmYWxzZSxcclxuICAgICAgICAgICAgbGFuZ3VhZ2U6ICdydScsXHJcbiAgICAgICAgICAgIHN0YXJ0RGF0ZTogbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgZmlyc3REYXk6ICcnLFxyXG4gICAgICAgICAgICB3ZWVrZW5kczogWzYsIDBdLFxyXG4gICAgICAgICAgICBkYXRlRm9ybWF0OiAnJyxcclxuICAgICAgICAgICAgYWx0RmllbGQ6ICcnLFxyXG4gICAgICAgICAgICBhbHRGaWVsZERhdGVGb3JtYXQ6ICdAJyxcclxuICAgICAgICAgICAgdG9nZ2xlU2VsZWN0ZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIGtleWJvYXJkTmF2OiB0cnVlLFxyXG5cclxuICAgICAgICAgICAgcG9zaXRpb246ICdib3R0b20gbGVmdCcsXHJcbiAgICAgICAgICAgIG9mZnNldDogMTIsXHJcblxyXG4gICAgICAgICAgICB2aWV3OiAnZGF5cycsXHJcbiAgICAgICAgICAgIG1pblZpZXc6ICdkYXlzJyxcclxuXHJcbiAgICAgICAgICAgIHNob3dPdGhlck1vbnRoczogdHJ1ZSxcclxuICAgICAgICAgICAgc2VsZWN0T3RoZXJNb250aHM6IHRydWUsXHJcbiAgICAgICAgICAgIG1vdmVUb090aGVyTW9udGhzT25TZWxlY3Q6IHRydWUsXHJcblxyXG4gICAgICAgICAgICBzaG93T3RoZXJZZWFyczogdHJ1ZSxcclxuICAgICAgICAgICAgc2VsZWN0T3RoZXJZZWFyczogdHJ1ZSxcclxuICAgICAgICAgICAgbW92ZVRvT3RoZXJZZWFyc09uU2VsZWN0OiB0cnVlLFxyXG5cclxuICAgICAgICAgICAgbWluRGF0ZTogJycsXHJcbiAgICAgICAgICAgIG1heERhdGU6ICcnLFxyXG4gICAgICAgICAgICBkaXNhYmxlTmF2V2hlbk91dE9mUmFuZ2U6IHRydWUsXHJcblxyXG4gICAgICAgICAgICBtdWx0aXBsZURhdGVzOiBmYWxzZSwgLy8gQm9vbGVhbiBvciBOdW1iZXJcclxuICAgICAgICAgICAgbXVsdGlwbGVEYXRlc1NlcGFyYXRvcjogJywnLFxyXG4gICAgICAgICAgICByYW5nZTogZmFsc2UsXHJcblxyXG4gICAgICAgICAgICB0b2RheUJ1dHRvbjogZmFsc2UsXHJcbiAgICAgICAgICAgIGNsZWFyQnV0dG9uOiBmYWxzZSxcclxuXHJcbiAgICAgICAgICAgIHNob3dFdmVudDogJ2ZvY3VzJyxcclxuICAgICAgICAgICAgYXV0b0Nsb3NlOiBmYWxzZSxcclxuXHJcbiAgICAgICAgICAgIC8vIG5hdmlnYXRpb25cclxuICAgICAgICAgICAgbW9udGhzRmllbGQ6ICdtb250aHNTaG9ydCcsXHJcbiAgICAgICAgICAgIHByZXZIdG1sOiAnPHN2Zz48cGF0aCBkPVwiTSAxNywxMiBsIC01LDUgbCA1LDVcIj48L3BhdGg+PC9zdmc+JywgICAgICAgICAgICBcclxuICAgICAgICAgICAgbmV4dEh0bWw6ICc8c3ZnPjxwYXRoIGQ9XCJNIDE0LDEyIGwgNSw1IGwgLTUsNVwiPjwvcGF0aD48L3N2Zz4nLCAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBuYXZUaXRsZXM6IHtcclxuICAgICAgICAgICAgICAgIC8vZGF5czogJ01NLCA8aT55eXl5PC9pPicsXHJcbiAgICAgICAgICAgICAgICBkYXlzOiAnTU0gPGk+eXl5eTwvaT4nLFxyXG4gICAgICAgICAgICAgICAgbW9udGhzOiAneXl5eScsXHJcbiAgICAgICAgICAgICAgICB5ZWFyczogJ3l5eXkxIC0geXl5eTInXHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAvLyB0aW1lcGlja2VyXHJcbiAgICAgICAgICAgIHRpbWVwaWNrZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICBvbmx5VGltZXBpY2tlcjogZmFsc2UsXHJcbiAgICAgICAgICAgIGRhdGVUaW1lU2VwYXJhdG9yOiAnICcsXHJcbiAgICAgICAgICAgIHRpbWVGb3JtYXQ6ICcnLFxyXG4gICAgICAgICAgICBtaW5Ib3VyczogMCxcclxuICAgICAgICAgICAgbWF4SG91cnM6IDI0LFxyXG4gICAgICAgICAgICBtaW5NaW51dGVzOiAwLFxyXG4gICAgICAgICAgICBtYXhNaW51dGVzOiA1OSxcclxuICAgICAgICAgICAgaG91cnNTdGVwOiAxLFxyXG4gICAgICAgICAgICBtaW51dGVzU3RlcDogMSxcclxuXHJcbiAgICAgICAgICAgIC8vIGV2ZW50c1xyXG4gICAgICAgICAgICBvblNlbGVjdDogJycsXHJcbiAgICAgICAgICAgIG9uU2hvdzogJycsXHJcbiAgICAgICAgICAgIG9uSGlkZTogJycsXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlTW9udGg6ICcnLFxyXG4gICAgICAgICAgICBvbkNoYW5nZVllYXI6ICcnLFxyXG4gICAgICAgICAgICBvbkNoYW5nZURlY2FkZTogJycsXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlVmlldzogJycsXHJcbiAgICAgICAgICAgIG9uUmVuZGVyQ2VsbDogJydcclxuICAgICAgICB9LFxyXG4gICAgICAgIGhvdEtleXMgPSB7XHJcbiAgICAgICAgICAgICdjdHJsUmlnaHQnOiBbMTcsIDM5XSxcclxuICAgICAgICAgICAgJ2N0cmxVcCc6IFsxNywgMzhdLFxyXG4gICAgICAgICAgICAnY3RybExlZnQnOiBbMTcsIDM3XSxcclxuICAgICAgICAgICAgJ2N0cmxEb3duJzogWzE3LCA0MF0sXHJcbiAgICAgICAgICAgICdzaGlmdFJpZ2h0JzogWzE2LCAzOV0sXHJcbiAgICAgICAgICAgICdzaGlmdFVwJzogWzE2LCAzOF0sXHJcbiAgICAgICAgICAgICdzaGlmdExlZnQnOiBbMTYsIDM3XSxcclxuICAgICAgICAgICAgJ3NoaWZ0RG93bic6IFsxNiwgNDBdLFxyXG4gICAgICAgICAgICAnYWx0VXAnOiBbMTgsIDM4XSxcclxuICAgICAgICAgICAgJ2FsdFJpZ2h0JzogWzE4LCAzOV0sXHJcbiAgICAgICAgICAgICdhbHRMZWZ0JzogWzE4LCAzN10sXHJcbiAgICAgICAgICAgICdhbHREb3duJzogWzE4LCA0MF0sXHJcbiAgICAgICAgICAgICdjdHJsU2hpZnRVcCc6IFsxNiwgMTcsIDM4XVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGF0ZXBpY2tlcjtcclxuXHJcbiAgICB2YXIgRGF0ZXBpY2tlciAgPSBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLmVsID0gZWw7XHJcbiAgICAgICAgdGhpcy4kZWwgPSAkKGVsKTtcclxuXHJcbiAgICAgICAgdGhpcy5vcHRzID0gJC5leHRlbmQodHJ1ZSwge30sIGRlZmF1bHRzLCBvcHRpb25zLCB0aGlzLiRlbC5kYXRhKCkpO1xyXG5cclxuICAgICAgICBpZiAoJGJvZHkgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICRib2R5ID0gJCgnYm9keScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLm9wdHMuc3RhcnREYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0cy5zdGFydERhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZWwubm9kZU5hbWUgPT0gJ0lOUFVUJykge1xyXG4gICAgICAgICAgICB0aGlzLmVsSXNJbnB1dCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5vcHRzLmFsdEZpZWxkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGFsdEZpZWxkID0gdHlwZW9mIHRoaXMub3B0cy5hbHRGaWVsZCA9PSAnc3RyaW5nJyA/ICQodGhpcy5vcHRzLmFsdEZpZWxkKSA6IHRoaXMub3B0cy5hbHRGaWVsZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zaWxlbnQgPSBmYWxzZTsgLy8gTmVlZCB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IHJlbmRlcmluZ1xyXG5cclxuICAgICAgICB0aGlzLmN1cnJlbnREYXRlID0gdGhpcy5vcHRzLnN0YXJ0RGF0ZTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRWaWV3ID0gdGhpcy5vcHRzLnZpZXc7XHJcbiAgICAgICAgdGhpcy5fY3JlYXRlU2hvcnRDdXRzKCk7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZERhdGVzID0gW107XHJcbiAgICAgICAgdGhpcy52aWV3cyA9IHt9O1xyXG4gICAgICAgIHRoaXMua2V5cyA9IFtdO1xyXG4gICAgICAgIHRoaXMubWluUmFuZ2UgPSAnJztcclxuICAgICAgICB0aGlzLm1heFJhbmdlID0gJyc7XHJcbiAgICAgICAgdGhpcy5fcHJldk9uU2VsZWN0VmFsdWUgPSAnJztcclxuXHJcbiAgICAgICAgdGhpcy5pbml0KClcclxuICAgIH07XHJcblxyXG4gICAgZGF0ZXBpY2tlciA9IERhdGVwaWNrZXI7XHJcblxyXG4gICAgZGF0ZXBpY2tlci5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgVkVSU0lPTjogVkVSU0lPTixcclxuICAgICAgICB2aWV3SW5kZXhlczogWydkYXlzJywgJ21vbnRocycsICd5ZWFycyddLFxyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghY29udGFpbmVyQnVpbHQgJiYgIXRoaXMub3B0cy5pbmxpbmUgJiYgdGhpcy5lbElzSW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2J1aWxkRGF0ZXBpY2tlcnNDb250YWluZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9idWlsZEJhc2VIdG1sKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlZmluZUxvY2FsZSh0aGlzLm9wdHMubGFuZ3VhZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLl9zeW5jV2l0aE1pbk1heERhdGVzKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5lbElzSW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRzLmlubGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBleHRyYSBjbGFzc2VzIGZvciBwcm9wZXIgdHJhbnNpdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRQb3NpdGlvbkNsYXNzZXModGhpcy5vcHRzLnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iaW5kRXZlbnRzKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdHMua2V5Ym9hcmROYXYgJiYgIXRoaXMub3B0cy5vbmx5VGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRLZXlib2FyZEV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlci5vbignbW91c2Vkb3duJywgdGhpcy5fb25Nb3VzZURvd25EYXRlcGlja2VyLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlci5vbignbW91c2V1cCcsIHRoaXMuX29uTW91c2VVcERhdGVwaWNrZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuY2xhc3Nlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlci5hZGRDbGFzcyh0aGlzLm9wdHMuY2xhc3NlcylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy50aW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVwaWNrZXIgPSBuZXcgJC5mbi5kYXRlcGlja2VyLlRpbWVwaWNrZXIodGhpcywgdGhpcy5vcHRzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRUaW1lcGlja2VyRXZlbnRzKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMub25seVRpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXIuYWRkQ2xhc3MoJy1vbmx5LXRpbWVwaWNrZXItJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudmlld3NbdGhpcy5jdXJyZW50Vmlld10gPSBuZXcgJC5mbi5kYXRlcGlja2VyLkJvZHkodGhpcywgdGhpcy5jdXJyZW50VmlldywgdGhpcy5vcHRzKTtcclxuICAgICAgICAgICAgdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XS5zaG93KCk7XHJcbiAgICAgICAgICAgIHRoaXMubmF2ID0gbmV3ICQuZm4uZGF0ZXBpY2tlci5OYXZpZ2F0aW9uKHRoaXMsIHRoaXMub3B0cyk7XHJcbiAgICAgICAgICAgIHRoaXMudmlldyA9IHRoaXMuY3VycmVudFZpZXc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRlbC5vbignY2xpY2tDZWxsLmFkcCcsIHRoaXMuX29uQ2xpY2tDZWxsLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLm9uKCdtb3VzZWVudGVyJywgJy5kYXRlcGlja2VyLS1jZWxsJywgdGhpcy5fb25Nb3VzZUVudGVyQ2VsbC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlci5vbignbW91c2VsZWF2ZScsICcuZGF0ZXBpY2tlci0tY2VsbCcsIHRoaXMuX29uTW91c2VMZWF2ZUNlbGwuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmluaXRlZCA9IHRydWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2NyZWF0ZVNob3J0Q3V0czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLm1pbkRhdGUgPSB0aGlzLm9wdHMubWluRGF0ZSA/IHRoaXMub3B0cy5taW5EYXRlIDogbmV3IERhdGUoLTg2Mzk5OTk5MTM2MDAwMDApO1xyXG4gICAgICAgICAgICB0aGlzLm1heERhdGUgPSB0aGlzLm9wdHMubWF4RGF0ZSA/IHRoaXMub3B0cy5tYXhEYXRlIDogbmV3IERhdGUoODYzOTk5OTkxMzYwMDAwMCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2JpbmRFdmVudHMgOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLm9uKHRoaXMub3B0cy5zaG93RXZlbnQgKyAnLmFkcCcsIHRoaXMuX29uU2hvd0V2ZW50LmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5vbignbW91c2V1cC5hZHAnLCB0aGlzLl9vbk1vdXNlVXBFbC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kZWwub24oJ2JsdXIuYWRwJywgdGhpcy5fb25CbHVyLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5vbigna2V5dXAuYWRwJywgdGhpcy5fb25LZXlVcEdlbmVyYWwuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgICQod2luZG93KS5vbigncmVzaXplLmFkcCcsIHRoaXMuX29uUmVzaXplLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAkKCdib2R5Jykub24oJ21vdXNldXAuYWRwJywgdGhpcy5fb25Nb3VzZVVwQm9keS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYmluZEtleWJvYXJkRXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLm9uKCdrZXlkb3duLmFkcCcsIHRoaXMuX29uS2V5RG93bi5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kZWwub24oJ2tleXVwLmFkcCcsIHRoaXMuX29uS2V5VXAuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLm9uKCdob3RLZXkuYWRwJywgdGhpcy5fb25Ib3RLZXkuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2JpbmRUaW1lcGlja2VyRXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLm9uKCd0aW1lQ2hhbmdlLmFkcCcsIHRoaXMuX29uVGltZUNoYW5nZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpc1dlZWtlbmQ6IGZ1bmN0aW9uIChkYXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0cy53ZWVrZW5kcy5pbmRleE9mKGRheSkgIT09IC0xO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9kZWZpbmVMb2NhbGU6IGZ1bmN0aW9uIChsYW5nKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGFuZyA9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2MgPSAkLmZuLmRhdGVwaWNrZXIubGFuZ3VhZ2VbbGFuZ107XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubG9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdDYW5cXCd0IGZpbmQgbGFuZ3VhZ2UgXCInICsgbGFuZyArICdcIiBpbiBEYXRlcGlja2VyLmxhbmd1YWdlLCB3aWxsIHVzZSBcInJ1XCIgaW5zdGVhZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9jID0gJC5leHRlbmQodHJ1ZSwge30sICQuZm4uZGF0ZXBpY2tlci5sYW5ndWFnZS5ydSlcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYyA9ICQuZXh0ZW5kKHRydWUsIHt9LCAkLmZuLmRhdGVwaWNrZXIubGFuZ3VhZ2UucnUsICQuZm4uZGF0ZXBpY2tlci5sYW5ndWFnZVtsYW5nXSlcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9jID0gJC5leHRlbmQodHJ1ZSwge30sICQuZm4uZGF0ZXBpY2tlci5sYW5ndWFnZS5ydSwgbGFuZylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5kYXRlRm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYy5kYXRlRm9ybWF0ID0gdGhpcy5vcHRzLmRhdGVGb3JtYXRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy50aW1lRm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYy50aW1lRm9ybWF0ID0gdGhpcy5vcHRzLnRpbWVGb3JtYXRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5maXJzdERheSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9jLmZpcnN0RGF5ID0gdGhpcy5vcHRzLmZpcnN0RGF5XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMudGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2MuZGF0ZUZvcm1hdCA9IFt0aGlzLmxvYy5kYXRlRm9ybWF0LCB0aGlzLmxvYy50aW1lRm9ybWF0XS5qb2luKHRoaXMub3B0cy5kYXRlVGltZVNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMub25seVRpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9jLmRhdGVGb3JtYXQgPSB0aGlzLmxvYy50aW1lRm9ybWF0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgYm91bmRhcnkgPSB0aGlzLl9nZXRXb3JkQm91bmRhcnlSZWdFeHA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxvYy50aW1lRm9ybWF0Lm1hdGNoKGJvdW5kYXJ5KCdhYScpKSB8fFxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2MudGltZUZvcm1hdC5tYXRjaChib3VuZGFyeSgnQUEnKSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMuYW1wbSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYnVpbGREYXRlcGlja2Vyc0NvbnRhaW5lcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb250YWluZXJCdWlsdCA9IHRydWU7XHJcbiAgICAgICAgICAgICRib2R5LmFwcGVuZCgnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXJzLWNvbnRhaW5lclwiIGlkPVwiZGF0ZXBpY2tlcnMtY29udGFpbmVyXCI+PC9kaXY+Jyk7XHJcbiAgICAgICAgICAgICRkYXRlcGlja2Vyc0NvbnRhaW5lciA9ICQoJyNkYXRlcGlja2Vycy1jb250YWluZXInKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYnVpbGRCYXNlSHRtbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgJGFwcGVuZFRhcmdldCxcclxuICAgICAgICAgICAgICAgICRpbmxpbmUgPSAkKCc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci1pbmxpbmVcIj4nKTtcclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuZWwubm9kZU5hbWUgPT0gJ0lOUFVUJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdHMuaW5saW5lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGFwcGVuZFRhcmdldCA9ICRkYXRlcGlja2Vyc0NvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGFwcGVuZFRhcmdldCA9ICRpbmxpbmUuaW5zZXJ0QWZ0ZXIodGhpcy4kZWwpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkYXBwZW5kVGFyZ2V0ID0gJGlubGluZS5hcHBlbmRUbyh0aGlzLiRlbClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlciA9ICQoYmFzZVRlbXBsYXRlKS5hcHBlbmRUbygkYXBwZW5kVGFyZ2V0KTtcclxuICAgICAgICAgICAgdGhpcy4kY29udGVudCA9ICQoJy5kYXRlcGlja2VyLS1jb250ZW50JywgdGhpcy4kZGF0ZXBpY2tlcik7XHJcbiAgICAgICAgICAgIHRoaXMuJG5hdiA9ICQoJy5kYXRlcGlja2VyLS1uYXYnLCB0aGlzLiRkYXRlcGlja2VyKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfdHJpZ2dlck9uQ2hhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zZWxlY3RlZERhdGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCBmcm9tIHRyaWdnZXJpbmcgbXVsdGlwbGUgb25TZWxlY3QgY2FsbGJhY2sgd2l0aCBzYW1lIGFyZ3VtZW50IChlbXB0eSBzdHJpbmcpIGluIElFMTAtMTFcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcmV2T25TZWxlY3RWYWx1ZSA9PT0gJycpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZPblNlbGVjdFZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRzLm9uU2VsZWN0KCcnLCAnJywgdGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZERhdGVzID0gdGhpcy5zZWxlY3RlZERhdGVzLFxyXG4gICAgICAgICAgICAgICAgcGFyc2VkU2VsZWN0ZWQgPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUoc2VsZWN0ZWREYXRlc1swXSksXHJcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWREYXRlcyxcclxuICAgICAgICAgICAgICAgIF90aGlzID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIGRhdGVzID0gbmV3IERhdGUoXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkU2VsZWN0ZWQueWVhcixcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRTZWxlY3RlZC5tb250aCxcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRTZWxlY3RlZC5kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZFNlbGVjdGVkLmhvdXJzLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZFNlbGVjdGVkLm1pbnV0ZXNcclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkRGF0ZXMgPSBzZWxlY3RlZERhdGVzLm1hcChmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5mb3JtYXREYXRlKF90aGlzLmxvYy5kYXRlRm9ybWF0LCBkYXRlKVxyXG4gICAgICAgICAgICAgICAgfSkuam9pbih0aGlzLm9wdHMubXVsdGlwbGVEYXRlc1NlcGFyYXRvcik7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgbmV3IGRhdGVzIGFycmF5LCB0byBzZXBhcmF0ZSBpdCBmcm9tIG9yaWdpbmFsIHNlbGVjdGVkRGF0ZXNcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5tdWx0aXBsZURhdGVzIHx8IHRoaXMub3B0cy5yYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgZGF0ZXMgPSBzZWxlY3RlZERhdGVzLm1hcChmdW5jdGlvbihkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnNlZERhdGUgPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUoZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWREYXRlLnllYXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGUubW9udGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGUuZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0ZS5ob3VycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0ZS5taW51dGVzXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3ByZXZPblNlbGVjdFZhbHVlID0gZm9ybWF0dGVkRGF0ZXM7XHJcbiAgICAgICAgICAgIHRoaXMub3B0cy5vblNlbGVjdChmb3JtYXR0ZWREYXRlcywgZGF0ZXMsIHRoaXMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGQgPSB0aGlzLnBhcnNlZERhdGUsXHJcbiAgICAgICAgICAgICAgICBvID0gdGhpcy5vcHRzO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMudmlldykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGF5cyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUoZC55ZWFyLCBkLm1vbnRoICsgMSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8ub25DaGFuZ2VNb250aCkgby5vbkNoYW5nZU1vbnRoKHRoaXMucGFyc2VkRGF0ZS5tb250aCwgdGhpcy5wYXJzZWREYXRlLnllYXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbW9udGhzJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZShkLnllYXIgKyAxLCBkLm1vbnRoLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoby5vbkNoYW5nZVllYXIpIG8ub25DaGFuZ2VZZWFyKHRoaXMucGFyc2VkRGF0ZS55ZWFyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3llYXJzJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZShkLnllYXIgKyAxMCwgMCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8ub25DaGFuZ2VEZWNhZGUpIG8ub25DaGFuZ2VEZWNhZGUodGhpcy5jdXJEZWNhZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcHJldjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZCA9IHRoaXMucGFyc2VkRGF0ZSxcclxuICAgICAgICAgICAgICAgIG8gPSB0aGlzLm9wdHM7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy52aWV3KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkYXlzJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZShkLnllYXIsIGQubW9udGggLSAxLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoby5vbkNoYW5nZU1vbnRoKSBvLm9uQ2hhbmdlTW9udGgodGhpcy5wYXJzZWREYXRlLm1vbnRoLCB0aGlzLnBhcnNlZERhdGUueWVhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtb250aHMnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKGQueWVhciAtIDEsIGQubW9udGgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLm9uQ2hhbmdlWWVhcikgby5vbkNoYW5nZVllYXIodGhpcy5wYXJzZWREYXRlLnllYXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAneWVhcnMnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKGQueWVhciAtIDEwLCAwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoby5vbkNoYW5nZURlY2FkZSkgby5vbkNoYW5nZURlY2FkZSh0aGlzLmN1ckRlY2FkZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBmb3JtYXREYXRlOiBmdW5jdGlvbiAoc3RyaW5nLCBkYXRlKSB7XHJcbiAgICAgICAgICAgIGRhdGUgPSBkYXRlIHx8IHRoaXMuZGF0ZTtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHN0cmluZyxcclxuICAgICAgICAgICAgICAgIGJvdW5kYXJ5ID0gdGhpcy5fZ2V0V29yZEJvdW5kYXJ5UmVnRXhwLFxyXG4gICAgICAgICAgICAgICAgbG9jYWxlID0gdGhpcy5sb2MsXHJcbiAgICAgICAgICAgICAgICBsZWFkaW5nWmVybyA9IGRhdGVwaWNrZXIuZ2V0TGVhZGluZ1plcm9OdW0sXHJcbiAgICAgICAgICAgICAgICBkZWNhZGUgPSBkYXRlcGlja2VyLmdldERlY2FkZShkYXRlKSxcclxuICAgICAgICAgICAgICAgIGQgPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUoZGF0ZSksXHJcbiAgICAgICAgICAgICAgICBmdWxsSG91cnMgPSBkLmZ1bGxIb3VycyxcclxuICAgICAgICAgICAgICAgIGhvdXJzID0gZC5ob3VycyxcclxuICAgICAgICAgICAgICAgIGFtcG0gPSBzdHJpbmcubWF0Y2goYm91bmRhcnkoJ2FhJykpIHx8IHN0cmluZy5tYXRjaChib3VuZGFyeSgnQUEnKSksXHJcbiAgICAgICAgICAgICAgICBkYXlQZXJpb2QgPSAnYW0nLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZXIgPSB0aGlzLl9yZXBsYWNlcixcclxuICAgICAgICAgICAgICAgIHZhbGlkSG91cnM7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnRpbWVwaWNrZXIgJiYgdGhpcy50aW1lcGlja2VyICYmIGFtcG0pIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkSG91cnMgPSB0aGlzLnRpbWVwaWNrZXIuX2dldFZhbGlkSG91cnNGcm9tRGF0ZShkYXRlLCBhbXBtKTtcclxuICAgICAgICAgICAgICAgIGZ1bGxIb3VycyA9IGxlYWRpbmdaZXJvKHZhbGlkSG91cnMuaG91cnMpO1xyXG4gICAgICAgICAgICAgICAgaG91cnMgPSB2YWxpZEhvdXJzLmhvdXJzO1xyXG4gICAgICAgICAgICAgICAgZGF5UGVyaW9kID0gdmFsaWRIb3Vycy5kYXlQZXJpb2Q7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvQC8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKC9ALywgZGF0ZS5nZXRUaW1lKCkpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvYWEvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdhYScpLCBkYXlQZXJpb2QpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvQUEvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdBQScpLCBkYXlQZXJpb2QudG9VcHBlckNhc2UoKSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9kZC8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ2RkJyksIGQuZnVsbERhdGUpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvZC8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ2QnKSwgZC5kYXRlKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL0RELy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnREQnKSwgbG9jYWxlLmRheXNbZC5kYXldKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL0QvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdEJyksIGxvY2FsZS5kYXlzU2hvcnRbZC5kYXldKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL21tLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnbW0nKSwgZC5mdWxsTW9udGgpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvbS8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ20nKSwgZC5tb250aCArIDEpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvTU0vLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdNTScpLCB0aGlzLmxvYy5tb250aHNbZC5tb250aF0pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvTS8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ00nKSwgbG9jYWxlLm1vbnRoc1Nob3J0W2QubW9udGhdKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL2lpLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnaWknKSwgZC5mdWxsTWludXRlcyk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9pLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnaScpLCBkLm1pbnV0ZXMpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvaGgvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdoaCcpLCBmdWxsSG91cnMpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvaC8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ2gnKSwgaG91cnMpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAveXl5eS8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ3l5eXknKSwgZC55ZWFyKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL3l5eXkxLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgneXl5eTEnKSwgZGVjYWRlWzBdKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL3l5eXkyLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgneXl5eTInKSwgZGVjYWRlWzFdKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL3l5Ly50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgneXknKSwgZC55ZWFyLnRvU3RyaW5nKCkuc2xpY2UoLTIpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfcmVwbGFjZXI6IGZ1bmN0aW9uIChzdHIsIHJlZywgZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UocmVnLCBmdW5jdGlvbiAobWF0Y2gsIHAxLHAyLHAzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcDEgKyBkYXRhICsgcDM7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldFdvcmRCb3VuZGFyeVJlZ0V4cDogZnVuY3Rpb24gKHNpZ24pIHtcclxuICAgICAgICAgICAgdmFyIHN5bWJvbHMgPSAnXFxcXHN8XFxcXC58LXwvfFxcXFxcXFxcfCx8XFxcXCR8XFxcXCF8XFxcXD98Onw7JztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKCcoXnw+fCcgKyBzeW1ib2xzICsgJykoJyArIHNpZ24gKyAnKSgkfDx8JyArIHN5bWJvbHMgKyAnKScsICdnJyk7XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIHNlbGVjdERhdGU6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBvcHRzID0gX3RoaXMub3B0cyxcclxuICAgICAgICAgICAgICAgIGQgPSBfdGhpcy5wYXJzZWREYXRlLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWREYXRlcyA9IF90aGlzLnNlbGVjdGVkRGF0ZXMsXHJcbiAgICAgICAgICAgICAgICBsZW4gPSBzZWxlY3RlZERhdGVzLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIG5ld0RhdGUgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZWxlY3REYXRlKGQpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxhc3RTZWxlY3RlZERhdGUgPSBkYXRlO1xyXG5cclxuICAgICAgICAgICAgLy8gU2V0IG5ldyB0aW1lIHZhbHVlcyBmcm9tIERhdGVcclxuICAgICAgICAgICAgaWYgKHRoaXMudGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lcGlja2VyLl9zZXRUaW1lKGRhdGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBPbiB0aGlzIHN0ZXAgdGltZXBpY2tlciB3aWxsIHNldCB2YWxpZCB2YWx1ZXMgaW4gaXQncyBpbnN0YW5jZVxyXG4gICAgICAgICAgICBfdGhpcy5fdHJpZ2dlcignc2VsZWN0RGF0ZScsIGRhdGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gU2V0IGNvcnJlY3QgdGltZSB2YWx1ZXMgYWZ0ZXIgdGltZXBpY2tlcidzIHZhbGlkYXRpb25cclxuICAgICAgICAgICAgLy8gUHJldmVudCBmcm9tIHNldHRpbmcgaG91cnMgb3IgbWludXRlcyB3aGljaCB2YWx1ZXMgYXJlIGxlc3NlciB0aGVuIGBtaW5gIHZhbHVlIG9yXHJcbiAgICAgICAgICAgIC8vIGdyZWF0ZXIgdGhlbiBgbWF4YCB2YWx1ZVxyXG4gICAgICAgICAgICBpZiAodGhpcy50aW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlLnNldEhvdXJzKHRoaXMudGltZXBpY2tlci5ob3Vycyk7XHJcbiAgICAgICAgICAgICAgICBkYXRlLnNldE1pbnV0ZXModGhpcy50aW1lcGlja2VyLm1pbnV0ZXMpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChfdGhpcy52aWV3ID09ICdkYXlzJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGUuZ2V0TW9udGgoKSAhPSBkLm1vbnRoICYmIG9wdHMubW92ZVRvT3RoZXJNb250aHNPblNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0RhdGUgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChfdGhpcy52aWV3ID09ICd5ZWFycycpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRlLmdldEZ1bGxZZWFyKCkgIT0gZC55ZWFyICYmIG9wdHMubW92ZVRvT3RoZXJZZWFyc09uU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChuZXdEYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zaWxlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZGF0ZSA9IG5ld0RhdGU7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zaWxlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIF90aGlzLm5hdi5fcmVuZGVyKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdHMubXVsdGlwbGVEYXRlcyAmJiAhb3B0cy5yYW5nZSkgeyAvLyBTZXQgcHJpb3JpdHkgdG8gcmFuZ2UgZnVuY3Rpb25hbGl0eVxyXG4gICAgICAgICAgICAgICAgaWYgKGxlbiA9PT0gb3B0cy5tdWx0aXBsZURhdGVzKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLl9pc1NlbGVjdGVkKGRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0ZWREYXRlcy5wdXNoKGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdHMucmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIGlmIChsZW4gPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdGVkRGF0ZXMgPSBbZGF0ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubWluUmFuZ2UgPSBkYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm1heFJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxlbiA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0ZWREYXRlcy5wdXNoKGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMubWF4UmFuZ2Upe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5tYXhSYW5nZSA9IGRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubWluUmFuZ2UgPSBkYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBTd2FwIGRhdGVzIGlmIHRoZXkgd2VyZSBzZWxlY3RlZCB2aWEgZHAuc2VsZWN0RGF0ZSgpIGFuZCBzZWNvbmQgZGF0ZSB3YXMgc21hbGxlciB0aGVuIGZpcnN0XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGVwaWNrZXIuYmlnZ2VyKF90aGlzLm1heFJhbmdlLCBfdGhpcy5taW5SYW5nZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubWF4UmFuZ2UgPSBfdGhpcy5taW5SYW5nZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubWluUmFuZ2UgPSBkYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZWxlY3RlZERhdGVzID0gW190aGlzLm1pblJhbmdlLCBfdGhpcy5tYXhSYW5nZV1cclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdGVkRGF0ZXMgPSBbZGF0ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubWluUmFuZ2UgPSBkYXRlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0ZWREYXRlcyA9IFtkYXRlXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3RoaXMuX3NldElucHV0VmFsdWUoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRzLm9uU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fdHJpZ2dlck9uQ2hhbmdlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRzLmF1dG9DbG9zZSAmJiAhdGhpcy50aW1lcGlja2VySXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghb3B0cy5tdWx0aXBsZURhdGVzICYmICFvcHRzLnJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRzLnJhbmdlICYmIF90aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF90aGlzLnZpZXdzW3RoaXMuY3VycmVudFZpZXddLl9yZW5kZXIoKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlbW92ZURhdGU6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWREYXRlcyxcclxuICAgICAgICAgICAgICAgIF90aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkLnNvbWUoZnVuY3Rpb24gKGN1ckRhdGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRlcGlja2VyLmlzU2FtZShjdXJEYXRlLCBkYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkLnNwbGljZShpLCAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5zZWxlY3RlZERhdGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5taW5SYW5nZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5tYXhSYW5nZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sYXN0U2VsZWN0ZWREYXRlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubGFzdFNlbGVjdGVkRGF0ZSA9IF90aGlzLnNlbGVjdGVkRGF0ZXNbX3RoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnZpZXdzW190aGlzLmN1cnJlbnRWaWV3XS5fcmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3NldElucHV0VmFsdWUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLm9wdHMub25TZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RyaWdnZXJPbkNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0b2RheTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLnNpbGVudCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMudmlldyA9IHRoaXMub3B0cy5taW5WaWV3O1xyXG4gICAgICAgICAgICB0aGlzLnNpbGVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy50b2RheUJ1dHRvbiBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0RGF0ZSh0aGlzLm9wdHMudG9kYXlCdXR0b24pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjbGVhcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZXMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5taW5SYW5nZSA9ICcnO1xyXG4gICAgICAgICAgICB0aGlzLm1heFJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgIHRoaXMudmlld3NbdGhpcy5jdXJyZW50Vmlld10uX3JlbmRlcigpO1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRJbnB1dFZhbHVlKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMub25TZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJPbkNoYW5nZSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBVcGRhdGVzIGRhdGVwaWNrZXIgb3B0aW9uc1xyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gcGFyYW0gLSBwYXJhbWV0ZXIncyBuYW1lIHRvIHVwZGF0ZS4gSWYgb2JqZWN0IHRoZW4gaXQgd2lsbCBleHRlbmQgY3VycmVudCBvcHRpb25zXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfE9iamVjdH0gW3ZhbHVlXSAtIG5ldyBwYXJhbSB2YWx1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKHBhcmFtLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIGxhc3RTZWxlY3RlZERhdGUgPSB0aGlzLmxhc3RTZWxlY3RlZERhdGU7XHJcblxyXG4gICAgICAgICAgICBpZiAobGVuID09IDIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0c1twYXJhbV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChsZW4gPT0gMSAmJiB0eXBlb2YgcGFyYW0gPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0cyA9ICQuZXh0ZW5kKHRydWUsIHRoaXMub3B0cywgcGFyYW0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZVNob3J0Q3V0cygpO1xyXG4gICAgICAgICAgICB0aGlzLl9zeW5jV2l0aE1pbk1heERhdGVzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlZmluZUxvY2FsZSh0aGlzLm9wdHMubGFuZ3VhZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLm5hdi5fYWRkQnV0dG9uc0lmTmVlZCgpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0cy5vbmx5VGltZXBpY2tlcikgdGhpcy5uYXYuX3JlbmRlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdzW3RoaXMuY3VycmVudFZpZXddLl9yZW5kZXIoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVsSXNJbnB1dCAmJiAhdGhpcy5vcHRzLmlubGluZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0UG9zaXRpb25DbGFzc2VzKHRoaXMub3B0cy5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52aXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbih0aGlzLm9wdHMucG9zaXRpb24pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuY2xhc3Nlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlci5hZGRDbGFzcyh0aGlzLm9wdHMuY2xhc3NlcylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5vbmx5VGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlci5hZGRDbGFzcygnLW9ubHktdGltZXBpY2tlci0nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy50aW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGFzdFNlbGVjdGVkRGF0ZSkgdGhpcy50aW1lcGlja2VyLl9oYW5kbGVEYXRlKGxhc3RTZWxlY3RlZERhdGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lcGlja2VyLl91cGRhdGVSYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGltZXBpY2tlci5fdXBkYXRlQ3VycmVudFRpbWUoKTtcclxuICAgICAgICAgICAgICAgIC8vIENoYW5nZSBob3VycyBhbmQgbWludXRlcyBpZiBpdCdzIHZhbHVlcyBoYXZlIGJlZW4gY2hhbmdlZCB0aHJvdWdoIG1pbi9tYXggaG91cnMvbWludXRlc1xyXG4gICAgICAgICAgICAgICAgaWYgKGxhc3RTZWxlY3RlZERhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0U2VsZWN0ZWREYXRlLnNldEhvdXJzKHRoaXMudGltZXBpY2tlci5ob3Vycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdFNlbGVjdGVkRGF0ZS5zZXRNaW51dGVzKHRoaXMudGltZXBpY2tlci5taW51dGVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fc2V0SW5wdXRWYWx1ZSgpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3N5bmNXaXRoTWluTWF4RGF0ZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGN1clRpbWUgPSB0aGlzLmRhdGUuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnNpbGVudCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1pblRpbWUgPiBjdXJUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGUgPSB0aGlzLm1pbkRhdGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1heFRpbWUgPCBjdXJUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGUgPSB0aGlzLm1heERhdGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zaWxlbnQgPSBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfaXNTZWxlY3RlZDogZnVuY3Rpb24gKGNoZWNrRGF0ZSwgY2VsbFR5cGUpIHtcclxuICAgICAgICAgICAgdmFyIHJlcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZXMuc29tZShmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGVwaWNrZXIuaXNTYW1lKGRhdGUsIGNoZWNrRGF0ZSwgY2VsbFR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3NldElucHV0VmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIG9wdHMgPSBfdGhpcy5vcHRzLFxyXG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gX3RoaXMubG9jLmRhdGVGb3JtYXQsXHJcbiAgICAgICAgICAgICAgICBhbHRGb3JtYXQgPSBvcHRzLmFsdEZpZWxkRGF0ZUZvcm1hdCxcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gX3RoaXMuc2VsZWN0ZWREYXRlcy5tYXAoZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZm9ybWF0RGF0ZShmb3JtYXQsIGRhdGUpXHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIGFsdFZhbHVlcztcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRzLmFsdEZpZWxkICYmIF90aGlzLiRhbHRGaWVsZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGFsdFZhbHVlcyA9IHRoaXMuc2VsZWN0ZWREYXRlcy5tYXAoZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZm9ybWF0RGF0ZShhbHRGb3JtYXQsIGRhdGUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGFsdFZhbHVlcyA9IGFsdFZhbHVlcy5qb2luKHRoaXMub3B0cy5tdWx0aXBsZURhdGVzU2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGFsdEZpZWxkLnZhbChhbHRWYWx1ZXMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmpvaW4odGhpcy5vcHRzLm11bHRpcGxlRGF0ZXNTZXBhcmF0b3IpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy4kZWwudmFsKHZhbHVlKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoZWNrIGlmIGRhdGUgaXMgYmV0d2VlbiBtaW5EYXRlIGFuZCBtYXhEYXRlXHJcbiAgICAgICAgICogQHBhcmFtIGRhdGUge29iamVjdH0gLSBkYXRlIG9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IC0gY2VsbCB0eXBlXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfaXNJblJhbmdlOiBmdW5jdGlvbiAoZGF0ZSwgdHlwZSkge1xyXG4gICAgICAgICAgICB2YXIgdGltZSA9IGRhdGUuZ2V0VGltZSgpLFxyXG4gICAgICAgICAgICAgICAgZCA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZShkYXRlKSxcclxuICAgICAgICAgICAgICAgIG1pbiA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZSh0aGlzLm1pbkRhdGUpLFxyXG4gICAgICAgICAgICAgICAgbWF4ID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKHRoaXMubWF4RGF0ZSksXHJcbiAgICAgICAgICAgICAgICBkTWluVGltZSA9IG5ldyBEYXRlKGQueWVhciwgZC5tb250aCwgbWluLmRhdGUpLmdldFRpbWUoKSxcclxuICAgICAgICAgICAgICAgIGRNYXhUaW1lID0gbmV3IERhdGUoZC55ZWFyLCBkLm1vbnRoLCBtYXguZGF0ZSkuZ2V0VGltZSgpLFxyXG4gICAgICAgICAgICAgICAgdHlwZXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF5OiB0aW1lID49IHRoaXMubWluVGltZSAmJiB0aW1lIDw9IHRoaXMubWF4VGltZSxcclxuICAgICAgICAgICAgICAgICAgICBtb250aDogZE1pblRpbWUgPj0gdGhpcy5taW5UaW1lICYmIGRNYXhUaW1lIDw9IHRoaXMubWF4VGltZSxcclxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBkLnllYXIgPj0gbWluLnllYXIgJiYgZC55ZWFyIDw9IG1heC55ZWFyXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZSA/IHR5cGVzW3R5cGVdIDogdHlwZXMuZGF5XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldERpbWVuc2lvbnM6IGZ1bmN0aW9uICgkZWwpIHtcclxuICAgICAgICAgICAgdmFyIG9mZnNldCA9ICRlbC5vZmZzZXQoKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogJGVsLm91dGVyV2lkdGgoKSxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogJGVsLm91dGVySGVpZ2h0KCksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBvZmZzZXQubGVmdCxcclxuICAgICAgICAgICAgICAgIHRvcDogb2Zmc2V0LnRvcFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldERhdGVGcm9tQ2VsbDogZnVuY3Rpb24gKGNlbGwpIHtcclxuICAgICAgICAgICAgdmFyIGN1ckRhdGUgPSB0aGlzLnBhcnNlZERhdGUsXHJcbiAgICAgICAgICAgICAgICB5ZWFyID0gY2VsbC5kYXRhKCd5ZWFyJykgfHwgY3VyRGF0ZS55ZWFyLFxyXG4gICAgICAgICAgICAgICAgbW9udGggPSBjZWxsLmRhdGEoJ21vbnRoJykgPT0gdW5kZWZpbmVkID8gY3VyRGF0ZS5tb250aCA6IGNlbGwuZGF0YSgnbW9udGgnKSxcclxuICAgICAgICAgICAgICAgIGRhdGUgPSBjZWxsLmRhdGEoJ2RhdGUnKSB8fCAxO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHllYXIsIG1vbnRoLCBkYXRlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2V0UG9zaXRpb25DbGFzc2VzOiBmdW5jdGlvbiAocG9zKSB7XHJcbiAgICAgICAgICAgIHBvcyA9IHBvcy5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICB2YXIgbWFpbiA9IHBvc1swXSxcclxuICAgICAgICAgICAgICAgIHNlYyA9IHBvc1sxXSxcclxuICAgICAgICAgICAgICAgIGNsYXNzZXMgPSAnZGF0ZXBpY2tlciAtJyArIG1haW4gKyAnLScgKyBzZWMgKyAnLSAtZnJvbS0nICsgbWFpbiArICctJztcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZpc2libGUpIGNsYXNzZXMgKz0gJyBhY3RpdmUnO1xyXG5cclxuICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlclxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2NsYXNzJylcclxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhjbGFzc2VzKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXRQb3NpdGlvbjogZnVuY3Rpb24gKHBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gfHwgdGhpcy5vcHRzLnBvc2l0aW9uO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRpbXMgPSB0aGlzLl9nZXREaW1lbnNpb25zKHRoaXMuJGVsKSxcclxuICAgICAgICAgICAgICAgIHNlbGZEaW1zID0gdGhpcy5fZ2V0RGltZW5zaW9ucyh0aGlzLiRkYXRlcGlja2VyKSxcclxuICAgICAgICAgICAgICAgIHBvcyA9IHBvc2l0aW9uLnNwbGl0KCcgJyksXHJcbiAgICAgICAgICAgICAgICB0b3AsIGxlZnQsXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLm9wdHMub2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgbWFpbiA9IHBvc1swXSxcclxuICAgICAgICAgICAgICAgIHNlY29uZGFyeSA9IHBvc1sxXTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAobWFpbikge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndG9wJzpcclxuICAgICAgICAgICAgICAgICAgICB0b3AgPSBkaW1zLnRvcCAtIHNlbGZEaW1zLmhlaWdodCAtIG9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gZGltcy5sZWZ0ICsgZGltcy53aWR0aCArIG9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wID0gZGltcy50b3AgKyBkaW1zLmhlaWdodCArIG9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSBkaW1zLmxlZnQgLSBzZWxmRGltcy53aWR0aCAtIG9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3dpdGNoKHNlY29uZGFyeSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndG9wJzpcclxuICAgICAgICAgICAgICAgICAgICB0b3AgPSBkaW1zLnRvcDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gZGltcy5sZWZ0ICsgZGltcy53aWR0aCAtIHNlbGZEaW1zLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYm90dG9tJzpcclxuICAgICAgICAgICAgICAgICAgICB0b3AgPSBkaW1zLnRvcCArIGRpbXMuaGVpZ2h0IC0gc2VsZkRpbXMuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IGRpbXMubGVmdDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NlbnRlcic6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKC9sZWZ0fHJpZ2h0Ly50ZXN0KG1haW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCA9IGRpbXMudG9wICsgZGltcy5oZWlnaHQvMiAtIHNlbGZEaW1zLmhlaWdodC8yO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBkaW1zLmxlZnQgKyBkaW1zLndpZHRoLzIgLSBzZWxmRGltcy53aWR0aC8yO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlclxyXG4gICAgICAgICAgICAgICAgLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogbGVmdCxcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IHRvcFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzaG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvblNob3cgPSB0aGlzLm9wdHMub25TaG93O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbih0aGlzLm9wdHMucG9zaXRpb24pO1xyXG4gICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChvblNob3cpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRWaXNpb25FdmVudHMob25TaG93KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaGlkZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgb25IaWRlID0gdGhpcy5vcHRzLm9uSGlkZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXJcclxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcclxuICAgICAgICAgICAgICAgIC5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6ICctMTAwMDAwcHgnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZm9jdXNlZCA9ICcnO1xyXG4gICAgICAgICAgICB0aGlzLmtleXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5Gb2N1cyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy4kZWwuYmx1cigpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9uSGlkZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmluZFZpc2lvbkV2ZW50cyhvbkhpZGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBkb3duOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2VWaWV3KGRhdGUsICdkb3duJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdXA6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZVZpZXcoZGF0ZSwgJ3VwJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2JpbmRWaXNpb25FdmVudHM6IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLm9mZigndHJhbnNpdGlvbmVuZC5kcCcpO1xyXG4gICAgICAgICAgICBldmVudCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXIub25lKCd0cmFuc2l0aW9uZW5kLmRwJywgZXZlbnQuYmluZCh0aGlzLCB0aGlzLCB0cnVlKSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfY2hhbmdlVmlldzogZnVuY3Rpb24gKGRhdGUsIGRpcikge1xyXG4gICAgICAgICAgICBkYXRlID0gZGF0ZSB8fCB0aGlzLmZvY3VzZWQgfHwgdGhpcy5kYXRlO1xyXG5cclxuICAgICAgICAgICAgdmFyIG5leHRWaWV3ID0gZGlyID09ICd1cCcgPyB0aGlzLnZpZXdJbmRleCArIDEgOiB0aGlzLnZpZXdJbmRleCAtIDE7XHJcbiAgICAgICAgICAgIGlmIChuZXh0VmlldyA+IDIpIG5leHRWaWV3ID0gMjtcclxuICAgICAgICAgICAgaWYgKG5leHRWaWV3IDwgMCkgbmV4dFZpZXcgPSAwO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zaWxlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgMSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMudmlldyA9IHRoaXMudmlld0luZGV4ZXNbbmV4dFZpZXddO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfaGFuZGxlSG90S2V5OiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRlID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKHRoaXMuX2dldEZvY3VzZWREYXRlKCkpLFxyXG4gICAgICAgICAgICAgICAgZm9jdXNlZFBhcnNlZCxcclxuICAgICAgICAgICAgICAgIG8gPSB0aGlzLm9wdHMsXHJcbiAgICAgICAgICAgICAgICBuZXdEYXRlLFxyXG4gICAgICAgICAgICAgICAgdG90YWxEYXlzSW5OZXh0TW9udGgsXHJcbiAgICAgICAgICAgICAgICBtb250aENoYW5nZWQgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHllYXJDaGFuZ2VkID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBkZWNhZGVDaGFuZ2VkID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB5ID0gZGF0ZS55ZWFyLFxyXG4gICAgICAgICAgICAgICAgbSA9IGRhdGUubW9udGgsXHJcbiAgICAgICAgICAgICAgICBkID0gZGF0ZS5kYXRlO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2N0cmxSaWdodCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjdHJsVXAnOlxyXG4gICAgICAgICAgICAgICAgICAgIG0gKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICBtb250aENoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY3RybExlZnQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnY3RybERvd24nOlxyXG4gICAgICAgICAgICAgICAgICAgIG0gLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICBtb250aENoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2hpZnRSaWdodCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzaGlmdFVwJzpcclxuICAgICAgICAgICAgICAgICAgICB5ZWFyQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgeSArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2hpZnRMZWZ0JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3NoaWZ0RG93bic6XHJcbiAgICAgICAgICAgICAgICAgICAgeWVhckNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHkgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2FsdFJpZ2h0JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2FsdFVwJzpcclxuICAgICAgICAgICAgICAgICAgICBkZWNhZGVDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB5ICs9IDEwO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYWx0TGVmdCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhbHREb3duJzpcclxuICAgICAgICAgICAgICAgICAgICBkZWNhZGVDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB5IC09IDEwO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY3RybFNoaWZ0VXAnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXAoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG90YWxEYXlzSW5OZXh0TW9udGggPSBkYXRlcGlja2VyLmdldERheXNDb3VudChuZXcgRGF0ZSh5LG0pKTtcclxuICAgICAgICAgICAgbmV3RGF0ZSA9IG5ldyBEYXRlKHksbSxkKTtcclxuXHJcbiAgICAgICAgICAgIC8vIElmIG5leHQgbW9udGggaGFzIGxlc3MgZGF5cyB0aGFuIGN1cnJlbnQsIHNldCBkYXRlIHRvIHRvdGFsIGRheXMgaW4gdGhhdCBtb250aFxyXG4gICAgICAgICAgICBpZiAodG90YWxEYXlzSW5OZXh0TW9udGggPCBkKSBkID0gdG90YWxEYXlzSW5OZXh0TW9udGg7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayBpZiBuZXdEYXRlIGlzIGluIHZhbGlkIHJhbmdlXHJcbiAgICAgICAgICAgIGlmIChuZXdEYXRlLmdldFRpbWUoKSA8IHRoaXMubWluVGltZSkge1xyXG4gICAgICAgICAgICAgICAgbmV3RGF0ZSA9IHRoaXMubWluRGF0ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChuZXdEYXRlLmdldFRpbWUoKSA+IHRoaXMubWF4VGltZSkge1xyXG4gICAgICAgICAgICAgICAgbmV3RGF0ZSA9IHRoaXMubWF4RGF0ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5mb2N1c2VkID0gbmV3RGF0ZTtcclxuXHJcbiAgICAgICAgICAgIGZvY3VzZWRQYXJzZWQgPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUobmV3RGF0ZSk7XHJcbiAgICAgICAgICAgIGlmIChtb250aENoYW5nZWQgJiYgby5vbkNoYW5nZU1vbnRoKSB7XHJcbiAgICAgICAgICAgICAgICBvLm9uQ2hhbmdlTW9udGgoZm9jdXNlZFBhcnNlZC5tb250aCwgZm9jdXNlZFBhcnNlZC55ZWFyKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh5ZWFyQ2hhbmdlZCAmJiBvLm9uQ2hhbmdlWWVhcikge1xyXG4gICAgICAgICAgICAgICAgby5vbkNoYW5nZVllYXIoZm9jdXNlZFBhcnNlZC55ZWFyKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkZWNhZGVDaGFuZ2VkICYmIG8ub25DaGFuZ2VEZWNhZGUpIHtcclxuICAgICAgICAgICAgICAgIG8ub25DaGFuZ2VEZWNhZGUodGhpcy5jdXJEZWNhZGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfcmVnaXN0ZXJLZXk6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIGV4aXN0cyA9IHRoaXMua2V5cy5zb21lKGZ1bmN0aW9uIChjdXJLZXkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJLZXkgPT0ga2V5O1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICghZXhpc3RzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmtleXMucHVzaChrZXkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfdW5SZWdpc3RlcktleTogZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmtleXMuaW5kZXhPZihrZXkpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5rZXlzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2lzSG90S2V5UHJlc3NlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudEhvdEtleSxcclxuICAgICAgICAgICAgICAgIGZvdW5kID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBfdGhpcyA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBwcmVzc2VkS2V5cyA9IHRoaXMua2V5cy5zb3J0KCk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBob3RLZXkgaW4gaG90S2V5cykge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudEhvdEtleSA9IGhvdEtleXNbaG90S2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChwcmVzc2VkS2V5cy5sZW5ndGggIT0gY3VycmVudEhvdEtleS5sZW5ndGgpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50SG90S2V5LmV2ZXJ5KGZ1bmN0aW9uIChrZXksIGkpIHsgcmV0dXJuIGtleSA9PSBwcmVzc2VkS2V5c1tpXX0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RyaWdnZXIoJ2hvdEtleScsIGhvdEtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZm91bmQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3RyaWdnZXI6IGZ1bmN0aW9uIChldmVudCwgYXJncykge1xyXG4gICAgICAgICAgICB0aGlzLiRlbC50cmlnZ2VyKGV2ZW50LCBhcmdzKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9mb2N1c05leHRDZWxsOiBmdW5jdGlvbiAoa2V5Q29kZSwgdHlwZSkge1xyXG4gICAgICAgICAgICB0eXBlID0gdHlwZSB8fCB0aGlzLmNlbGxUeXBlO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRhdGUgPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUodGhpcy5fZ2V0Rm9jdXNlZERhdGUoKSksXHJcbiAgICAgICAgICAgICAgICB5ID0gZGF0ZS55ZWFyLFxyXG4gICAgICAgICAgICAgICAgbSA9IGRhdGUubW9udGgsXHJcbiAgICAgICAgICAgICAgICBkID0gZGF0ZS5kYXRlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzSG90S2V5UHJlc3NlZCgpKXtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3dpdGNoKGtleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzc6IC8vIGxlZnRcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICdkYXknID8gKGQgLT0gMSkgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICdtb250aCcgPyAobSAtPSAxKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT0gJ3llYXInID8gKHkgLT0gMSkgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzg6IC8vIHVwXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAnZGF5JyA/IChkIC09IDcpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAnbW9udGgnID8gKG0gLT0gMykgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICd5ZWFyJyA/ICh5IC09IDQpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM5OiAvLyByaWdodFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT0gJ2RheScgPyAoZCArPSAxKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT0gJ21vbnRoJyA/IChtICs9IDEpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAneWVhcicgPyAoeSArPSAxKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0MDogLy8gZG93blxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT0gJ2RheScgPyAoZCArPSA3KSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT0gJ21vbnRoJyA/IChtICs9IDMpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAneWVhcicgPyAoeSArPSA0KSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgbmQgPSBuZXcgRGF0ZSh5LG0sZCk7XHJcbiAgICAgICAgICAgIGlmIChuZC5nZXRUaW1lKCkgPCB0aGlzLm1pblRpbWUpIHtcclxuICAgICAgICAgICAgICAgIG5kID0gdGhpcy5taW5EYXRlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5kLmdldFRpbWUoKSA+IHRoaXMubWF4VGltZSkge1xyXG4gICAgICAgICAgICAgICAgbmQgPSB0aGlzLm1heERhdGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZm9jdXNlZCA9IG5kO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0Rm9jdXNlZERhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGZvY3VzZWQgID0gdGhpcy5mb2N1c2VkIHx8IHRoaXMuc2VsZWN0ZWREYXRlc1t0aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoIC0gMV0sXHJcbiAgICAgICAgICAgICAgICBkID0gdGhpcy5wYXJzZWREYXRlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFmb2N1c2VkKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMudmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RheXMnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1c2VkID0gbmV3IERhdGUoZC55ZWFyLCBkLm1vbnRoLCBuZXcgRGF0ZSgpLmdldERhdGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vbnRocyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBuZXcgRGF0ZShkLnllYXIsIGQubW9udGgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICd5ZWFycyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBuZXcgRGF0ZShkLnllYXIsIDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZvY3VzZWQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldENlbGw6IGZ1bmN0aW9uIChkYXRlLCB0eXBlKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSB0eXBlIHx8IHRoaXMuY2VsbFR5cGU7XHJcblxyXG4gICAgICAgICAgICB2YXIgZCA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZShkYXRlKSxcclxuICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gJy5kYXRlcGlja2VyLS1jZWxsW2RhdGEteWVhcj1cIicgKyBkLnllYXIgKyAnXCJdJyxcclxuICAgICAgICAgICAgICAgICRjZWxsO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtb250aCc6XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgPSAnW2RhdGEtbW9udGg9XCInICsgZC5tb250aCArICdcIl0nO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGF5JzpcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciArPSAnW2RhdGEtbW9udGg9XCInICsgZC5tb250aCArICdcIl1bZGF0YS1kYXRlPVwiJyArIGQuZGF0ZSArICdcIl0nO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICRjZWxsID0gdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XS4kZWwuZmluZChzZWxlY3Rvcik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJGNlbGwubGVuZ3RoID8gJGNlbGwgOiAkKCcnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLiRlbFxyXG4gICAgICAgICAgICAgICAgLm9mZignLmFkcCcpXHJcbiAgICAgICAgICAgICAgICAuZGF0YSgnZGF0ZXBpY2tlcicsICcnKTtcclxuXHJcbiAgICAgICAgICAgIF90aGlzLnNlbGVjdGVkRGF0ZXMgPSBbXTtcclxuICAgICAgICAgICAgX3RoaXMuZm9jdXNlZCA9ICcnO1xyXG4gICAgICAgICAgICBfdGhpcy52aWV3cyA9IHt9O1xyXG4gICAgICAgICAgICBfdGhpcy5rZXlzID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLm1pblJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgIF90aGlzLm1heFJhbmdlID0gJyc7XHJcblxyXG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0cy5pbmxpbmUgfHwgIV90aGlzLmVsSXNJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuJGRhdGVwaWNrZXIuY2xvc2VzdCgnLmRhdGVwaWNrZXItaW5saW5lJykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy4kZGF0ZXBpY2tlci5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9oYW5kbGVBbHJlYWR5U2VsZWN0ZWREYXRlczogZnVuY3Rpb24gKGFscmVhZHlTZWxlY3RlZCwgc2VsZWN0ZWREYXRlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMucmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRzLnRvZ2dsZVNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHBvc3NpYmlsaXR5IHRvIHNlbGVjdCBzYW1lIGRhdGUgd2hlbiByYW5nZSBpcyB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGggIT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdjbGlja0NlbGwnLCBzZWxlY3RlZERhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVEYXRlKHNlbGVjdGVkRGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRzLnRvZ2dsZVNlbGVjdGVkKXtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRGF0ZShzZWxlY3RlZERhdGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBDaGFuZ2UgbGFzdCBzZWxlY3RlZCBkYXRlIHRvIGJlIGFibGUgdG8gY2hhbmdlIHRpbWUgd2hlbiBjbGlja2luZyBvbiB0aGlzIGNlbGxcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdHMudG9nZ2xlU2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFzdFNlbGVjdGVkRGF0ZSA9IGFscmVhZHlTZWxlY3RlZDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdHMudGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGltZXBpY2tlci5fc2V0VGltZShhbHJlYWR5U2VsZWN0ZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGltZXBpY2tlci51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vblNob3dFdmVudDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvdygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uQmx1cjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaW5Gb2N1cyAmJiB0aGlzLnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uTW91c2VEb3duRGF0ZXBpY2tlcjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5pbkZvY3VzID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25Nb3VzZVVwRGF0ZXBpY2tlcjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5pbkZvY3VzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGUub3JpZ2luYWxFdmVudC5pbkZvY3VzID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKCFlLm9yaWdpbmFsRXZlbnQudGltZXBpY2tlckZvY3VzKSB0aGlzLiRlbC5mb2N1cygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbktleVVwR2VuZXJhbDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyIHZhbCA9IHRoaXMuJGVsLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF2YWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vblJlc2l6ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52aXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25Nb3VzZVVwQm9keTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUub3JpZ2luYWxFdmVudC5pbkZvY3VzKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy52aXNpYmxlICYmICF0aGlzLmluRm9jdXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uTW91c2VVcEVsOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLm9yaWdpbmFsRXZlbnQuaW5Gb2N1cyA9IHRydWU7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQodGhpcy5fb25LZXlVcEdlbmVyYWwuYmluZCh0aGlzKSw0KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25LZXlEb3duOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgY29kZSA9IGUud2hpY2g7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyS2V5KGNvZGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gQXJyb3dzXHJcbiAgICAgICAgICAgIGlmIChjb2RlID49IDM3ICYmIGNvZGUgPD0gNDApIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzTmV4dENlbGwoY29kZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEVudGVyXHJcbiAgICAgICAgICAgIGlmIChjb2RlID09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mb2N1c2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2dldENlbGwodGhpcy5mb2N1c2VkKS5oYXNDbGFzcygnLWRpc2FibGVkLScpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmlldyAhPSB0aGlzLm9wdHMubWluVmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvd24oKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHJlYWR5U2VsZWN0ZWQgPSB0aGlzLl9pc1NlbGVjdGVkKHRoaXMuZm9jdXNlZCwgdGhpcy5jZWxsVHlwZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFscmVhZHlTZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNlZC5zZXRIb3Vycyh0aGlzLnRpbWVwaWNrZXIuaG91cnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNlZC5zZXRNaW51dGVzKHRoaXMudGltZXBpY2tlci5taW51dGVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0RGF0ZSh0aGlzLmZvY3VzZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUFscmVhZHlTZWxlY3RlZERhdGVzKGFscmVhZHlTZWxlY3RlZCwgdGhpcy5mb2N1c2VkKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gRXNjXHJcbiAgICAgICAgICAgIGlmIChjb2RlID09IDI3KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbktleVVwOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgY29kZSA9IGUud2hpY2g7XHJcbiAgICAgICAgICAgIHRoaXMuX3VuUmVnaXN0ZXJLZXkoY29kZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uSG90S2V5OiBmdW5jdGlvbiAoZSwgaG90S2V5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUhvdEtleShob3RLZXkpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbk1vdXNlRW50ZXJDZWxsOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgJGNlbGwgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuZGF0ZXBpY2tlci0tY2VsbCcpLFxyXG4gICAgICAgICAgICAgICAgZGF0ZSA9IHRoaXMuX2dldERhdGVGcm9tQ2VsbCgkY2VsbCk7XHJcblxyXG4gICAgICAgICAgICAvLyBQcmV2ZW50IGZyb20gdW5uZWNlc3NhcnkgcmVuZGVyaW5nIGFuZCBzZXR0aW5nIG5ldyBjdXJyZW50RGF0ZVxyXG4gICAgICAgICAgICB0aGlzLnNpbGVudCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5mb2N1c2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzZWQgPSAnJ1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkY2VsbC5hZGRDbGFzcygnLWZvY3VzLScpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5mb2N1c2VkID0gZGF0ZTtcclxuICAgICAgICAgICAgdGhpcy5zaWxlbnQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMucmFuZ2UgJiYgdGhpcy5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1pblJhbmdlID0gdGhpcy5zZWxlY3RlZERhdGVzWzBdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXhSYW5nZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGVwaWNrZXIubGVzcyh0aGlzLm1pblJhbmdlLCB0aGlzLmZvY3VzZWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhSYW5nZSA9IHRoaXMubWluUmFuZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taW5SYW5nZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XS5fdXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25Nb3VzZUxlYXZlQ2VsbDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyICRjZWxsID0gJChlLnRhcmdldCkuY2xvc2VzdCgnLmRhdGVwaWNrZXItLWNlbGwnKTtcclxuXHJcbiAgICAgICAgICAgICRjZWxsLnJlbW92ZUNsYXNzKCctZm9jdXMtJyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNpbGVudCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZm9jdXNlZCA9ICcnO1xyXG4gICAgICAgICAgICB0aGlzLnNpbGVudCA9IGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vblRpbWVDaGFuZ2U6IGZ1bmN0aW9uIChlLCBoLCBtKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkRGF0ZXMgPSB0aGlzLnNlbGVjdGVkRGF0ZXMsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkRGF0ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBkYXRlID0gdGhpcy5sYXN0U2VsZWN0ZWREYXRlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkYXRlLnNldEhvdXJzKGgpO1xyXG4gICAgICAgICAgICBkYXRlLnNldE1pbnV0ZXMobSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXNlbGVjdGVkICYmICF0aGlzLl9nZXRDZWxsKGRhdGUpLmhhc0NsYXNzKCctZGlzYWJsZWQtJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0RGF0ZShkYXRlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldElucHV0VmFsdWUoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdHMub25TZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyT25DaGFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbkNsaWNrQ2VsbDogZnVuY3Rpb24gKGUsIGRhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRIb3Vycyh0aGlzLnRpbWVwaWNrZXIuaG91cnMpO1xyXG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRNaW51dGVzKHRoaXMudGltZXBpY2tlci5taW51dGVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdERhdGUoZGF0ZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0IGZvY3VzZWQodmFsKSB7XHJcbiAgICAgICAgICAgIGlmICghdmFsICYmIHRoaXMuZm9jdXNlZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyICRjZWxsID0gdGhpcy5fZ2V0Q2VsbCh0aGlzLmZvY3VzZWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICgkY2VsbC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkY2VsbC5yZW1vdmVDbGFzcygnLWZvY3VzLScpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fZm9jdXNlZCA9IHZhbDtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5yYW5nZSAmJiB0aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWluUmFuZ2UgPSB0aGlzLnNlbGVjdGVkRGF0ZXNbMF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1heFJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZXBpY2tlci5sZXNzKHRoaXMubWluUmFuZ2UsIHRoaXMuX2ZvY3VzZWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhSYW5nZSA9IHRoaXMubWluUmFuZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taW5SYW5nZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNpbGVudCkgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGUgPSB2YWw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0IGZvY3VzZWQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mb2N1c2VkO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldCBwYXJzZWREYXRlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKHRoaXMuZGF0ZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0IGRhdGUgKHZhbCkge1xyXG4gICAgICAgICAgICBpZiAoISh2YWwgaW5zdGFuY2VvZiBEYXRlKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50RGF0ZSA9IHZhbDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmluaXRlZCAmJiAhdGhpcy5zaWxlbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld3NbdGhpcy52aWV3XS5fcmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5hdi5fcmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52aXNpYmxlICYmIHRoaXMuZWxJc0lucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0IGRhdGUgKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50RGF0ZVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldCB2aWV3ICh2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3SW5kZXggPSB0aGlzLnZpZXdJbmRleGVzLmluZGV4T2YodmFsKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZpZXdJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5wcmV2VmlldyA9IHRoaXMuY3VycmVudFZpZXc7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFZpZXcgPSB2YWw7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5pbml0ZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy52aWV3c1t2YWxdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3c1t2YWxdID0gbmV3ICAkLmZuLmRhdGVwaWNrZXIuQm9keSh0aGlzLCB2YWwsIHRoaXMub3B0cylcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3c1t2YWxdLl9yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdzW3RoaXMucHJldlZpZXddLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld3NbdmFsXS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5hdi5fcmVuZGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5vbkNoYW5nZVZpZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdHMub25DaGFuZ2VWaWV3KHZhbClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVsSXNJbnB1dCAmJiB0aGlzLnZpc2libGUpIHRoaXMuc2V0UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHZhbFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldCB2aWV3KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50VmlldztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXQgY2VsbFR5cGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZXcuc3Vic3RyaW5nKDAsIHRoaXMudmlldy5sZW5ndGggLSAxKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldCBtaW5UaW1lKCkge1xyXG4gICAgICAgICAgICB2YXIgbWluID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKHRoaXMubWluRGF0ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShtaW4ueWVhciwgbWluLm1vbnRoLCBtaW4uZGF0ZSkuZ2V0VGltZSgpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0IG1heFRpbWUoKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXggPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUodGhpcy5tYXhEYXRlKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKG1heC55ZWFyLCBtYXgubW9udGgsIG1heC5kYXRlKS5nZXRUaW1lKClcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXQgY3VyRGVjYWRlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0ZXBpY2tlci5nZXREZWNhZGUodGhpcy5kYXRlKVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gIFV0aWxzXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgZGF0ZXBpY2tlci5nZXREYXlzQ291bnQgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSArIDEsIDApLmdldERhdGUoKTtcclxuICAgIH07XHJcblxyXG4gICAgZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlID0gZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB5ZWFyOiBkYXRlLmdldEZ1bGxZZWFyKCksXHJcbiAgICAgICAgICAgIG1vbnRoOiBkYXRlLmdldE1vbnRoKCksXHJcbiAgICAgICAgICAgIGZ1bGxNb250aDogKGRhdGUuZ2V0TW9udGgoKSArIDEpIDwgMTAgPyAnMCcgKyAoZGF0ZS5nZXRNb250aCgpICsgMSkgOiBkYXRlLmdldE1vbnRoKCkgKyAxLCAvLyBPbmUgYmFzZWRcclxuICAgICAgICAgICAgZGF0ZTogZGF0ZS5nZXREYXRlKCksXHJcbiAgICAgICAgICAgIGZ1bGxEYXRlOiBkYXRlLmdldERhdGUoKSA8IDEwID8gJzAnICsgZGF0ZS5nZXREYXRlKCkgOiBkYXRlLmdldERhdGUoKSxcclxuICAgICAgICAgICAgZGF5OiBkYXRlLmdldERheSgpLFxyXG4gICAgICAgICAgICBob3VyczogZGF0ZS5nZXRIb3VycygpLFxyXG4gICAgICAgICAgICBmdWxsSG91cnM6ICBkYXRlLmdldEhvdXJzKCkgPCAxMCA/ICcwJyArIGRhdGUuZ2V0SG91cnMoKSA6ICBkYXRlLmdldEhvdXJzKCkgLFxyXG4gICAgICAgICAgICBtaW51dGVzOiBkYXRlLmdldE1pbnV0ZXMoKSxcclxuICAgICAgICAgICAgZnVsbE1pbnV0ZXM6ICBkYXRlLmdldE1pbnV0ZXMoKSA8IDEwID8gJzAnICsgZGF0ZS5nZXRNaW51dGVzKCkgOiAgZGF0ZS5nZXRNaW51dGVzKClcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIuZ2V0RGVjYWRlID0gZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICB2YXIgZmlyc3RZZWFyID0gTWF0aC5mbG9vcihkYXRlLmdldEZ1bGxZZWFyKCkgLyAxMCkgKiAxMDtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtmaXJzdFllYXIsIGZpcnN0WWVhciArIDldO1xyXG4gICAgfTtcclxuXHJcbiAgICBkYXRlcGlja2VyLnRlbXBsYXRlID0gZnVuY3Rpb24gKHN0ciwgZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvI1xceyhbXFx3XSspXFx9L2csIGZ1bmN0aW9uIChzb3VyY2UsIG1hdGNoKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhW21hdGNoXSB8fCBkYXRhW21hdGNoXSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFbbWF0Y2hdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgZGF0ZXBpY2tlci5pc1NhbWUgPSBmdW5jdGlvbiAoZGF0ZTEsIGRhdGUyLCB0eXBlKSB7XHJcbiAgICAgICAgaWYgKCFkYXRlMSB8fCAhZGF0ZTIpIHJldHVybiBmYWxzZTtcclxuICAgICAgICB2YXIgZDEgPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUoZGF0ZTEpLFxyXG4gICAgICAgICAgICBkMiA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZShkYXRlMiksXHJcbiAgICAgICAgICAgIF90eXBlID0gdHlwZSA/IHR5cGUgOiAnZGF5JyxcclxuXHJcbiAgICAgICAgICAgIGNvbmRpdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICBkYXk6IGQxLmRhdGUgPT0gZDIuZGF0ZSAmJiBkMS5tb250aCA9PSBkMi5tb250aCAmJiBkMS55ZWFyID09IGQyLnllYXIsXHJcbiAgICAgICAgICAgICAgICBtb250aDogZDEubW9udGggPT0gZDIubW9udGggJiYgZDEueWVhciA9PSBkMi55ZWFyLFxyXG4gICAgICAgICAgICAgICAgeWVhcjogZDEueWVhciA9PSBkMi55ZWFyXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBjb25kaXRpb25zW190eXBlXTtcclxuICAgIH07XHJcblxyXG4gICAgZGF0ZXBpY2tlci5sZXNzID0gZnVuY3Rpb24gKGRhdGVDb21wYXJlVG8sIGRhdGUsIHR5cGUpIHtcclxuICAgICAgICBpZiAoIWRhdGVDb21wYXJlVG8gfHwgIWRhdGUpIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgPCBkYXRlQ29tcGFyZVRvLmdldFRpbWUoKTtcclxuICAgIH07XHJcblxyXG4gICAgZGF0ZXBpY2tlci5iaWdnZXIgPSBmdW5jdGlvbiAoZGF0ZUNvbXBhcmVUbywgZGF0ZSwgdHlwZSkge1xyXG4gICAgICAgIGlmICghZGF0ZUNvbXBhcmVUbyB8fCAhZGF0ZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBkYXRlLmdldFRpbWUoKSA+IGRhdGVDb21wYXJlVG8uZ2V0VGltZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBkYXRlcGlja2VyLmdldExlYWRpbmdaZXJvTnVtID0gZnVuY3Rpb24gKG51bSkge1xyXG4gICAgICAgIHJldHVybiBwYXJzZUludChudW0pIDwgMTAgPyAnMCcgKyBudW0gOiBudW07XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBjb3B5IG9mIGRhdGUgd2l0aCBob3VycyBhbmQgbWludXRlcyBlcXVhbHMgdG8gMFxyXG4gICAgICogQHBhcmFtIGRhdGUge0RhdGV9XHJcbiAgICAgKi9cclxuICAgIGRhdGVwaWNrZXIucmVzZXRUaW1lID0gZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGRhdGUgIT0gJ29iamVjdCcpIHJldHVybjtcclxuICAgICAgICBkYXRlID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKGRhdGUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlLnllYXIsIGRhdGUubW9udGgsIGRhdGUuZGF0ZSlcclxuICAgIH07XHJcblxyXG4gICAgJC5mbi5kYXRlcGlja2VyID0gZnVuY3Rpb24gKCBvcHRpb25zICkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoISQuZGF0YSh0aGlzLCBwbHVnaW5OYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgJC5kYXRhKHRoaXMsICBwbHVnaW5OYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlcGlja2VyKCB0aGlzLCBvcHRpb25zICkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIF90aGlzID0gJC5kYXRhKHRoaXMsIHBsdWdpbk5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIF90aGlzLm9wdHMgPSAkLmV4dGVuZCh0cnVlLCBfdGhpcy5vcHRzLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgICQuZm4uZGF0ZXBpY2tlci5Db25zdHJ1Y3RvciA9IERhdGVwaWNrZXI7XHJcblxyXG4gICAgJC5mbi5kYXRlcGlja2VyLmxhbmd1YWdlID0ge1xyXG4gICAgICAgIHJ1OiB7XHJcbiAgICAgICAgICAgIGRheXM6IFsn0JLQvtGB0LrRgNC10YHQtdC90YzQtScsICfQn9C+0L3QtdC00LXQu9GM0L3QuNC6JywgJ9CS0YLQvtGA0L3QuNC6JywgJ9Ch0YDQtdC00LAnLCAn0KfQtdGC0LLQtdGA0LMnLCAn0J/Rj9GC0L3QuNGG0LAnLCAn0KHRg9Cx0LHQvtGC0LAnXSxcclxuICAgICAgICAgICAgZGF5c1Nob3J0OiBbJ9CS0L7RgScsJ9Cf0L7QvScsJ9CS0YLQvicsJ9Ch0YDQtScsJ9Cn0LXRgicsJ9Cf0Y/RgicsJ9Ch0YPQsSddLFxyXG4gICAgICAgICAgICBkYXlzTWluOiBbJ9CS0YEnLCfQn9C9Jywn0JLRgicsJ9Ch0YAnLCfQp9GCJywn0J/RgicsJ9Ch0LEnXSxcclxuICAgICAgICAgICAgbW9udGhzOiBbJ9Cv0L3QstCw0YDRjCcsICfQpNC10LLRgNCw0LvRjCcsICfQnNCw0YDRgicsICfQkNC/0YDQtdC70YwnLCAn0JzQsNC5JywgJ9CY0Y7QvdGMJywgJ9CY0Y7Qu9GMJywgJ9CQ0LLQs9GD0YHRgicsICfQodC10L3RgtGP0LHRgNGMJywgJ9Ce0LrRgtGP0LHRgNGMJywgJ9Cd0L7Rj9Cx0YDRjCcsICfQlNC10LrQsNCx0YDRjCddLFxyXG4gICAgICAgICAgICBtb250aHNTaG9ydDogWyfQr9C90LInLCAn0KTQtdCyJywgJ9Cc0LDRgCcsICfQkNC/0YAnLCAn0JzQsNC5JywgJ9CY0Y7QvScsICfQmNGO0LsnLCAn0JDQstCzJywgJ9Ch0LXQvScsICfQntC60YInLCAn0J3QvtGPJywgJ9CU0LXQuiddLFxyXG4gICAgICAgICAgICB0b2RheTogJ9Ch0LXQs9C+0LTQvdGPJyxcclxuICAgICAgICAgICAgY2xlYXI6ICfQntGH0LjRgdGC0LjRgtGMJyxcclxuICAgICAgICAgICAgZGF0ZUZvcm1hdDogJ2RkLm1tLnl5eXknLFxyXG4gICAgICAgICAgICB0aW1lRm9ybWF0OiAnaGg6aWknLFxyXG4gICAgICAgICAgICBmaXJzdERheTogMVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJChhdXRvSW5pdFNlbGVjdG9yKS5kYXRlcGlja2VyKCk7XHJcbiAgICB9KVxyXG5cclxufSkoKTtcclxuXHJcbjsoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHRlbXBsYXRlcyA9IHtcclxuICAgICAgICBkYXlzOicnICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLWRheXMgZGF0ZXBpY2tlci0tYm9keVwiPicgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tZGF5cy1uYW1lc1wiPjwvZGl2PicgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tY2VsbHMgZGF0ZXBpY2tlci0tY2VsbHMtZGF5c1wiPjwvZGl2PicgK1xyXG4gICAgICAgICc8L2Rpdj4nLFxyXG4gICAgICAgIG1vbnRoczogJycgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tbW9udGhzIGRhdGVwaWNrZXItLWJvZHlcIj4nICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLWNlbGxzIGRhdGVwaWNrZXItLWNlbGxzLW1vbnRoc1wiPjwvZGl2PicgK1xyXG4gICAgICAgICc8L2Rpdj4nLFxyXG4gICAgICAgIHllYXJzOiAnJyArXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS15ZWFycyBkYXRlcGlja2VyLS1ib2R5XCI+JyArXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1jZWxscyBkYXRlcGlja2VyLS1jZWxscy15ZWFyc1wiPjwvZGl2PicgK1xyXG4gICAgICAgICc8L2Rpdj4nXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXRlcGlja2VyID0gJC5mbi5kYXRlcGlja2VyLFxyXG4gICAgICAgIGRwID0gZGF0ZXBpY2tlci5Db25zdHJ1Y3RvcjtcclxuXHJcbiAgICBkYXRlcGlja2VyLkJvZHkgPSBmdW5jdGlvbiAoZCwgdHlwZSwgb3B0cykge1xyXG4gICAgICAgIHRoaXMuZCA9IGQ7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xyXG4gICAgICAgIHRoaXMuJGVsID0gJCgnJyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdHMub25seVRpbWVwaWNrZXIpIHJldHVybjtcclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgZGF0ZXBpY2tlci5Cb2R5LnByb3RvdHlwZSA9IHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkQmFzZUh0bWwoKTtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9iaW5kRXZlbnRzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2JpbmRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy4kZWwub24oJ2NsaWNrJywgJy5kYXRlcGlja2VyLS1jZWxsJywgJC5wcm94eSh0aGlzLl9vbkNsaWNrQ2VsbCwgdGhpcykpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9idWlsZEJhc2VIdG1sOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsID0gJCh0ZW1wbGF0ZXNbdGhpcy50eXBlXSkuYXBwZW5kVG8odGhpcy5kLiRjb250ZW50KTtcclxuICAgICAgICAgICAgdGhpcy4kbmFtZXMgPSAkKCcuZGF0ZXBpY2tlci0tZGF5cy1uYW1lcycsIHRoaXMuJGVsKTtcclxuICAgICAgICAgICAgdGhpcy4kY2VsbHMgPSAkKCcuZGF0ZXBpY2tlci0tY2VsbHMnLCB0aGlzLiRlbCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldERheU5hbWVzSHRtbDogZnVuY3Rpb24gKGZpcnN0RGF5LCBjdXJEYXksIGh0bWwsIGkpIHtcclxuICAgICAgICAgICAgY3VyRGF5ID0gY3VyRGF5ICE9IHVuZGVmaW5lZCA/IGN1ckRheSA6IGZpcnN0RGF5O1xyXG4gICAgICAgICAgICBodG1sID0gaHRtbCA/IGh0bWwgOiAnJztcclxuICAgICAgICAgICAgaSA9IGkgIT0gdW5kZWZpbmVkID8gaSA6IDA7XHJcblxyXG4gICAgICAgICAgICBpZiAoaSA+IDcpIHJldHVybiBodG1sO1xyXG4gICAgICAgICAgICBpZiAoY3VyRGF5ID09IDcpIHJldHVybiB0aGlzLl9nZXREYXlOYW1lc0h0bWwoZmlyc3REYXksIDAsIGh0bWwsICsraSk7XHJcblxyXG4gICAgICAgICAgICBodG1sICs9ICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tZGF5LW5hbWUnICsgKHRoaXMuZC5pc1dlZWtlbmQoY3VyRGF5KSA/IFwiIC13ZWVrZW5kLVwiIDogXCJcIikgKyAnXCI+JyArIHRoaXMuZC5sb2MuZGF5c01pbltjdXJEYXldICsgJzwvZGl2Pic7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0RGF5TmFtZXNIdG1sKGZpcnN0RGF5LCArK2N1ckRheSwgaHRtbCwgKytpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0Q2VsbENvbnRlbnRzOiBmdW5jdGlvbiAoZGF0ZSwgdHlwZSkge1xyXG4gICAgICAgICAgICB2YXIgY2xhc3NlcyA9IFwiZGF0ZXBpY2tlci0tY2VsbCBkYXRlcGlja2VyLS1jZWxsLVwiICsgdHlwZSxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlID0gbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgICAgIHBhcmVudCA9IHRoaXMuZCxcclxuICAgICAgICAgICAgICAgIG1pblJhbmdlID0gZHAucmVzZXRUaW1lKHBhcmVudC5taW5SYW5nZSksXHJcbiAgICAgICAgICAgICAgICBtYXhSYW5nZSA9IGRwLnJlc2V0VGltZShwYXJlbnQubWF4UmFuZ2UpLFxyXG4gICAgICAgICAgICAgICAgb3B0cyA9IHBhcmVudC5vcHRzLFxyXG4gICAgICAgICAgICAgICAgZCA9IGRwLmdldFBhcnNlZERhdGUoZGF0ZSksXHJcbiAgICAgICAgICAgICAgICByZW5kZXIgPSB7fSxcclxuICAgICAgICAgICAgICAgIGh0bWwgPSBkLmRhdGU7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2RheSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudC5pc1dlZWtlbmQoZC5kYXkpKSBjbGFzc2VzICs9IFwiIC13ZWVrZW5kLVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkLm1vbnRoICE9IHRoaXMuZC5wYXJzZWREYXRlLm1vbnRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgKz0gXCIgLW90aGVyLW1vbnRoLVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdHMuc2VsZWN0T3RoZXJNb250aHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgKz0gXCIgLWRpc2FibGVkLVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0cy5zaG93T3RoZXJNb250aHMpIGh0bWwgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtb250aCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9IHBhcmVudC5sb2NbcGFyZW50Lm9wdHMubW9udGhzRmllbGRdW2QubW9udGhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAneWVhcic6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlY2FkZSA9IHBhcmVudC5jdXJEZWNhZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9IGQueWVhcjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZC55ZWFyIDwgZGVjYWRlWzBdIHx8IGQueWVhciA+IGRlY2FkZVsxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzICs9ICcgLW90aGVyLWRlY2FkZS0nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdHMuc2VsZWN0T3RoZXJZZWFycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyArPSBcIiAtZGlzYWJsZWQtXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRzLnNob3dPdGhlclllYXJzKSBodG1sID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0cy5vblJlbmRlckNlbGwpIHtcclxuICAgICAgICAgICAgICAgIHJlbmRlciA9IG9wdHMub25SZW5kZXJDZWxsKGRhdGUsIHR5cGUpIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgaHRtbCA9IHJlbmRlci5odG1sID8gcmVuZGVyLmh0bWwgOiBodG1sO1xyXG4gICAgICAgICAgICAgICAgY2xhc3NlcyArPSByZW5kZXIuY2xhc3NlcyA/ICcgJyArIHJlbmRlci5jbGFzc2VzIDogJyc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRzLnJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZHAuaXNTYW1lKG1pblJhbmdlLCBkYXRlLCB0eXBlKSkgY2xhc3NlcyArPSAnIC1yYW5nZS1mcm9tLSc7XHJcbiAgICAgICAgICAgICAgICBpZiAoZHAuaXNTYW1lKG1heFJhbmdlLCBkYXRlLCB0eXBlKSkgY2xhc3NlcyArPSAnIC1yYW5nZS10by0nO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT0gMSAmJiBwYXJlbnQuZm9jdXNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGRwLmJpZ2dlcihtaW5SYW5nZSwgZGF0ZSkgJiYgZHAubGVzcyhwYXJlbnQuZm9jdXNlZCwgZGF0ZSkpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChkcC5sZXNzKG1heFJhbmdlLCBkYXRlKSAmJiBkcC5iaWdnZXIocGFyZW50LmZvY3VzZWQsIGRhdGUpKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgKz0gJyAtaW4tcmFuZ2UtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRwLmxlc3MobWF4UmFuZ2UsIGRhdGUpICYmIGRwLmlzU2FtZShwYXJlbnQuZm9jdXNlZCwgZGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyArPSAnIC1yYW5nZS1mcm9tLSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRwLmJpZ2dlcihtaW5SYW5nZSwgZGF0ZSkgJiYgZHAuaXNTYW1lKHBhcmVudC5mb2N1c2VkLCBkYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzICs9ICcgLXJhbmdlLXRvLSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJlbnQuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcC5iaWdnZXIobWluUmFuZ2UsIGRhdGUpICYmIGRwLmxlc3MobWF4UmFuZ2UsIGRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgKz0gJyAtaW4tcmFuZ2UtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChkcC5pc1NhbWUoY3VycmVudERhdGUsIGRhdGUsIHR5cGUpKSBjbGFzc2VzICs9ICcgLWN1cnJlbnQtJztcclxuICAgICAgICAgICAgaWYgKHBhcmVudC5mb2N1c2VkICYmIGRwLmlzU2FtZShkYXRlLCBwYXJlbnQuZm9jdXNlZCwgdHlwZSkpIGNsYXNzZXMgKz0gJyAtZm9jdXMtJztcclxuICAgICAgICAgICAgaWYgKHBhcmVudC5faXNTZWxlY3RlZChkYXRlLCB0eXBlKSkgY2xhc3NlcyArPSAnIC1zZWxlY3RlZC0nO1xyXG4gICAgICAgICAgICBpZiAoIXBhcmVudC5faXNJblJhbmdlKGRhdGUsIHR5cGUpIHx8IHJlbmRlci5kaXNhYmxlZCkgY2xhc3NlcyArPSAnIC1kaXNhYmxlZC0nO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGh0bWw6IGh0bWwsXHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzOiBjbGFzc2VzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYWxjdWxhdGVzIGRheXMgbnVtYmVyIHRvIHJlbmRlci4gR2VuZXJhdGVzIGRheXMgaHRtbCBhbmQgcmV0dXJucyBpdC5cclxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0ZSAtIERhdGUgb2JqZWN0XHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9nZXREYXlzSHRtbDogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdmFyIHRvdGFsTW9udGhEYXlzID0gZHAuZ2V0RGF5c0NvdW50KGRhdGUpLFxyXG4gICAgICAgICAgICAgICAgZmlyc3RNb250aERheSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCAxKS5nZXREYXkoKSxcclxuICAgICAgICAgICAgICAgIGxhc3RNb250aERheSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCB0b3RhbE1vbnRoRGF5cykuZ2V0RGF5KCksXHJcbiAgICAgICAgICAgICAgICBkYXlzRnJvbVBldk1vbnRoID0gZmlyc3RNb250aERheSAtIHRoaXMuZC5sb2MuZmlyc3REYXksXHJcbiAgICAgICAgICAgICAgICBkYXlzRnJvbU5leHRNb250aCA9IDYgLSBsYXN0TW9udGhEYXkgKyB0aGlzLmQubG9jLmZpcnN0RGF5O1xyXG5cclxuICAgICAgICAgICAgZGF5c0Zyb21QZXZNb250aCA9IGRheXNGcm9tUGV2TW9udGggPCAwID8gZGF5c0Zyb21QZXZNb250aCArIDcgOiBkYXlzRnJvbVBldk1vbnRoO1xyXG4gICAgICAgICAgICBkYXlzRnJvbU5leHRNb250aCA9IGRheXNGcm9tTmV4dE1vbnRoID4gNiA/IGRheXNGcm9tTmV4dE1vbnRoIC0gNyA6IGRheXNGcm9tTmV4dE1vbnRoO1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0YXJ0RGF5SW5kZXggPSAtZGF5c0Zyb21QZXZNb250aCArIDEsXHJcbiAgICAgICAgICAgICAgICBtLCB5LFxyXG4gICAgICAgICAgICAgICAgaHRtbCA9ICcnO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0RGF5SW5kZXgsIG1heCA9IHRvdGFsTW9udGhEYXlzICsgZGF5c0Zyb21OZXh0TW9udGg7IGkgPD0gbWF4OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHkgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBtID0gZGF0ZS5nZXRNb250aCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gdGhpcy5fZ2V0RGF5SHRtbChuZXcgRGF0ZSh5LCBtLCBpKSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldERheUh0bWw6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLl9nZXRDZWxsQ29udGVudHMoZGF0ZSwgJ2RheScpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiJyArIGNvbnRlbnQuY2xhc3NlcyArICdcIiAnICtcclxuICAgICAgICAgICAgICAgICdkYXRhLWRhdGU9XCInICsgZGF0ZS5nZXREYXRlKCkgKyAnXCIgJyArXHJcbiAgICAgICAgICAgICAgICAnZGF0YS1tb250aD1cIicgKyBkYXRlLmdldE1vbnRoKCkgKyAnXCIgJyArXHJcbiAgICAgICAgICAgICAgICAnZGF0YS15ZWFyPVwiJyArIGRhdGUuZ2V0RnVsbFllYXIoKSArICdcIj4nICsgY29udGVudC5odG1sICsgJzwvZGl2Pic7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2VuZXJhdGVzIG1vbnRocyBodG1sXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGUgLSBkYXRlIGluc3RhbmNlXHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9nZXRNb250aHNIdG1sOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgaHRtbCA9ICcnLFxyXG4gICAgICAgICAgICAgICAgZCA9IGRwLmdldFBhcnNlZERhdGUoZGF0ZSksXHJcbiAgICAgICAgICAgICAgICBpID0gMDtcclxuXHJcbiAgICAgICAgICAgIHdoaWxlKGkgPCAxMikge1xyXG4gICAgICAgICAgICAgICAgaHRtbCArPSB0aGlzLl9nZXRNb250aEh0bWwobmV3IERhdGUoZC55ZWFyLCBpKSk7XHJcbiAgICAgICAgICAgICAgICBpKytcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldE1vbnRoSHRtbDogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLl9nZXRDZWxsQ29udGVudHMoZGF0ZSwgJ21vbnRoJyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCInICsgY29udGVudC5jbGFzc2VzICsgJ1wiIGRhdGEtbW9udGg9XCInICsgZGF0ZS5nZXRNb250aCgpICsgJ1wiPicgKyBjb250ZW50Lmh0bWwgKyAnPC9kaXY+J1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXRZZWFyc0h0bWw6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBkID0gZHAuZ2V0UGFyc2VkRGF0ZShkYXRlKSxcclxuICAgICAgICAgICAgICAgIGRlY2FkZSA9IGRwLmdldERlY2FkZShkYXRlKSxcclxuICAgICAgICAgICAgICAgIGZpcnN0WWVhciA9IGRlY2FkZVswXSAtIDEsXHJcbiAgICAgICAgICAgICAgICBodG1sID0gJycsXHJcbiAgICAgICAgICAgICAgICBpID0gZmlyc3RZZWFyO1xyXG5cclxuICAgICAgICAgICAgZm9yIChpOyBpIDw9IGRlY2FkZVsxXSArIDE7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaHRtbCArPSB0aGlzLl9nZXRZZWFySHRtbChuZXcgRGF0ZShpICwgMCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0WWVhckh0bWw6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gdGhpcy5fZ2V0Q2VsbENvbnRlbnRzKGRhdGUsICd5ZWFyJyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCInICsgY29udGVudC5jbGFzc2VzICsgJ1wiIGRhdGEteWVhcj1cIicgKyBkYXRlLmdldEZ1bGxZZWFyKCkgKyAnXCI+JyArIGNvbnRlbnQuaHRtbCArICc8L2Rpdj4nXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3JlbmRlclR5cGVzOiB7XHJcbiAgICAgICAgICAgIGRheXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkYXlOYW1lcyA9IHRoaXMuX2dldERheU5hbWVzSHRtbCh0aGlzLmQubG9jLmZpcnN0RGF5KSxcclxuICAgICAgICAgICAgICAgICAgICBkYXlzID0gdGhpcy5fZ2V0RGF5c0h0bWwodGhpcy5kLmN1cnJlbnREYXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjZWxscy5odG1sKGRheXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kbmFtZXMuaHRtbChkYXlOYW1lcylcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbW9udGhzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IHRoaXMuX2dldE1vbnRoc0h0bWwodGhpcy5kLmN1cnJlbnREYXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjZWxscy5odG1sKGh0bWwpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHllYXJzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IHRoaXMuX2dldFllYXJzSHRtbCh0aGlzLmQuY3VycmVudERhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuJGNlbGxzLmh0bWwoaHRtbClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9yZW5kZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5vbmx5VGltZXBpY2tlcikgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJUeXBlc1t0aGlzLnR5cGVdLmJpbmQodGhpcykoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfdXBkYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciAkY2VsbHMgPSAkKCcuZGF0ZXBpY2tlci0tY2VsbCcsIHRoaXMuJGNlbGxzKSxcclxuICAgICAgICAgICAgICAgIF90aGlzID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIGNsYXNzZXMsXHJcbiAgICAgICAgICAgICAgICAkY2VsbCxcclxuICAgICAgICAgICAgICAgIGRhdGU7XHJcbiAgICAgICAgICAgICRjZWxscy5lYWNoKGZ1bmN0aW9uIChjZWxsLCBpKSB7XHJcbiAgICAgICAgICAgICAgICAkY2VsbCA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBkYXRlID0gX3RoaXMuZC5fZ2V0RGF0ZUZyb21DZWxsKCQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgY2xhc3NlcyA9IF90aGlzLl9nZXRDZWxsQ29udGVudHMoZGF0ZSwgX3RoaXMuZC5jZWxsVHlwZSk7XHJcbiAgICAgICAgICAgICAgICAkY2VsbC5hdHRyKCdjbGFzcycsY2xhc3Nlcy5jbGFzc2VzKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzaG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMub25seVRpbWVwaWNrZXIpIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy4kZWwuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB0aGlzLmFjaXR2ZSA9IHRydWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaGlkZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gIEV2ZW50c1xyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICAgICAgX2hhbmRsZUNsaWNrOiBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGUgPSBlbC5kYXRhKCdkYXRlJykgfHwgMSxcclxuICAgICAgICAgICAgICAgIG1vbnRoID0gZWwuZGF0YSgnbW9udGgnKSB8fCAwLFxyXG4gICAgICAgICAgICAgICAgeWVhciA9IGVsLmRhdGEoJ3llYXInKSB8fCB0aGlzLmQucGFyc2VkRGF0ZS55ZWFyLFxyXG4gICAgICAgICAgICAgICAgZHAgPSB0aGlzLmQ7XHJcbiAgICAgICAgICAgIC8vIENoYW5nZSB2aWV3IGlmIG1pbiB2aWV3IGRvZXMgbm90IHJlYWNoIHlldFxyXG4gICAgICAgICAgICBpZiAoZHAudmlldyAhPSB0aGlzLm9wdHMubWluVmlldykge1xyXG4gICAgICAgICAgICAgICAgZHAuZG93bihuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF0ZSkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFNlbGVjdCBkYXRlIGlmIG1pbiB2aWV3IGlzIHJlYWNoZWRcclxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkRGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCBkYXRlKSxcclxuICAgICAgICAgICAgICAgIGFscmVhZHlTZWxlY3RlZCA9IHRoaXMuZC5faXNTZWxlY3RlZChzZWxlY3RlZERhdGUsIHRoaXMuZC5jZWxsVHlwZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWFscmVhZHlTZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgZHAuX3RyaWdnZXIoJ2NsaWNrQ2VsbCcsIHNlbGVjdGVkRGF0ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRwLl9oYW5kbGVBbHJlYWR5U2VsZWN0ZWREYXRlcy5iaW5kKGRwLCBhbHJlYWR5U2VsZWN0ZWQsIHNlbGVjdGVkRGF0ZSkoKTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uQ2xpY2tDZWxsOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgJGVsID0gJChlLnRhcmdldCkuY2xvc2VzdCgnLmRhdGVwaWNrZXItLWNlbGwnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICgkZWwuaGFzQ2xhc3MoJy1kaXNhYmxlZC0nKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlQ2xpY2suYmluZCh0aGlzKSgkZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0pKCk7XHJcblxyXG47KGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB0ZW1wbGF0ZSA9ICcnICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLW5hdi1hY3Rpb25cIiBkYXRhLWFjdGlvbj1cInByZXZcIj4je3ByZXZIdG1sfTwvZGl2PicgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tbmF2LXRpdGxlXCI+I3t0aXRsZX08L2Rpdj4nICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLW5hdi1hY3Rpb25cIiBkYXRhLWFjdGlvbj1cIm5leHRcIj4je25leHRIdG1sfTwvZGl2PicsXHJcbiAgICAgICAgYnV0dG9uc0NvbnRhaW5lclRlbXBsYXRlID0gJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1idXR0b25zXCI+PC9kaXY+JyxcclxuICAgICAgICBidXR0b24gPSAnPHNwYW4gY2xhc3M9XCJkYXRlcGlja2VyLS1idXR0b25cIiBkYXRhLWFjdGlvbj1cIiN7YWN0aW9ufVwiPiN7bGFiZWx9PC9zcGFuPicsXHJcbiAgICAgICAgZGF0ZXBpY2tlciA9ICQuZm4uZGF0ZXBpY2tlcixcclxuICAgICAgICBkcCA9IGRhdGVwaWNrZXIuQ29uc3RydWN0b3I7XHJcblxyXG4gICAgZGF0ZXBpY2tlci5OYXZpZ2F0aW9uID0gZnVuY3Rpb24gKGQsIG9wdHMpIHtcclxuICAgICAgICB0aGlzLmQgPSBkO1xyXG4gICAgICAgIHRoaXMub3B0cyA9IG9wdHM7XHJcblxyXG4gICAgICAgIHRoaXMuJGJ1dHRvbnNDb250YWluZXIgPSAnJztcclxuXHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIuTmF2aWdhdGlvbi5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9idWlsZEJhc2VIdG1sKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2JpbmRFdmVudHMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYmluZEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLmQuJG5hdi5vbignY2xpY2snLCAnLmRhdGVwaWNrZXItLW5hdi1hY3Rpb24nLCAkLnByb3h5KHRoaXMuX29uQ2xpY2tOYXZCdXR0b24sIHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy5kLiRuYXYub24oJ2NsaWNrJywgJy5kYXRlcGlja2VyLS1uYXYtdGl0bGUnLCAkLnByb3h5KHRoaXMuX29uQ2xpY2tOYXZUaXRsZSwgdGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLmQuJGRhdGVwaWNrZXIub24oJ2NsaWNrJywgJy5kYXRlcGlja2VyLS1idXR0b24nLCAkLnByb3h5KHRoaXMuX29uQ2xpY2tOYXZCdXR0b24sIHRoaXMpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYnVpbGRCYXNlSHRtbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0cy5vbmx5VGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fYWRkQnV0dG9uc0lmTmVlZCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9hZGRCdXR0b25zSWZOZWVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMudG9kYXlCdXR0b24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZEJ1dHRvbigndG9kYXknKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuY2xlYXJCdXR0b24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZEJ1dHRvbignY2xlYXInKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3JlbmRlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLl9nZXRUaXRsZSh0aGlzLmQuY3VycmVudERhdGUpLFxyXG4gICAgICAgICAgICAgICAgaHRtbCA9IGRwLnRlbXBsYXRlKHRlbXBsYXRlLCAkLmV4dGVuZCh7dGl0bGU6IHRpdGxlfSwgdGhpcy5vcHRzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuZC4kbmF2Lmh0bWwoaHRtbCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmQudmlldyA9PSAneWVhcnMnKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuZGF0ZXBpY2tlci0tbmF2LXRpdGxlJywgdGhpcy5kLiRuYXYpLmFkZENsYXNzKCctZGlzYWJsZWQtJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zZXROYXZTdGF0dXMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0VGl0bGU6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmQuZm9ybWF0RGF0ZSh0aGlzLm9wdHMubmF2VGl0bGVzW3RoaXMuZC52aWV3XSwgZGF0ZSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYWRkQnV0dG9uOiBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuJGJ1dHRvbnNDb250YWluZXIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hZGRCdXR0b25zQ29udGFpbmVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogdHlwZSxcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogdGhpcy5kLmxvY1t0eXBlXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGh0bWwgPSBkcC50ZW1wbGF0ZShidXR0b24sIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCQoJ1tkYXRhLWFjdGlvbj0nICsgdHlwZSArICddJywgdGhpcy4kYnV0dG9uc0NvbnRhaW5lcikubGVuZ3RoKSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuJGJ1dHRvbnNDb250YWluZXIuYXBwZW5kKGh0bWwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9hZGRCdXR0b25zQ29udGFpbmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZC4kZGF0ZXBpY2tlci5hcHBlbmQoYnV0dG9uc0NvbnRhaW5lclRlbXBsYXRlKTtcclxuICAgICAgICAgICAgdGhpcy4kYnV0dG9uc0NvbnRhaW5lciA9ICQoJy5kYXRlcGlja2VyLS1idXR0b25zJywgdGhpcy5kLiRkYXRlcGlja2VyKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXROYXZTdGF0dXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCEodGhpcy5vcHRzLm1pbkRhdGUgfHwgdGhpcy5vcHRzLm1heERhdGUpIHx8ICF0aGlzLm9wdHMuZGlzYWJsZU5hdldoZW5PdXRPZlJhbmdlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB2YXIgZGF0ZSA9IHRoaXMuZC5wYXJzZWREYXRlLFxyXG4gICAgICAgICAgICAgICAgbSA9IGRhdGUubW9udGgsXHJcbiAgICAgICAgICAgICAgICB5ID0gZGF0ZS55ZWFyLFxyXG4gICAgICAgICAgICAgICAgZCA9IGRhdGUuZGF0ZTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kLnZpZXcpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2RheXMnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kLl9pc0luUmFuZ2UobmV3IERhdGUoeSwgbS0xLCAxKSwgJ21vbnRoJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzYWJsZU5hdigncHJldicpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kLl9pc0luUmFuZ2UobmV3IERhdGUoeSwgbSsxLCAxKSwgJ21vbnRoJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzYWJsZU5hdignbmV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbW9udGhzJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZC5faXNJblJhbmdlKG5ldyBEYXRlKHktMSwgbSwgZCksICd5ZWFyJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzYWJsZU5hdigncHJldicpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kLl9pc0luUmFuZ2UobmV3IERhdGUoeSsxLCBtLCBkKSwgJ3llYXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlTmF2KCduZXh0JylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd5ZWFycyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlY2FkZSA9IGRwLmdldERlY2FkZSh0aGlzLmQuZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmQuX2lzSW5SYW5nZShuZXcgRGF0ZShkZWNhZGVbMF0gLSAxLCAwLCAxKSwgJ3llYXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlTmF2KCdwcmV2JylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmQuX2lzSW5SYW5nZShuZXcgRGF0ZShkZWNhZGVbMV0gKyAxLCAwLCAxKSwgJ3llYXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlTmF2KCduZXh0JylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZGlzYWJsZU5hdjogZnVuY3Rpb24gKG5hdikge1xyXG4gICAgICAgICAgICAkKCdbZGF0YS1hY3Rpb249XCInICsgbmF2ICsgJ1wiXScsIHRoaXMuZC4kbmF2KS5hZGRDbGFzcygnLWRpc2FibGVkLScpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2FjdGl2YXRlTmF2OiBmdW5jdGlvbiAobmF2KSB7XHJcbiAgICAgICAgICAgICQoJ1tkYXRhLWFjdGlvbj1cIicgKyBuYXYgKyAnXCJdJywgdGhpcy5kLiRuYXYpLnJlbW92ZUNsYXNzKCctZGlzYWJsZWQtJylcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25DbGlja05hdkJ1dHRvbjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyICRlbCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJ1tkYXRhLWFjdGlvbl0nKSxcclxuICAgICAgICAgICAgICAgIGFjdGlvbiA9ICRlbC5kYXRhKCdhY3Rpb24nKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZFthY3Rpb25dKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uQ2xpY2tOYXZUaXRsZTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKCQoZS50YXJnZXQpLmhhc0NsYXNzKCctZGlzYWJsZWQtJykpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmQudmlldyA9PSAnZGF5cycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmQudmlldyA9ICdtb250aHMnXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZC52aWV3ID0gJ3llYXJzJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cclxuOyhmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdGVtcGxhdGUgPSAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLXRpbWVcIj4nICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLXRpbWUtY3VycmVudFwiPicgK1xyXG4gICAgICAgICcgICA8c3BhbiBjbGFzcz1cImRhdGVwaWNrZXItLXRpbWUtY3VycmVudC1ob3Vyc1wiPiN7aG91clZpc2libGV9PC9zcGFuPicgK1xyXG4gICAgICAgICcgICA8c3BhbiBjbGFzcz1cImRhdGVwaWNrZXItLXRpbWUtY3VycmVudC1jb2xvblwiPjo8L3NwYW4+JyArXHJcbiAgICAgICAgJyAgIDxzcGFuIGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LW1pbnV0ZXNcIj4je21pblZhbHVlfTwvc3Bhbj4nICtcclxuICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lLXNsaWRlcnNcIj4nICtcclxuICAgICAgICAnICAgPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLXRpbWUtcm93XCI+JyArXHJcbiAgICAgICAgJyAgICAgIDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBuYW1lPVwiaG91cnNcIiB2YWx1ZT1cIiN7aG91clZhbHVlfVwiIG1pbj1cIiN7aG91ck1pbn1cIiBtYXg9XCIje2hvdXJNYXh9XCIgc3RlcD1cIiN7aG91clN0ZXB9XCIvPicgK1xyXG4gICAgICAgICcgICA8L2Rpdj4nICtcclxuICAgICAgICAnICAgPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLXRpbWUtcm93XCI+JyArXHJcbiAgICAgICAgJyAgICAgIDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBuYW1lPVwibWludXRlc1wiIHZhbHVlPVwiI3ttaW5WYWx1ZX1cIiBtaW49XCIje21pbk1pbn1cIiBtYXg9XCIje21pbk1heH1cIiBzdGVwPVwiI3ttaW5TdGVwfVwiLz4nICtcclxuICAgICAgICAnICAgPC9kaXY+JyArXHJcbiAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICc8L2Rpdj4nLFxyXG4gICAgICAgIGRhdGVwaWNrZXIgPSAkLmZuLmRhdGVwaWNrZXIsXHJcbiAgICAgICAgZHAgPSBkYXRlcGlja2VyLkNvbnN0cnVjdG9yO1xyXG5cclxuICAgIGRhdGVwaWNrZXIuVGltZXBpY2tlciA9IGZ1bmN0aW9uIChpbnN0LCBvcHRzKSB7XHJcbiAgICAgICAgdGhpcy5kID0gaW5zdDtcclxuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xyXG5cclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgZGF0ZXBpY2tlci5UaW1lcGlja2VyLnByb3RvdHlwZSA9IHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnB1dCA9ICdpbnB1dCc7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldFRpbWUodGhpcy5kLmRhdGUpO1xyXG4gICAgICAgICAgICB0aGlzLl9idWlsZEhUTUwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC90cmlkZW50L2dpKSkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXQgPSAnY2hhbmdlJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5kLiRlbC5vbignc2VsZWN0RGF0ZScsIHRoaXMuX29uU2VsZWN0RGF0ZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kcmFuZ2VzLm9uKGlucHV0LCB0aGlzLl9vbkNoYW5nZVJhbmdlLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRyYW5nZXMub24oJ21vdXNldXAnLCB0aGlzLl9vbk1vdXNlVXBSYW5nZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kcmFuZ2VzLm9uKCdtb3VzZW1vdmUgZm9jdXMgJywgdGhpcy5fb25Nb3VzZUVudGVyUmFuZ2UuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJHJhbmdlcy5vbignbW91c2VvdXQgYmx1cicsIHRoaXMuX29uTW91c2VPdXRSYW5nZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2V0VGltZTogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdmFyIF9kYXRlID0gZHAuZ2V0UGFyc2VkRGF0ZShkYXRlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZURhdGUoZGF0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuaG91cnMgPSBfZGF0ZS5ob3VycyA8IHRoaXMubWluSG91cnMgPyB0aGlzLm1pbkhvdXJzIDogX2RhdGUuaG91cnM7XHJcbiAgICAgICAgICAgIHRoaXMubWludXRlcyA9IF9kYXRlLm1pbnV0ZXMgPCB0aGlzLm1pbk1pbnV0ZXMgPyB0aGlzLm1pbk1pbnV0ZXMgOiBfZGF0ZS5taW51dGVzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldHMgbWluSG91cnMgYW5kIG1pbk1pbnV0ZXMgZnJvbSBkYXRlICh1c3VhbGx5IGl0J3MgYSBtaW5EYXRlKVxyXG4gICAgICAgICAqIEFsc28gY2hhbmdlcyBtaW5NaW51dGVzIGlmIGN1cnJlbnQgaG91cnMgYXJlIGJpZ2dlciB0aGVuIEBkYXRlIGhvdXJzXHJcbiAgICAgICAgICogQHBhcmFtIGRhdGUge0RhdGV9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc2V0TWluVGltZUZyb21EYXRlOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm1pbkhvdXJzID0gZGF0ZS5nZXRIb3VycygpO1xyXG4gICAgICAgICAgICB0aGlzLm1pbk1pbnV0ZXMgPSBkYXRlLmdldE1pbnV0ZXMoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIElmLCBmb3IgZXhhbXBsZSwgbWluIGhvdXJzIGFyZSAxMCwgYW5kIGN1cnJlbnQgaG91cnMgYXJlIDEyLFxyXG4gICAgICAgICAgICAvLyB1cGRhdGUgbWluTWludXRlcyB0byBkZWZhdWx0IHZhbHVlLCB0byBiZSBhYmxlIHRvIGNob29zZSB3aG9sZSByYW5nZSBvZiB2YWx1ZXNcclxuICAgICAgICAgICAgaWYgKHRoaXMuZC5sYXN0U2VsZWN0ZWREYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kLmxhc3RTZWxlY3RlZERhdGUuZ2V0SG91cnMoKSA+IGRhdGUuZ2V0SG91cnMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWluTWludXRlcyA9IHRoaXMub3B0cy5taW5NaW51dGVzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3NldE1heFRpbWVGcm9tRGF0ZTogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXhIb3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcclxuICAgICAgICAgICAgdGhpcy5tYXhNaW51dGVzID0gZGF0ZS5nZXRNaW51dGVzKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5kLmxhc3RTZWxlY3RlZERhdGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmQubGFzdFNlbGVjdGVkRGF0ZS5nZXRIb3VycygpIDwgZGF0ZS5nZXRIb3VycygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhNaW51dGVzID0gdGhpcy5vcHRzLm1heE1pbnV0ZXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2V0RGVmYXVsdE1pbk1heFRpbWU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG1heEhvdXJzID0gMjMsXHJcbiAgICAgICAgICAgICAgICBtYXhNaW51dGVzID0gNTksXHJcbiAgICAgICAgICAgICAgICBvcHRzID0gdGhpcy5vcHRzO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5taW5Ib3VycyA9IG9wdHMubWluSG91cnMgPCAwIHx8IG9wdHMubWluSG91cnMgPiBtYXhIb3VycyA/IDAgOiBvcHRzLm1pbkhvdXJzO1xyXG4gICAgICAgICAgICB0aGlzLm1pbk1pbnV0ZXMgPSBvcHRzLm1pbk1pbnV0ZXMgPCAwIHx8IG9wdHMubWluTWludXRlcyA+IG1heE1pbnV0ZXMgPyAwIDogb3B0cy5taW5NaW51dGVzO1xyXG4gICAgICAgICAgICB0aGlzLm1heEhvdXJzID0gb3B0cy5tYXhIb3VycyA8IDAgfHwgb3B0cy5tYXhIb3VycyA+IG1heEhvdXJzID8gbWF4SG91cnMgOiBvcHRzLm1heEhvdXJzO1xyXG4gICAgICAgICAgICB0aGlzLm1heE1pbnV0ZXMgPSBvcHRzLm1heE1pbnV0ZXMgPCAwIHx8IG9wdHMubWF4TWludXRlcyA+IG1heE1pbnV0ZXMgPyBtYXhNaW51dGVzIDogb3B0cy5tYXhNaW51dGVzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIExvb2tzIGZvciBtaW4vbWF4IGhvdXJzL21pbnV0ZXMgYW5kIGlmIGN1cnJlbnQgdmFsdWVzXHJcbiAgICAgICAgICogYXJlIG91dCBvZiByYW5nZSBzZXRzIHZhbGlkIHZhbHVlcy5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF92YWxpZGF0ZUhvdXJzTWludXRlczogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaG91cnMgPCB0aGlzLm1pbkhvdXJzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhvdXJzID0gdGhpcy5taW5Ib3VycztcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmhvdXJzID4gdGhpcy5tYXhIb3Vycykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ob3VycyA9IHRoaXMubWF4SG91cnM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1pbnV0ZXMgPCB0aGlzLm1pbk1pbnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWludXRlcyA9IHRoaXMubWluTWludXRlcztcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1pbnV0ZXMgPiB0aGlzLm1heE1pbnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWludXRlcyA9IHRoaXMubWF4TWludXRlcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9idWlsZEhUTUw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGx6ID0gZHAuZ2V0TGVhZGluZ1plcm9OdW0sXHJcbiAgICAgICAgICAgICAgICBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvdXJNaW46IHRoaXMubWluSG91cnMsXHJcbiAgICAgICAgICAgICAgICAgICAgaG91ck1heDogbHoodGhpcy5tYXhIb3VycyksXHJcbiAgICAgICAgICAgICAgICAgICAgaG91clN0ZXA6IHRoaXMub3B0cy5ob3Vyc1N0ZXAsXHJcbiAgICAgICAgICAgICAgICAgICAgaG91clZhbHVlOiB0aGlzLmhvdXJzLFxyXG4gICAgICAgICAgICAgICAgICAgIGhvdXJWaXNpYmxlOiBseih0aGlzLmRpc3BsYXlIb3VycyksXHJcbiAgICAgICAgICAgICAgICAgICAgbWluTWluOiB0aGlzLm1pbk1pbnV0ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgbWluTWF4OiBseih0aGlzLm1heE1pbnV0ZXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pblN0ZXA6IHRoaXMub3B0cy5taW51dGVzU3RlcCxcclxuICAgICAgICAgICAgICAgICAgICBtaW5WYWx1ZTogbHoodGhpcy5taW51dGVzKVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIF90ZW1wbGF0ZSA9IGRwLnRlbXBsYXRlKHRlbXBsYXRlLCBkYXRhKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJHRpbWVwaWNrZXIgPSAkKF90ZW1wbGF0ZSkuYXBwZW5kVG8odGhpcy5kLiRkYXRlcGlja2VyKTtcclxuICAgICAgICAgICAgdGhpcy4kcmFuZ2VzID0gJCgnW3R5cGU9XCJyYW5nZVwiXScsIHRoaXMuJHRpbWVwaWNrZXIpO1xyXG4gICAgICAgICAgICB0aGlzLiRob3VycyA9ICQoJ1tuYW1lPVwiaG91cnNcIl0nLCB0aGlzLiR0aW1lcGlja2VyKTtcclxuICAgICAgICAgICAgdGhpcy4kbWludXRlcyA9ICQoJ1tuYW1lPVwibWludXRlc1wiXScsIHRoaXMuJHRpbWVwaWNrZXIpO1xyXG4gICAgICAgICAgICB0aGlzLiRob3Vyc1RleHQgPSAkKCcuZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LWhvdXJzJywgdGhpcy4kdGltZXBpY2tlcik7XHJcbiAgICAgICAgICAgIHRoaXMuJG1pbnV0ZXNUZXh0ID0gJCgnLmRhdGVwaWNrZXItLXRpbWUtY3VycmVudC1taW51dGVzJywgdGhpcy4kdGltZXBpY2tlcik7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5kLmFtcG0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGFtcG0gPSAkKCc8c3BhbiBjbGFzcz1cImRhdGVwaWNrZXItLXRpbWUtY3VycmVudC1hbXBtXCI+JylcclxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oJCgnLmRhdGVwaWNrZXItLXRpbWUtY3VycmVudCcsIHRoaXMuJHRpbWVwaWNrZXIpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5odG1sKHRoaXMuZGF5UGVyaW9kKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiR0aW1lcGlja2VyLmFkZENsYXNzKCctYW0tcG0tJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfdXBkYXRlQ3VycmVudFRpbWU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGggPSAgZHAuZ2V0TGVhZGluZ1plcm9OdW0odGhpcy5kaXNwbGF5SG91cnMpLFxyXG4gICAgICAgICAgICAgICAgbSA9IGRwLmdldExlYWRpbmdaZXJvTnVtKHRoaXMubWludXRlcyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRob3Vyc1RleHQuaHRtbChoKTtcclxuICAgICAgICAgICAgdGhpcy4kbWludXRlc1RleHQuaHRtbChtKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmQuYW1wbSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kYW1wbS5odG1sKHRoaXMuZGF5UGVyaW9kKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF91cGRhdGVSYW5nZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy4kaG91cnMuYXR0cih7XHJcbiAgICAgICAgICAgICAgICBtaW46IHRoaXMubWluSG91cnMsXHJcbiAgICAgICAgICAgICAgICBtYXg6IHRoaXMubWF4SG91cnNcclxuICAgICAgICAgICAgfSkudmFsKHRoaXMuaG91cnMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy4kbWludXRlcy5hdHRyKHtcclxuICAgICAgICAgICAgICAgIG1pbjogdGhpcy5taW5NaW51dGVzLFxyXG4gICAgICAgICAgICAgICAgbWF4OiB0aGlzLm1heE1pbnV0ZXNcclxuICAgICAgICAgICAgfSkudmFsKHRoaXMubWludXRlcylcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTZXRzIG1pbkhvdXJzLCBtaW5NaW51dGVzIGV0Yy4gZnJvbSBkYXRlLiBJZiBkYXRlIGlzIG5vdCBwYXNzZWQsIHRoYW4gc2V0c1xyXG4gICAgICAgICAqIHZhbHVlcyBmcm9tIG9wdGlvbnNcclxuICAgICAgICAgKiBAcGFyYW0gW2RhdGVdIHtvYmplY3R9IC0gRGF0ZSBvYmplY3QsIHRvIGdldCB2YWx1ZXMgZnJvbVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2hhbmRsZURhdGU6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldERlZmF1bHRNaW5NYXhUaW1lKCk7XHJcbiAgICAgICAgICAgIGlmIChkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZHAuaXNTYW1lKGRhdGUsIHRoaXMuZC5vcHRzLm1pbkRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0TWluVGltZUZyb21EYXRlKHRoaXMuZC5vcHRzLm1pbkRhdGUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkcC5pc1NhbWUoZGF0ZSwgdGhpcy5kLm9wdHMubWF4RGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRNYXhUaW1lRnJvbURhdGUodGhpcy5kLm9wdHMubWF4RGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbGlkYXRlSG91cnNNaW51dGVzKGRhdGUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVSYW5nZXMoKTtcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlQ3VycmVudFRpbWUoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYWxjdWxhdGVzIHZhbGlkIGhvdXIgdmFsdWUgdG8gZGlzcGxheSBpbiB0ZXh0IGlucHV0IGFuZCBkYXRlcGlja2VyJ3MgYm9keS5cclxuICAgICAgICAgKiBAcGFyYW0gZGF0ZSB7RGF0ZXxOdW1iZXJ9IC0gZGF0ZSBvciBob3Vyc1xyXG4gICAgICAgICAqIEBwYXJhbSBbYW1wbV0ge0Jvb2xlYW59IC0gMTIgaG91cnMgbW9kZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHt7aG91cnM6ICosIGRheVBlcmlvZDogc3RyaW5nfX1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9nZXRWYWxpZEhvdXJzRnJvbURhdGU6IGZ1bmN0aW9uIChkYXRlLCBhbXBtKSB7XHJcbiAgICAgICAgICAgIHZhciBkID0gZGF0ZSxcclxuICAgICAgICAgICAgICAgIGhvdXJzID0gZGF0ZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRlIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgZCA9IGRwLmdldFBhcnNlZERhdGUoZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBob3VycyA9IGQuaG91cnM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBfYW1wbSA9IGFtcG0gfHwgdGhpcy5kLmFtcG0sXHJcbiAgICAgICAgICAgICAgICBkYXlQZXJpb2QgPSAnYW0nO1xyXG5cclxuICAgICAgICAgICAgaWYgKF9hbXBtKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2godHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgaG91cnMgPT0gMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG91cnMgPSAxMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBob3VycyA9PSAxMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5UGVyaW9kID0gJ3BtJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBob3VycyA+IDExOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBob3VycyA9IGhvdXJzIC0gMTI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheVBlcmlvZCA9ICdwbSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaG91cnM6IGhvdXJzLFxyXG4gICAgICAgICAgICAgICAgZGF5UGVyaW9kOiBkYXlQZXJpb2RcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldCBob3VycyAodmFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hvdXJzID0gdmFsO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRpc3BsYXlIb3VycyA9IHRoaXMuX2dldFZhbGlkSG91cnNGcm9tRGF0ZSh2YWwpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5SG91cnMgPSBkaXNwbGF5SG91cnMuaG91cnM7XHJcbiAgICAgICAgICAgIHRoaXMuZGF5UGVyaW9kID0gZGlzcGxheUhvdXJzLmRheVBlcmlvZDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXQgaG91cnMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ob3VycztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyAgRXZlbnRzXHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgICAgICBfb25DaGFuZ2VSYW5nZTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyICR0YXJnZXQgPSAkKGUudGFyZ2V0KSxcclxuICAgICAgICAgICAgICAgIG5hbWUgPSAkdGFyZ2V0LmF0dHIoJ25hbWUnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuZC50aW1lcGlja2VySXNBY3RpdmUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdGhpc1tuYW1lXSA9ICR0YXJnZXQudmFsKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUN1cnJlbnRUaW1lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZC5fdHJpZ2dlcigndGltZUNoYW5nZScsIFt0aGlzLmhvdXJzLCB0aGlzLm1pbnV0ZXNdKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZURhdGUodGhpcy5kLmxhc3RTZWxlY3RlZERhdGUpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uU2VsZWN0RGF0ZTogZnVuY3Rpb24gKGUsIGRhdGEpIHtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlRGF0ZShkYXRhKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25Nb3VzZUVudGVyUmFuZ2U6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gJChlLnRhcmdldCkuYXR0cignbmFtZScpO1xyXG4gICAgICAgICAgICAkKCcuZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LScgKyBuYW1lLCB0aGlzLiR0aW1lcGlja2VyKS5hZGRDbGFzcygnLWZvY3VzLScpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbk1vdXNlT3V0UmFuZ2U6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gJChlLnRhcmdldCkuYXR0cignbmFtZScpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kLmluRm9jdXMpIHJldHVybjsgLy8gUHJldmVudCByZW1vdmluZyBmb2N1cyB3aGVuIG1vdXNlIG91dCBvZiByYW5nZSBzbGlkZXJcclxuICAgICAgICAgICAgJCgnLmRhdGVwaWNrZXItLXRpbWUtY3VycmVudC0nICsgbmFtZSwgdGhpcy4kdGltZXBpY2tlcikucmVtb3ZlQ2xhc3MoJy1mb2N1cy0nKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25Nb3VzZVVwUmFuZ2U6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZC50aW1lcGlja2VySXNBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KSgpO1xyXG4gfSkod2luZG93LCBqUXVlcnkpOyIsIi8qISBub3Vpc2xpZGVyIC0gMTQuNS4wIC0gNS8xMS8yMDIwICovXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAvLyBOb2RlL0NvbW1vbkpTXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgICAgICB3aW5kb3cubm9VaVNsaWRlciA9IGZhY3RvcnkoKTtcbiAgICB9XG59KShmdW5jdGlvbigpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIHZhciBWRVJTSU9OID0gXCIxNC41LjBcIjtcblxuICAgIC8vcmVnaW9uIEhlbHBlciBNZXRob2RzXG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRm9ybWF0dGVyKGVudHJ5KSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGVudHJ5LnRvID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGVudHJ5LmZyb20gPT09IFwiZnVuY3Rpb25cIjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVFbGVtZW50KGVsKSB7XG4gICAgICAgIGVsLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoZWwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIEJpbmRhYmxlIHZlcnNpb25cbiAgICBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmVzIGR1cGxpY2F0ZXMgZnJvbSBhbiBhcnJheS5cbiAgICBmdW5jdGlvbiB1bmlxdWUoYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5LmZpbHRlcihmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXNbYV0gPyAodGhpc1thXSA9IHRydWUpIDogZmFsc2U7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9XG5cbiAgICAvLyBSb3VuZCBhIHZhbHVlIHRvIHRoZSBjbG9zZXN0ICd0bycuXG4gICAgZnVuY3Rpb24gY2xvc2VzdCh2YWx1ZSwgdG8pIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgLyB0bykgKiB0bztcbiAgICB9XG5cbiAgICAvLyBDdXJyZW50IHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gdGhlIGRvY3VtZW50LlxuICAgIGZ1bmN0aW9uIG9mZnNldChlbGVtLCBvcmllbnRhdGlvbikge1xuICAgICAgICB2YXIgcmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIHZhciBkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdmFyIHBhZ2VPZmZzZXQgPSBnZXRQYWdlT2Zmc2V0KGRvYyk7XG5cbiAgICAgICAgLy8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGNvbnRhaW5zIGxlZnQgc2Nyb2xsIGluIENocm9tZSBvbiBBbmRyb2lkLlxuICAgICAgICAvLyBJIGhhdmVuJ3QgZm91bmQgYSBmZWF0dXJlIGRldGVjdGlvbiB0aGF0IHByb3ZlcyB0aGlzLiBXb3JzdCBjYXNlXG4gICAgICAgIC8vIHNjZW5hcmlvIG9uIG1pcy1tYXRjaDogdGhlICd0YXAnIGZlYXR1cmUgb24gaG9yaXpvbnRhbCBzbGlkZXJzIGJyZWFrcy5cbiAgICAgICAgaWYgKC93ZWJraXQuKkNocm9tZS4qTW9iaWxlL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgICAgICAgcGFnZU9mZnNldC54ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcmllbnRhdGlvblxuICAgICAgICAgICAgPyByZWN0LnRvcCArIHBhZ2VPZmZzZXQueSAtIGRvY0VsZW0uY2xpZW50VG9wXG4gICAgICAgICAgICA6IHJlY3QubGVmdCArIHBhZ2VPZmZzZXQueCAtIGRvY0VsZW0uY2xpZW50TGVmdDtcbiAgICB9XG5cbiAgICAvLyBDaGVja3Mgd2hldGhlciBhIHZhbHVlIGlzIG51bWVyaWNhbC5cbiAgICBmdW5jdGlvbiBpc051bWVyaWMoYSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGEgPT09IFwibnVtYmVyXCIgJiYgIWlzTmFOKGEpICYmIGlzRmluaXRlKGEpO1xuICAgIH1cblxuICAgIC8vIFNldHMgYSBjbGFzcyBhbmQgcmVtb3ZlcyBpdCBhZnRlciBbZHVyYXRpb25dIG1zLlxuICAgIGZ1bmN0aW9uIGFkZENsYXNzRm9yKGVsZW1lbnQsIGNsYXNzTmFtZSwgZHVyYXRpb24pIHtcbiAgICAgICAgaWYgKGR1cmF0aW9uID4gMCkge1xuICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIExpbWl0cyBhIHZhbHVlIHRvIDAgLSAxMDBcbiAgICBmdW5jdGlvbiBsaW1pdChhKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihhLCAxMDApLCAwKTtcbiAgICB9XG5cbiAgICAvLyBXcmFwcyBhIHZhcmlhYmxlIGFzIGFuIGFycmF5LCBpZiBpdCBpc24ndCBvbmUgeWV0LlxuICAgIC8vIE5vdGUgdGhhdCBhbiBpbnB1dCBhcnJheSBpcyByZXR1cm5lZCBieSByZWZlcmVuY2UhXG4gICAgZnVuY3Rpb24gYXNBcnJheShhKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGEpID8gYSA6IFthXTtcbiAgICB9XG5cbiAgICAvLyBDb3VudHMgZGVjaW1hbHNcbiAgICBmdW5jdGlvbiBjb3VudERlY2ltYWxzKG51bVN0cikge1xuICAgICAgICBudW1TdHIgPSBTdHJpbmcobnVtU3RyKTtcbiAgICAgICAgdmFyIHBpZWNlcyA9IG51bVN0ci5zcGxpdChcIi5cIik7XG4gICAgICAgIHJldHVybiBwaWVjZXMubGVuZ3RoID4gMSA/IHBpZWNlc1sxXS5sZW5ndGggOiAwO1xuICAgIH1cblxuICAgIC8vIGh0dHA6Ly95b3VtaWdodG5vdG5lZWRqcXVlcnkuY29tLyNhZGRfY2xhc3NcbiAgICBmdW5jdGlvbiBhZGRDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIGlmIChlbC5jbGFzc0xpc3QgJiYgIS9cXHMvLnRlc3QoY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuY2xhc3NOYW1lICs9IFwiIFwiICsgY2xhc3NOYW1lO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gaHR0cDovL3lvdW1pZ2h0bm90bmVlZGpxdWVyeS5jb20vI3JlbW92ZV9jbGFzc1xuICAgIGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsLCBjbGFzc05hbWUpIHtcbiAgICAgICAgaWYgKGVsLmNsYXNzTGlzdCAmJiAhL1xccy8udGVzdChjbGFzc05hbWUpKSB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShcbiAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKFwiKF58XFxcXGIpXCIgKyBjbGFzc05hbWUuc3BsaXQoXCIgXCIpLmpvaW4oXCJ8XCIpICsgXCIoXFxcXGJ8JClcIiwgXCJnaVwiKSxcbiAgICAgICAgICAgICAgICBcIiBcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vcGxhaW5qcy5jb20vamF2YXNjcmlwdC9hdHRyaWJ1dGVzL2FkZGluZy1yZW1vdmluZy1hbmQtdGVzdGluZy1mb3ItY2xhc3Nlcy05L1xuICAgIGZ1bmN0aW9uIGhhc0NsYXNzKGVsLCBjbGFzc05hbWUpIHtcbiAgICAgICAgcmV0dXJuIGVsLmNsYXNzTGlzdFxuICAgICAgICAgICAgPyBlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKVxuICAgICAgICAgICAgOiBuZXcgUmVnRXhwKFwiXFxcXGJcIiArIGNsYXNzTmFtZSArIFwiXFxcXGJcIikudGVzdChlbC5jbGFzc05hbWUpO1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvc2Nyb2xsWSNOb3Rlc1xuICAgIGZ1bmN0aW9uIGdldFBhZ2VPZmZzZXQoZG9jKSB7XG4gICAgICAgIHZhciBzdXBwb3J0UGFnZU9mZnNldCA9IHdpbmRvdy5wYWdlWE9mZnNldCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgaXNDU1MxQ29tcGF0ID0gKGRvYy5jb21wYXRNb2RlIHx8IFwiXCIpID09PSBcIkNTUzFDb21wYXRcIjtcbiAgICAgICAgdmFyIHggPSBzdXBwb3J0UGFnZU9mZnNldFxuICAgICAgICAgICAgPyB3aW5kb3cucGFnZVhPZmZzZXRcbiAgICAgICAgICAgIDogaXNDU1MxQ29tcGF0XG4gICAgICAgICAgICAgICAgPyBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnRcbiAgICAgICAgICAgICAgICA6IGRvYy5ib2R5LnNjcm9sbExlZnQ7XG4gICAgICAgIHZhciB5ID0gc3VwcG9ydFBhZ2VPZmZzZXRcbiAgICAgICAgICAgID8gd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgICAgICAgICA6IGlzQ1NTMUNvbXBhdFxuICAgICAgICAgICAgICAgID8gZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcbiAgICAgICAgICAgICAgICA6IGRvYy5ib2R5LnNjcm9sbFRvcDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgIHk6IHlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyB3ZSBwcm92aWRlIGEgZnVuY3Rpb24gdG8gY29tcHV0ZSBjb25zdGFudHMgaW5zdGVhZFxuICAgIC8vIG9mIGFjY2Vzc2luZyB3aW5kb3cuKiBhcyBzb29uIGFzIHRoZSBtb2R1bGUgbmVlZHMgaXRcbiAgICAvLyBzbyB0aGF0IHdlIGRvIG5vdCBjb21wdXRlIGFueXRoaW5nIGlmIG5vdCBuZWVkZWRcbiAgICBmdW5jdGlvbiBnZXRBY3Rpb25zKCkge1xuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGV2ZW50cyB0byBiaW5kLiBJRTExIGltcGxlbWVudHMgcG9pbnRlckV2ZW50cyB3aXRob3V0XG4gICAgICAgIC8vIGEgcHJlZml4LCB3aGljaCBicmVha3MgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBJRTEwIGltcGxlbWVudGF0aW9uLlxuICAgICAgICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICBzdGFydDogXCJwb2ludGVyZG93blwiLFxuICAgICAgICAgICAgICAgICAgbW92ZTogXCJwb2ludGVybW92ZVwiLFxuICAgICAgICAgICAgICAgICAgZW5kOiBcInBvaW50ZXJ1cFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFwiTVNQb2ludGVyRG93blwiLFxuICAgICAgICAgICAgICAgICAgICAgIG1vdmU6IFwiTVNQb2ludGVyTW92ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIGVuZDogXCJNU1BvaW50ZXJVcFwiXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFwibW91c2Vkb3duIHRvdWNoc3RhcnRcIixcbiAgICAgICAgICAgICAgICAgICAgICBtb3ZlOiBcIm1vdXNlbW92ZSB0b3VjaG1vdmVcIixcbiAgICAgICAgICAgICAgICAgICAgICBlbmQ6IFwibW91c2V1cCB0b3VjaGVuZFwiXG4gICAgICAgICAgICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL0V2ZW50TGlzdGVuZXJPcHRpb25zL2Jsb2IvZ2gtcGFnZXMvZXhwbGFpbmVyLm1kXG4gICAgLy8gSXNzdWUgIzc4NVxuICAgIGZ1bmN0aW9uIGdldFN1cHBvcnRzUGFzc2l2ZSgpIHtcbiAgICAgICAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgXCJwYXNzaXZlXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgbnVsbCwgb3B0cyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cblxuICAgICAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lKCkge1xuICAgICAgICByZXR1cm4gd2luZG93LkNTUyAmJiBDU1Muc3VwcG9ydHMgJiYgQ1NTLnN1cHBvcnRzKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKTtcbiAgICB9XG5cbiAgICAvL2VuZHJlZ2lvblxuXG4gICAgLy9yZWdpb24gUmFuZ2UgQ2FsY3VsYXRpb25cblxuICAgIC8vIERldGVybWluZSB0aGUgc2l6ZSBvZiBhIHN1Yi1yYW5nZSBpbiByZWxhdGlvbiB0byBhIGZ1bGwgcmFuZ2UuXG4gICAgZnVuY3Rpb24gc3ViUmFuZ2VSYXRpbyhwYSwgcGIpIHtcbiAgICAgICAgcmV0dXJuIDEwMCAvIChwYiAtIHBhKTtcbiAgICB9XG5cbiAgICAvLyAocGVyY2VudGFnZSkgSG93IG1hbnkgcGVyY2VudCBpcyB0aGlzIHZhbHVlIG9mIHRoaXMgcmFuZ2U/XG4gICAgZnVuY3Rpb24gZnJvbVBlcmNlbnRhZ2UocmFuZ2UsIHZhbHVlLCBzdGFydFJhbmdlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgKiAxMDApIC8gKHJhbmdlW3N0YXJ0UmFuZ2UgKyAxXSAtIHJhbmdlW3N0YXJ0UmFuZ2VdKTtcbiAgICB9XG5cbiAgICAvLyAocGVyY2VudGFnZSkgV2hlcmUgaXMgdGhpcyB2YWx1ZSBvbiB0aGlzIHJhbmdlP1xuICAgIGZ1bmN0aW9uIHRvUGVyY2VudGFnZShyYW5nZSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZyb21QZXJjZW50YWdlKHJhbmdlLCByYW5nZVswXSA8IDAgPyB2YWx1ZSArIE1hdGguYWJzKHJhbmdlWzBdKSA6IHZhbHVlIC0gcmFuZ2VbMF0sIDApO1xuICAgIH1cblxuICAgIC8vICh2YWx1ZSkgSG93IG11Y2ggaXMgdGhpcyBwZXJjZW50YWdlIG9uIHRoaXMgcmFuZ2U/XG4gICAgZnVuY3Rpb24gaXNQZXJjZW50YWdlKHJhbmdlLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlICogKHJhbmdlWzFdIC0gcmFuZ2VbMF0pKSAvIDEwMCArIHJhbmdlWzBdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEoodmFsdWUsIGFycikge1xuICAgICAgICB2YXIgaiA9IDE7XG5cbiAgICAgICAgd2hpbGUgKHZhbHVlID49IGFycltqXSkge1xuICAgICAgICAgICAgaiArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGo7XG4gICAgfVxuXG4gICAgLy8gKHBlcmNlbnRhZ2UpIElucHV0IGEgdmFsdWUsIGZpbmQgd2hlcmUsIG9uIGEgc2NhbGUgb2YgMC0xMDAsIGl0IGFwcGxpZXMuXG4gICAgZnVuY3Rpb24gdG9TdGVwcGluZyh4VmFsLCB4UGN0LCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPj0geFZhbC5zbGljZSgtMSlbMF0pIHtcbiAgICAgICAgICAgIHJldHVybiAxMDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaiA9IGdldEoodmFsdWUsIHhWYWwpO1xuICAgICAgICB2YXIgdmEgPSB4VmFsW2ogLSAxXTtcbiAgICAgICAgdmFyIHZiID0geFZhbFtqXTtcbiAgICAgICAgdmFyIHBhID0geFBjdFtqIC0gMV07XG4gICAgICAgIHZhciBwYiA9IHhQY3Rbal07XG5cbiAgICAgICAgcmV0dXJuIHBhICsgdG9QZXJjZW50YWdlKFt2YSwgdmJdLCB2YWx1ZSkgLyBzdWJSYW5nZVJhdGlvKHBhLCBwYik7XG4gICAgfVxuXG4gICAgLy8gKHZhbHVlKSBJbnB1dCBhIHBlcmNlbnRhZ2UsIGZpbmQgd2hlcmUgaXQgaXMgb24gdGhlIHNwZWNpZmllZCByYW5nZS5cbiAgICBmdW5jdGlvbiBmcm9tU3RlcHBpbmcoeFZhbCwgeFBjdCwgdmFsdWUpIHtcbiAgICAgICAgLy8gVGhlcmUgaXMgbm8gcmFuZ2UgZ3JvdXAgdGhhdCBmaXRzIDEwMFxuICAgICAgICBpZiAodmFsdWUgPj0gMTAwKSB7XG4gICAgICAgICAgICByZXR1cm4geFZhbC5zbGljZSgtMSlbMF07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaiA9IGdldEoodmFsdWUsIHhQY3QpO1xuICAgICAgICB2YXIgdmEgPSB4VmFsW2ogLSAxXTtcbiAgICAgICAgdmFyIHZiID0geFZhbFtqXTtcbiAgICAgICAgdmFyIHBhID0geFBjdFtqIC0gMV07XG4gICAgICAgIHZhciBwYiA9IHhQY3Rbal07XG5cbiAgICAgICAgcmV0dXJuIGlzUGVyY2VudGFnZShbdmEsIHZiXSwgKHZhbHVlIC0gcGEpICogc3ViUmFuZ2VSYXRpbyhwYSwgcGIpKTtcbiAgICB9XG5cbiAgICAvLyAocGVyY2VudGFnZSkgR2V0IHRoZSBzdGVwIHRoYXQgYXBwbGllcyBhdCBhIGNlcnRhaW4gdmFsdWUuXG4gICAgZnVuY3Rpb24gZ2V0U3RlcCh4UGN0LCB4U3RlcHMsIHNuYXAsIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMTAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaiA9IGdldEoodmFsdWUsIHhQY3QpO1xuICAgICAgICB2YXIgYSA9IHhQY3RbaiAtIDFdO1xuICAgICAgICB2YXIgYiA9IHhQY3Rbal07XG5cbiAgICAgICAgLy8gSWYgJ3NuYXAnIGlzIHNldCwgc3RlcHMgYXJlIHVzZWQgYXMgZml4ZWQgcG9pbnRzIG9uIHRoZSBzbGlkZXIuXG4gICAgICAgIGlmIChzbmFwKSB7XG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IHBvc2l0aW9uLCBhIG9yIGIuXG4gICAgICAgICAgICBpZiAodmFsdWUgLSBhID4gKGIgLSBhKSAvIDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXhTdGVwc1tqIC0gMV0pIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB4UGN0W2ogLSAxXSArIGNsb3Nlc3QodmFsdWUgLSB4UGN0W2ogLSAxXSwgeFN0ZXBzW2ogLSAxXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlRW50cnlQb2ludChpbmRleCwgdmFsdWUsIHRoYXQpIHtcbiAgICAgICAgdmFyIHBlcmNlbnRhZ2U7XG5cbiAgICAgICAgLy8gV3JhcCBudW1lcmljYWwgaW5wdXQgaW4gYW4gYXJyYXkuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHZhbHVlID0gW3ZhbHVlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlamVjdCBhbnkgaW52YWxpZCBpbnB1dCwgYnkgdGVzdGluZyB3aGV0aGVyIHZhbHVlIGlzIGFuIGFycmF5LlxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdyYW5nZScgY29udGFpbnMgaW52YWxpZCB2YWx1ZS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb3ZlcnQgbWluL21heCBzeW50YXggdG8gMCBhbmQgMTAwLlxuICAgICAgICBpZiAoaW5kZXggPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgIHBlcmNlbnRhZ2UgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICBwZXJjZW50YWdlID0gMTAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVyY2VudGFnZSA9IHBhcnNlRmxvYXQoaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIGNvcnJlY3QgaW5wdXQuXG4gICAgICAgIGlmICghaXNOdW1lcmljKHBlcmNlbnRhZ2UpIHx8ICFpc051bWVyaWModmFsdWVbMF0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdyYW5nZScgdmFsdWUgaXNuJ3QgbnVtZXJpYy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSB2YWx1ZXMuXG4gICAgICAgIHRoYXQueFBjdC5wdXNoKHBlcmNlbnRhZ2UpO1xuICAgICAgICB0aGF0LnhWYWwucHVzaCh2YWx1ZVswXSk7XG5cbiAgICAgICAgLy8gTmFOIHdpbGwgZXZhbHVhdGUgdG8gZmFsc2UgdG9vLCBidXQgdG8ga2VlcFxuICAgICAgICAvLyBsb2dnaW5nIGNsZWFyLCBzZXQgc3RlcCBleHBsaWNpdGx5LiBNYWtlIHN1cmVcbiAgICAgICAgLy8gbm90IHRvIG92ZXJyaWRlIHRoZSAnc3RlcCcgc2V0dGluZyB3aXRoIGZhbHNlLlxuICAgICAgICBpZiAoIXBlcmNlbnRhZ2UpIHtcbiAgICAgICAgICAgIGlmICghaXNOYU4odmFsdWVbMV0pKSB7XG4gICAgICAgICAgICAgICAgdGhhdC54U3RlcHNbMF0gPSB2YWx1ZVsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoYXQueFN0ZXBzLnB1c2goaXNOYU4odmFsdWVbMV0pID8gZmFsc2UgOiB2YWx1ZVsxXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGF0LnhIaWdoZXN0Q29tcGxldGVTdGVwLnB1c2goMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RlcFBvaW50KGksIG4sIHRoYXQpIHtcbiAgICAgICAgLy8gSWdub3JlICdmYWxzZScgc3RlcHBpbmcuXG4gICAgICAgIGlmICghbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RlcCBvdmVyIHplcm8tbGVuZ3RoIHJhbmdlcyAoIzk0OCk7XG4gICAgICAgIGlmICh0aGF0LnhWYWxbaV0gPT09IHRoYXQueFZhbFtpICsgMV0pIHtcbiAgICAgICAgICAgIHRoYXQueFN0ZXBzW2ldID0gdGhhdC54SGlnaGVzdENvbXBsZXRlU3RlcFtpXSA9IHRoYXQueFZhbFtpXTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmFjdG9yIHRvIHJhbmdlIHJhdGlvXG4gICAgICAgIHRoYXQueFN0ZXBzW2ldID1cbiAgICAgICAgICAgIGZyb21QZXJjZW50YWdlKFt0aGF0LnhWYWxbaV0sIHRoYXQueFZhbFtpICsgMV1dLCBuLCAwKSAvIHN1YlJhbmdlUmF0aW8odGhhdC54UGN0W2ldLCB0aGF0LnhQY3RbaSArIDFdKTtcblxuICAgICAgICB2YXIgdG90YWxTdGVwcyA9ICh0aGF0LnhWYWxbaSArIDFdIC0gdGhhdC54VmFsW2ldKSAvIHRoYXQueE51bVN0ZXBzW2ldO1xuICAgICAgICB2YXIgaGlnaGVzdFN0ZXAgPSBNYXRoLmNlaWwoTnVtYmVyKHRvdGFsU3RlcHMudG9GaXhlZCgzKSkgLSAxKTtcbiAgICAgICAgdmFyIHN0ZXAgPSB0aGF0LnhWYWxbaV0gKyB0aGF0LnhOdW1TdGVwc1tpXSAqIGhpZ2hlc3RTdGVwO1xuXG4gICAgICAgIHRoYXQueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbaV0gPSBzdGVwO1xuICAgIH1cblxuICAgIC8vZW5kcmVnaW9uXG5cbiAgICAvL3JlZ2lvbiBTcGVjdHJ1bVxuXG4gICAgZnVuY3Rpb24gU3BlY3RydW0oZW50cnksIHNuYXAsIHNpbmdsZVN0ZXApIHtcbiAgICAgICAgdGhpcy54UGN0ID0gW107XG4gICAgICAgIHRoaXMueFZhbCA9IFtdO1xuICAgICAgICB0aGlzLnhTdGVwcyA9IFtzaW5nbGVTdGVwIHx8IGZhbHNlXTtcbiAgICAgICAgdGhpcy54TnVtU3RlcHMgPSBbZmFsc2VdO1xuICAgICAgICB0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwID0gW107XG5cbiAgICAgICAgdGhpcy5zbmFwID0gc25hcDtcblxuICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgIHZhciBvcmRlcmVkID0gW107IC8vIFswLCAnbWluJ10sIFsxLCAnNTAlJ10sIFsyLCAnbWF4J11cblxuICAgICAgICAvLyBNYXAgdGhlIG9iamVjdCBrZXlzIHRvIGFuIGFycmF5LlxuICAgICAgICBmb3IgKGluZGV4IGluIGVudHJ5KSB7XG4gICAgICAgICAgICBpZiAoZW50cnkuaGFzT3duUHJvcGVydHkoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgb3JkZXJlZC5wdXNoKFtlbnRyeVtpbmRleF0sIGluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb3J0IGFsbCBlbnRyaWVzIGJ5IHZhbHVlIChudW1lcmljIHNvcnQpLlxuICAgICAgICBpZiAob3JkZXJlZC5sZW5ndGggJiYgdHlwZW9mIG9yZGVyZWRbMF1bMF0gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIG9yZGVyZWQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFbMF1bMF0gLSBiWzBdWzBdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcmRlcmVkLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiBhWzBdIC0gYlswXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29udmVydCBhbGwgZW50cmllcyB0byBzdWJyYW5nZXMuXG4gICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IG9yZGVyZWQubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBoYW5kbGVFbnRyeVBvaW50KG9yZGVyZWRbaW5kZXhdWzFdLCBvcmRlcmVkW2luZGV4XVswXSwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSB0aGUgYWN0dWFsIHN0ZXAgdmFsdWVzLlxuICAgICAgICAvLyB4U3RlcHMgaXMgc29ydGVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIHhQY3QgYW5kIHhWYWwuXG4gICAgICAgIHRoaXMueE51bVN0ZXBzID0gdGhpcy54U3RlcHMuc2xpY2UoMCk7XG5cbiAgICAgICAgLy8gQ29udmVydCBhbGwgbnVtZXJpYyBzdGVwcyB0byB0aGUgcGVyY2VudGFnZSBvZiB0aGUgc3VicmFuZ2UgdGhleSByZXByZXNlbnQuXG4gICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRoaXMueE51bVN0ZXBzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgaGFuZGxlU3RlcFBvaW50KGluZGV4LCB0aGlzLnhOdW1TdGVwc1tpbmRleF0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmdldERpc3RhbmNlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGluZGV4O1xuICAgICAgICB2YXIgZGlzdGFuY2VzID0gW107XG5cbiAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy54TnVtU3RlcHMubGVuZ3RoIC0gMTsgaW5kZXgrKykge1xuICAgICAgICAgICAgLy8gbGFzdCBcInJhbmdlXCIgY2FuJ3QgY29udGFpbiBzdGVwIHNpemUgYXMgaXQgaXMgcHVyZWx5IGFuIGVuZHBvaW50LlxuICAgICAgICAgICAgdmFyIHN0ZXAgPSB0aGlzLnhOdW1TdGVwc1tpbmRleF07XG5cbiAgICAgICAgICAgIGlmIChzdGVwICYmICh2YWx1ZSAvIHN0ZXApICUgMSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgXCJub1VpU2xpZGVyIChcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBWRVJTSU9OICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiKTogJ2xpbWl0JywgJ21hcmdpbicgYW5kICdwYWRkaW5nJyBvZiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnhQY3RbaW5kZXhdICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiJSByYW5nZSBtdXN0IGJlIGRpdmlzaWJsZSBieSBzdGVwLlwiXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHBlcmNlbnR1YWwgZGlzdGFuY2UgaW4gY3VycmVudCByYW5nZSBvZiBsaW1pdCwgbWFyZ2luIG9yIHBhZGRpbmdcbiAgICAgICAgICAgIGRpc3RhbmNlc1tpbmRleF0gPSBmcm9tUGVyY2VudGFnZSh0aGlzLnhWYWwsIHZhbHVlLCBpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGlzdGFuY2VzO1xuICAgIH07XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIHBlcmNlbnR1YWwgZGlzdGFuY2Ugb3ZlciB0aGUgd2hvbGUgc2NhbGUgb2YgcmFuZ2VzLlxuICAgIC8vIGRpcmVjdGlvbjogMCA9IGJhY2t3YXJkcyAvIDEgPSBmb3J3YXJkc1xuICAgIFNwZWN0cnVtLnByb3RvdHlwZS5nZXRBYnNvbHV0ZURpc3RhbmNlID0gZnVuY3Rpb24odmFsdWUsIGRpc3RhbmNlcywgZGlyZWN0aW9uKSB7XG4gICAgICAgIHZhciB4UGN0X2luZGV4ID0gMDtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgcmFuZ2Ugd2hlcmUgdG8gc3RhcnQgY2FsY3VsYXRpb25cbiAgICAgICAgaWYgKHZhbHVlIDwgdGhpcy54UGN0W3RoaXMueFBjdC5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgd2hpbGUgKHZhbHVlID4gdGhpcy54UGN0W3hQY3RfaW5kZXggKyAxXSkge1xuICAgICAgICAgICAgICAgIHhQY3RfaW5kZXgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gdGhpcy54UGN0W3RoaXMueFBjdC5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgeFBjdF9pbmRleCA9IHRoaXMueFBjdC5sZW5ndGggLSAyO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgbG9va2luZyBiYWNrd2FyZHMgYW5kIHRoZSB2YWx1ZSBpcyBleGFjdGx5IGF0IGEgcmFuZ2Ugc2VwYXJhdG9yIHRoZW4gbG9vayBvbmUgcmFuZ2UgZnVydGhlclxuICAgICAgICBpZiAoIWRpcmVjdGlvbiAmJiB2YWx1ZSA9PT0gdGhpcy54UGN0W3hQY3RfaW5kZXggKyAxXSkge1xuICAgICAgICAgICAgeFBjdF9pbmRleCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0X2ZhY3RvcjtcbiAgICAgICAgdmFyIHJlc3RfZmFjdG9yID0gMTtcblxuICAgICAgICB2YXIgcmVzdF9yZWxfZGlzdGFuY2UgPSBkaXN0YW5jZXNbeFBjdF9pbmRleF07XG5cbiAgICAgICAgdmFyIHJhbmdlX3BjdCA9IDA7XG5cbiAgICAgICAgdmFyIHJlbF9yYW5nZV9kaXN0YW5jZSA9IDA7XG4gICAgICAgIHZhciBhYnNfZGlzdGFuY2VfY291bnRlciA9IDA7XG4gICAgICAgIHZhciByYW5nZV9jb3VudGVyID0gMDtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgd2hhdCBwYXJ0IG9mIHRoZSBzdGFydCByYW5nZSB0aGUgdmFsdWUgaXNcbiAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgc3RhcnRfZmFjdG9yID0gKHZhbHVlIC0gdGhpcy54UGN0W3hQY3RfaW5kZXhdKSAvICh0aGlzLnhQY3RbeFBjdF9pbmRleCArIDFdIC0gdGhpcy54UGN0W3hQY3RfaW5kZXhdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0X2ZhY3RvciA9ICh0aGlzLnhQY3RbeFBjdF9pbmRleCArIDFdIC0gdmFsdWUpIC8gKHRoaXMueFBjdFt4UGN0X2luZGV4ICsgMV0gLSB0aGlzLnhQY3RbeFBjdF9pbmRleF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG8gdW50aWwgdGhlIGNvbXBsZXRlIGRpc3RhbmNlIGFjcm9zcyByYW5nZXMgaXMgY2FsY3VsYXRlZFxuICAgICAgICB3aGlsZSAocmVzdF9yZWxfZGlzdGFuY2UgPiAwKSB7XG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHBlcmNlbnRhZ2Ugb2YgdG90YWwgcmFuZ2VcbiAgICAgICAgICAgIHJhbmdlX3BjdCA9IHRoaXMueFBjdFt4UGN0X2luZGV4ICsgMSArIHJhbmdlX2NvdW50ZXJdIC0gdGhpcy54UGN0W3hQY3RfaW5kZXggKyByYW5nZV9jb3VudGVyXTtcblxuICAgICAgICAgICAgLy8gRGV0ZWN0IGlmIHRoZSBtYXJnaW4sIHBhZGRpbmcgb3IgbGltaXQgaXMgbGFyZ2VyIHRoZW4gdGhlIGN1cnJlbnQgcmFuZ2UgYW5kIGNhbGN1bGF0ZVxuICAgICAgICAgICAgaWYgKGRpc3RhbmNlc1t4UGN0X2luZGV4ICsgcmFuZ2VfY291bnRlcl0gKiByZXN0X2ZhY3RvciArIDEwMCAtIHN0YXJ0X2ZhY3RvciAqIDEwMCA+IDEwMCkge1xuICAgICAgICAgICAgICAgIC8vIElmIGxhcmdlciB0aGVuIHRha2UgdGhlIHBlcmNlbnR1YWwgZGlzdGFuY2Ugb2YgdGhlIHdob2xlIHJhbmdlXG4gICAgICAgICAgICAgICAgcmVsX3JhbmdlX2Rpc3RhbmNlID0gcmFuZ2VfcGN0ICogc3RhcnRfZmFjdG9yO1xuICAgICAgICAgICAgICAgIC8vIFJlc3QgZmFjdG9yIG9mIHJlbGF0aXZlIHBlcmNlbnR1YWwgZGlzdGFuY2Ugc3RpbGwgdG8gYmUgY2FsY3VsYXRlZFxuICAgICAgICAgICAgICAgIHJlc3RfZmFjdG9yID0gKHJlc3RfcmVsX2Rpc3RhbmNlIC0gMTAwICogc3RhcnRfZmFjdG9yKSAvIGRpc3RhbmNlc1t4UGN0X2luZGV4ICsgcmFuZ2VfY291bnRlcl07XG4gICAgICAgICAgICAgICAgLy8gU2V0IHN0YXJ0IGZhY3RvciB0byAxIGFzIGZvciBuZXh0IHJhbmdlIGl0IGRvZXMgbm90IGFwcGx5LlxuICAgICAgICAgICAgICAgIHN0YXJ0X2ZhY3RvciA9IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIElmIHNtYWxsZXIgb3IgZXF1YWwgdGhlbiB0YWtlIHRoZSBwZXJjZW50dWFsIGRpc3RhbmNlIG9mIHRoZSBjYWxjdWxhdGUgcGVyY2VudHVhbCBwYXJ0IG9mIHRoYXQgcmFuZ2VcbiAgICAgICAgICAgICAgICByZWxfcmFuZ2VfZGlzdGFuY2UgPSAoKGRpc3RhbmNlc1t4UGN0X2luZGV4ICsgcmFuZ2VfY291bnRlcl0gKiByYW5nZV9wY3QpIC8gMTAwKSAqIHJlc3RfZmFjdG9yO1xuICAgICAgICAgICAgICAgIC8vIE5vIHJlc3QgbGVmdCBhcyB0aGUgcmVzdCBmaXRzIGluIGN1cnJlbnQgcmFuZ2VcbiAgICAgICAgICAgICAgICByZXN0X2ZhY3RvciA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBhYnNfZGlzdGFuY2VfY291bnRlciA9IGFic19kaXN0YW5jZV9jb3VudGVyIC0gcmVsX3JhbmdlX2Rpc3RhbmNlO1xuICAgICAgICAgICAgICAgIC8vIExpbWl0IHJhbmdlIHRvIGZpcnN0IHJhbmdlIHdoZW4gZGlzdGFuY2UgYmVjb21lcyBvdXRzaWRlIG9mIG1pbmltdW0gcmFuZ2VcbiAgICAgICAgICAgICAgICBpZiAodGhpcy54UGN0Lmxlbmd0aCArIHJhbmdlX2NvdW50ZXIgPj0gMSkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZV9jb3VudGVyLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhYnNfZGlzdGFuY2VfY291bnRlciA9IGFic19kaXN0YW5jZV9jb3VudGVyICsgcmVsX3JhbmdlX2Rpc3RhbmNlO1xuICAgICAgICAgICAgICAgIC8vIExpbWl0IHJhbmdlIHRvIGxhc3QgcmFuZ2Ugd2hlbiBkaXN0YW5jZSBiZWNvbWVzIG91dHNpZGUgb2YgbWF4aW11bSByYW5nZVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnhQY3QubGVuZ3RoIC0gcmFuZ2VfY291bnRlciA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlX2NvdW50ZXIrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlc3Qgb2YgcmVsYXRpdmUgcGVyY2VudHVhbCBkaXN0YW5jZSBzdGlsbCB0byBiZSBjYWxjdWxhdGVkXG4gICAgICAgICAgICByZXN0X3JlbF9kaXN0YW5jZSA9IGRpc3RhbmNlc1t4UGN0X2luZGV4ICsgcmFuZ2VfY291bnRlcl0gKiByZXN0X2ZhY3RvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZSArIGFic19kaXN0YW5jZV9jb3VudGVyO1xuICAgIH07XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUudG9TdGVwcGluZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gdG9TdGVwcGluZyh0aGlzLnhWYWwsIHRoaXMueFBjdCwgdmFsdWUpO1xuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmZyb21TdGVwcGluZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmcm9tU3RlcHBpbmcodGhpcy54VmFsLCB0aGlzLnhQY3QsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmdldFN0ZXAgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IGdldFN0ZXAodGhpcy54UGN0LCB0aGlzLnhTdGVwcywgdGhpcy5zbmFwLCB2YWx1ZSk7XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZ2V0RGVmYXVsdFN0ZXAgPSBmdW5jdGlvbih2YWx1ZSwgaXNEb3duLCBzaXplKSB7XG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgdGhpcy54UGN0KTtcblxuICAgICAgICAvLyBXaGVuIGF0IHRoZSB0b3Agb3Igc3RlcHBpbmcgZG93biwgbG9vayBhdCB0aGUgcHJldmlvdXMgc3ViLXJhbmdlXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMTAwIHx8IChpc0Rvd24gJiYgdmFsdWUgPT09IHRoaXMueFBjdFtqIC0gMV0pKSB7XG4gICAgICAgICAgICBqID0gTWF0aC5tYXgoaiAtIDEsIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLnhWYWxbal0gLSB0aGlzLnhWYWxbaiAtIDFdKSAvIHNpemU7XG4gICAgfTtcblxuICAgIFNwZWN0cnVtLnByb3RvdHlwZS5nZXROZWFyYnlTdGVwcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgdGhpcy54UGN0KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RlcEJlZm9yZToge1xuICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWU6IHRoaXMueFZhbFtqIC0gMl0sXG4gICAgICAgICAgICAgICAgc3RlcDogdGhpcy54TnVtU3RlcHNbaiAtIDJdLFxuICAgICAgICAgICAgICAgIGhpZ2hlc3RTdGVwOiB0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwW2ogLSAyXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRoaXNTdGVwOiB7XG4gICAgICAgICAgICAgICAgc3RhcnRWYWx1ZTogdGhpcy54VmFsW2ogLSAxXSxcbiAgICAgICAgICAgICAgICBzdGVwOiB0aGlzLnhOdW1TdGVwc1tqIC0gMV0sXG4gICAgICAgICAgICAgICAgaGlnaGVzdFN0ZXA6IHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbaiAtIDFdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RlcEFmdGVyOiB7XG4gICAgICAgICAgICAgICAgc3RhcnRWYWx1ZTogdGhpcy54VmFsW2pdLFxuICAgICAgICAgICAgICAgIHN0ZXA6IHRoaXMueE51bVN0ZXBzW2pdLFxuICAgICAgICAgICAgICAgIGhpZ2hlc3RTdGVwOiB0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwW2pdXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIFNwZWN0cnVtLnByb3RvdHlwZS5jb3VudFN0ZXBEZWNpbWFscyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RlcERlY2ltYWxzID0gdGhpcy54TnVtU3RlcHMubWFwKGNvdW50RGVjaW1hbHMpO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgc3RlcERlY2ltYWxzKTtcbiAgICB9O1xuXG4gICAgLy8gT3V0c2lkZSB0ZXN0aW5nXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmNvbnZlcnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTdGVwKHRoaXMudG9TdGVwcGluZyh2YWx1ZSkpO1xuICAgIH07XG5cbiAgICAvL2VuZHJlZ2lvblxuXG4gICAgLy9yZWdpb24gT3B0aW9uc1xuXG4gICAgLypcdEV2ZXJ5IGlucHV0IG9wdGlvbiBpcyB0ZXN0ZWQgYW5kIHBhcnNlZC4gVGhpcydsbCBwcmV2ZW50XG4gICAgICAgIGVuZGxlc3MgdmFsaWRhdGlvbiBpbiBpbnRlcm5hbCBtZXRob2RzLiBUaGVzZSB0ZXN0cyBhcmVcbiAgICAgICAgc3RydWN0dXJlZCB3aXRoIGFuIGl0ZW0gZm9yIGV2ZXJ5IG9wdGlvbiBhdmFpbGFibGUuIEFuXG4gICAgICAgIG9wdGlvbiBjYW4gYmUgbWFya2VkIGFzIHJlcXVpcmVkIGJ5IHNldHRpbmcgdGhlICdyJyBmbGFnLlxuICAgICAgICBUaGUgdGVzdGluZyBmdW5jdGlvbiBpcyBwcm92aWRlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgICAgICAgIC0gVGhlIHByb3ZpZGVkIHZhbHVlIGZvciB0aGUgb3B0aW9uO1xuICAgICAgICAgICAgLSBBIHJlZmVyZW5jZSB0byB0aGUgb3B0aW9ucyBvYmplY3Q7XG4gICAgICAgICAgICAtIFRoZSBuYW1lIGZvciB0aGUgb3B0aW9uO1xuXG4gICAgICAgIFRoZSB0ZXN0aW5nIGZ1bmN0aW9uIHJldHVybnMgZmFsc2Ugd2hlbiBhbiBlcnJvciBpcyBkZXRlY3RlZCxcbiAgICAgICAgb3IgdHJ1ZSB3aGVuIGV2ZXJ5dGhpbmcgaXMgT0suIEl0IGNhbiBhbHNvIG1vZGlmeSB0aGUgb3B0aW9uXG4gICAgICAgIG9iamVjdCwgdG8gbWFrZSBzdXJlIGFsbCB2YWx1ZXMgY2FuIGJlIGNvcnJlY3RseSBsb29wZWQgZWxzZXdoZXJlLiAqL1xuXG4gICAgLy9yZWdpb24gRGVmYXVsdHNcblxuICAgIHZhciBkZWZhdWx0Rm9ybWF0dGVyID0ge1xuICAgICAgICB0bzogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnRvRml4ZWQoMik7XG4gICAgICAgIH0sXG4gICAgICAgIGZyb206IE51bWJlclxuICAgIH07XG5cbiAgICB2YXIgY3NzQ2xhc3NlcyA9IHtcbiAgICAgICAgdGFyZ2V0OiBcInRhcmdldFwiLFxuICAgICAgICBiYXNlOiBcImJhc2VcIixcbiAgICAgICAgb3JpZ2luOiBcIm9yaWdpblwiLFxuICAgICAgICBoYW5kbGU6IFwiaGFuZGxlXCIsXG4gICAgICAgIGhhbmRsZUxvd2VyOiBcImhhbmRsZS1sb3dlclwiLFxuICAgICAgICBoYW5kbGVVcHBlcjogXCJoYW5kbGUtdXBwZXJcIixcbiAgICAgICAgdG91Y2hBcmVhOiBcInRvdWNoLWFyZWFcIixcbiAgICAgICAgaG9yaXpvbnRhbDogXCJob3Jpem9udGFsXCIsXG4gICAgICAgIHZlcnRpY2FsOiBcInZlcnRpY2FsXCIsXG4gICAgICAgIGJhY2tncm91bmQ6IFwiYmFja2dyb3VuZFwiLFxuICAgICAgICBjb25uZWN0OiBcImNvbm5lY3RcIixcbiAgICAgICAgY29ubmVjdHM6IFwiY29ubmVjdHNcIixcbiAgICAgICAgbHRyOiBcImx0clwiLFxuICAgICAgICBydGw6IFwicnRsXCIsXG4gICAgICAgIHRleHREaXJlY3Rpb25MdHI6IFwidHh0LWRpci1sdHJcIixcbiAgICAgICAgdGV4dERpcmVjdGlvblJ0bDogXCJ0eHQtZGlyLXJ0bFwiLFxuICAgICAgICBkcmFnZ2FibGU6IFwiZHJhZ2dhYmxlXCIsXG4gICAgICAgIGRyYWc6IFwic3RhdGUtZHJhZ1wiLFxuICAgICAgICB0YXA6IFwic3RhdGUtdGFwXCIsXG4gICAgICAgIGFjdGl2ZTogXCJhY3RpdmVcIixcbiAgICAgICAgdG9vbHRpcDogXCJ0b29sdGlwXCIsXG4gICAgICAgIHBpcHM6IFwicGlwc1wiLFxuICAgICAgICBwaXBzSG9yaXpvbnRhbDogXCJwaXBzLWhvcml6b250YWxcIixcbiAgICAgICAgcGlwc1ZlcnRpY2FsOiBcInBpcHMtdmVydGljYWxcIixcbiAgICAgICAgbWFya2VyOiBcIm1hcmtlclwiLFxuICAgICAgICBtYXJrZXJIb3Jpem9udGFsOiBcIm1hcmtlci1ob3Jpem9udGFsXCIsXG4gICAgICAgIG1hcmtlclZlcnRpY2FsOiBcIm1hcmtlci12ZXJ0aWNhbFwiLFxuICAgICAgICBtYXJrZXJOb3JtYWw6IFwibWFya2VyLW5vcm1hbFwiLFxuICAgICAgICBtYXJrZXJMYXJnZTogXCJtYXJrZXItbGFyZ2VcIixcbiAgICAgICAgbWFya2VyU3ViOiBcIm1hcmtlci1zdWJcIixcbiAgICAgICAgdmFsdWU6IFwidmFsdWVcIixcbiAgICAgICAgdmFsdWVIb3Jpem9udGFsOiBcInZhbHVlLWhvcml6b250YWxcIixcbiAgICAgICAgdmFsdWVWZXJ0aWNhbDogXCJ2YWx1ZS12ZXJ0aWNhbFwiLFxuICAgICAgICB2YWx1ZU5vcm1hbDogXCJ2YWx1ZS1ub3JtYWxcIixcbiAgICAgICAgdmFsdWVMYXJnZTogXCJ2YWx1ZS1sYXJnZVwiLFxuICAgICAgICB2YWx1ZVN1YjogXCJ2YWx1ZS1zdWJcIlxuICAgIH07XG5cbiAgICAvL2VuZHJlZ2lvblxuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZW50cnkpIHtcbiAgICAgICAgLy8gQW55IG9iamVjdCB3aXRoIGEgdG8gYW5kIGZyb20gbWV0aG9kIGlzIHN1cHBvcnRlZC5cbiAgICAgICAgaWYgKGlzVmFsaWRGb3JtYXR0ZXIoZW50cnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2Zvcm1hdCcgcmVxdWlyZXMgJ3RvJyBhbmQgJ2Zyb20nIG1ldGhvZHMuXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RTdGVwKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdzdGVwJyBpcyBub3QgbnVtZXJpYy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgc3RlcCBvcHRpb24gY2FuIHN0aWxsIGJlIHVzZWQgdG8gc2V0IHN0ZXBwaW5nXG4gICAgICAgIC8vIGZvciBsaW5lYXIgc2xpZGVycy4gT3ZlcndyaXR0ZW4gaWYgc2V0IGluICdyYW5nZScuXG4gICAgICAgIHBhcnNlZC5zaW5nbGVTdGVwID0gZW50cnk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdFJhbmdlKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gRmlsdGVyIGluY29ycmVjdCBpbnB1dC5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJvYmplY3RcIiB8fCBBcnJheS5pc0FycmF5KGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncmFuZ2UnIGlzIG5vdCBhbiBvYmplY3QuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2F0Y2ggbWlzc2luZyBzdGFydCBvciBlbmQuXG4gICAgICAgIGlmIChlbnRyeS5taW4gPT09IHVuZGVmaW5lZCB8fCBlbnRyeS5tYXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiBNaXNzaW5nICdtaW4nIG9yICdtYXgnIGluICdyYW5nZScuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2F0Y2ggZXF1YWwgc3RhcnQgb3IgZW5kLlxuICAgICAgICBpZiAoZW50cnkubWluID09PSBlbnRyeS5tYXgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3JhbmdlJyAnbWluJyBhbmQgJ21heCcgY2Fubm90IGJlIGVxdWFsLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZC5zcGVjdHJ1bSA9IG5ldyBTcGVjdHJ1bShlbnRyeSwgcGFyc2VkLnNuYXAsIHBhcnNlZC5zaW5nbGVTdGVwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0U3RhcnQocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBlbnRyeSA9IGFzQXJyYXkoZW50cnkpO1xuXG4gICAgICAgIC8vIFZhbGlkYXRlIGlucHV0LiBWYWx1ZXMgYXJlbid0IHRlc3RlZCwgYXMgdGhlIHB1YmxpYyAudmFsIG1ldGhvZFxuICAgICAgICAvLyB3aWxsIGFsd2F5cyBwcm92aWRlIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRyeSkgfHwgIWVudHJ5Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnc3RhcnQnIG9wdGlvbiBpcyBpbmNvcnJlY3QuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RvcmUgdGhlIG51bWJlciBvZiBoYW5kbGVzLlxuICAgICAgICBwYXJzZWQuaGFuZGxlcyA9IGVudHJ5Lmxlbmd0aDtcblxuICAgICAgICAvLyBXaGVuIHRoZSBzbGlkZXIgaXMgaW5pdGlhbGl6ZWQsIHRoZSAudmFsIG1ldGhvZCB3aWxsXG4gICAgICAgIC8vIGJlIGNhbGxlZCB3aXRoIHRoZSBzdGFydCBvcHRpb25zLlxuICAgICAgICBwYXJzZWQuc3RhcnQgPSBlbnRyeTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0U25hcChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIEVuZm9yY2UgMTAwJSBzdGVwcGluZyB3aXRoaW4gc3VicmFuZ2VzLlxuICAgICAgICBwYXJzZWQuc25hcCA9IGVudHJ5O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdzbmFwJyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEFuaW1hdGUocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICAvLyBFbmZvcmNlIDEwMCUgc3RlcHBpbmcgd2l0aGluIHN1YnJhbmdlcy5cbiAgICAgICAgcGFyc2VkLmFuaW1hdGUgPSBlbnRyeTtcblxuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnYW5pbWF0ZScgb3B0aW9uIG11c3QgYmUgYSBib29sZWFuLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RBbmltYXRpb25EdXJhdGlvbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHBhcnNlZC5hbmltYXRpb25EdXJhdGlvbiA9IGVudHJ5O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2FuaW1hdGlvbkR1cmF0aW9uJyBvcHRpb24gbXVzdCBiZSBhIG51bWJlci5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0Q29ubmVjdChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHZhciBjb25uZWN0ID0gW2ZhbHNlXTtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgLy8gTWFwIGxlZ2FjeSBvcHRpb25zXG4gICAgICAgIGlmIChlbnRyeSA9PT0gXCJsb3dlclwiKSB7XG4gICAgICAgICAgICBlbnRyeSA9IFt0cnVlLCBmYWxzZV07XG4gICAgICAgIH0gZWxzZSBpZiAoZW50cnkgPT09IFwidXBwZXJcIikge1xuICAgICAgICAgICAgZW50cnkgPSBbZmFsc2UsIHRydWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlIGJvb2xlYW4gb3B0aW9uc1xuICAgICAgICBpZiAoZW50cnkgPT09IHRydWUgfHwgZW50cnkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgcGFyc2VkLmhhbmRsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbm5lY3QucHVzaChlbnRyeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbm5lY3QucHVzaChmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZWplY3QgaW52YWxpZCBpbnB1dFxuICAgICAgICBlbHNlIGlmICghQXJyYXkuaXNBcnJheShlbnRyeSkgfHwgIWVudHJ5Lmxlbmd0aCB8fCBlbnRyeS5sZW5ndGggIT09IHBhcnNlZC5oYW5kbGVzICsgMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnY29ubmVjdCcgb3B0aW9uIGRvZXNuJ3QgbWF0Y2ggaGFuZGxlIGNvdW50LlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbm5lY3QgPSBlbnRyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZC5jb25uZWN0ID0gY29ubmVjdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0T3JpZW50YXRpb24ocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICAvLyBTZXQgb3JpZW50YXRpb24gdG8gYW4gYSBudW1lcmljYWwgdmFsdWUgZm9yIGVhc3lcbiAgICAgICAgLy8gYXJyYXkgc2VsZWN0aW9uLlxuICAgICAgICBzd2l0Y2ggKGVudHJ5KSB7XG4gICAgICAgICAgICBjYXNlIFwiaG9yaXpvbnRhbFwiOlxuICAgICAgICAgICAgICAgIHBhcnNlZC5vcnQgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZlcnRpY2FsXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLm9ydCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ29yaWVudGF0aW9uJyBvcHRpb24gaXMgaW52YWxpZC5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0TWFyZ2luKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdtYXJnaW4nIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSXNzdWUgIzU4MlxuICAgICAgICBpZiAoZW50cnkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZC5tYXJnaW4gPSBwYXJzZWQuc3BlY3RydW0uZ2V0RGlzdGFuY2UoZW50cnkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RMaW1pdChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnbGltaXQnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLmxpbWl0ID0gcGFyc2VkLnNwZWN0cnVtLmdldERpc3RhbmNlKGVudHJ5KTtcblxuICAgICAgICBpZiAoIXBhcnNlZC5saW1pdCB8fCBwYXJzZWQuaGFuZGxlcyA8IDIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIm5vVWlTbGlkZXIgKFwiICtcbiAgICAgICAgICAgICAgICAgICAgVkVSU0lPTiArXG4gICAgICAgICAgICAgICAgICAgIFwiKTogJ2xpbWl0JyBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgb24gbGluZWFyIHNsaWRlcnMgd2l0aCAyIG9yIG1vcmUgaGFuZGxlcy5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RQYWRkaW5nKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgdmFyIGluZGV4O1xuXG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSAmJiAhQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMgb3IgYXJyYXkgb2YgZXhhY3RseSAyIG51bWJlcnMuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlbnRyeSkgJiYgIShlbnRyeS5sZW5ndGggPT09IDIgfHwgaXNOdW1lcmljKGVudHJ5WzBdKSB8fCBpc051bWVyaWMoZW50cnlbMV0pKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncGFkZGluZycgb3B0aW9uIG11c3QgYmUgbnVtZXJpYyBvciBhcnJheSBvZiBleGFjdGx5IDIgbnVtYmVycy5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGVudHJ5KSkge1xuICAgICAgICAgICAgZW50cnkgPSBbZW50cnksIGVudHJ5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vICdnZXREaXN0YW5jZScgcmV0dXJucyBmYWxzZSBmb3IgaW52YWxpZCB2YWx1ZXMuXG4gICAgICAgIHBhcnNlZC5wYWRkaW5nID0gW3BhcnNlZC5zcGVjdHJ1bS5nZXREaXN0YW5jZShlbnRyeVswXSksIHBhcnNlZC5zcGVjdHJ1bS5nZXREaXN0YW5jZShlbnRyeVsxXSldO1xuXG4gICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnNlZC5zcGVjdHJ1bS54TnVtU3RlcHMubGVuZ3RoIC0gMTsgaW5kZXgrKykge1xuICAgICAgICAgICAgLy8gbGFzdCBcInJhbmdlXCIgY2FuJ3QgY29udGFpbiBzdGVwIHNpemUgYXMgaXQgaXMgcHVyZWx5IGFuIGVuZHBvaW50LlxuICAgICAgICAgICAgaWYgKHBhcnNlZC5wYWRkaW5nWzBdW2luZGV4XSA8IDAgfHwgcGFyc2VkLnBhZGRpbmdbMV1baW5kZXhdIDwgMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyKHMpLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b3RhbFBhZGRpbmcgPSBlbnRyeVswXSArIGVudHJ5WzFdO1xuICAgICAgICB2YXIgZmlyc3RWYWx1ZSA9IHBhcnNlZC5zcGVjdHJ1bS54VmFsWzBdO1xuICAgICAgICB2YXIgbGFzdFZhbHVlID0gcGFyc2VkLnNwZWN0cnVtLnhWYWxbcGFyc2VkLnNwZWN0cnVtLnhWYWwubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKHRvdGFsUGFkZGluZyAvIChsYXN0VmFsdWUgLSBmaXJzdFZhbHVlKSA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IG5vdCBleGNlZWQgMTAwJSBvZiB0aGUgcmFuZ2UuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdERpcmVjdGlvbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFNldCBkaXJlY3Rpb24gYXMgYSBudW1lcmljYWwgdmFsdWUgZm9yIGVhc3kgcGFyc2luZy5cbiAgICAgICAgLy8gSW52ZXJ0IGNvbm5lY3Rpb24gZm9yIFJUTCBzbGlkZXJzLCBzbyB0aGF0IHRoZSBwcm9wZXJcbiAgICAgICAgLy8gaGFuZGxlcyBnZXQgdGhlIGNvbm5lY3QvYmFja2dyb3VuZCBjbGFzc2VzLlxuICAgICAgICBzd2l0Y2ggKGVudHJ5KSB7XG4gICAgICAgICAgICBjYXNlIFwibHRyXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLmRpciA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicnRsXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLmRpciA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2RpcmVjdGlvbicgb3B0aW9uIHdhcyBub3QgcmVjb2duaXplZC5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0QmVoYXZpb3VyKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBpbnB1dCBpcyBhIHN0cmluZy5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnYmVoYXZpb3VyJyBtdXN0IGJlIGEgc3RyaW5nIGNvbnRhaW5pbmcgb3B0aW9ucy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgc3RyaW5nIGNvbnRhaW5zIGFueSBrZXl3b3Jkcy5cbiAgICAgICAgLy8gTm9uZSBhcmUgcmVxdWlyZWQuXG4gICAgICAgIHZhciB0YXAgPSBlbnRyeS5pbmRleE9mKFwidGFwXCIpID49IDA7XG4gICAgICAgIHZhciBkcmFnID0gZW50cnkuaW5kZXhPZihcImRyYWdcIikgPj0gMDtcbiAgICAgICAgdmFyIGZpeGVkID0gZW50cnkuaW5kZXhPZihcImZpeGVkXCIpID49IDA7XG4gICAgICAgIHZhciBzbmFwID0gZW50cnkuaW5kZXhPZihcInNuYXBcIikgPj0gMDtcbiAgICAgICAgdmFyIGhvdmVyID0gZW50cnkuaW5kZXhPZihcImhvdmVyXCIpID49IDA7XG4gICAgICAgIHZhciB1bmNvbnN0cmFpbmVkID0gZW50cnkuaW5kZXhPZihcInVuY29uc3RyYWluZWRcIikgPj0gMDtcblxuICAgICAgICBpZiAoZml4ZWQpIHtcbiAgICAgICAgICAgIGlmIChwYXJzZWQuaGFuZGxlcyAhPT0gMikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2ZpeGVkJyBiZWhhdmlvdXIgbXVzdCBiZSB1c2VkIHdpdGggMiBoYW5kbGVzXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVc2UgbWFyZ2luIHRvIGVuZm9yY2UgZml4ZWQgc3RhdGVcbiAgICAgICAgICAgIHRlc3RNYXJnaW4ocGFyc2VkLCBwYXJzZWQuc3RhcnRbMV0gLSBwYXJzZWQuc3RhcnRbMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuY29uc3RyYWluZWQgJiYgKHBhcnNlZC5tYXJnaW4gfHwgcGFyc2VkLmxpbWl0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAndW5jb25zdHJhaW5lZCcgYmVoYXZpb3VyIGNhbm5vdCBiZSB1c2VkIHdpdGggbWFyZ2luIG9yIGxpbWl0XCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWQuZXZlbnRzID0ge1xuICAgICAgICAgICAgdGFwOiB0YXAgfHwgc25hcCxcbiAgICAgICAgICAgIGRyYWc6IGRyYWcsXG4gICAgICAgICAgICBmaXhlZDogZml4ZWQsXG4gICAgICAgICAgICBzbmFwOiBzbmFwLFxuICAgICAgICAgICAgaG92ZXI6IGhvdmVyLFxuICAgICAgICAgICAgdW5jb25zdHJhaW5lZDogdW5jb25zdHJhaW5lZFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RUb29sdGlwcyhwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcGFyc2VkLnRvb2x0aXBzID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyc2VkLmhhbmRsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIHBhcnNlZC50b29sdGlwcy5wdXNoKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VkLnRvb2x0aXBzID0gYXNBcnJheShlbnRyeSk7XG5cbiAgICAgICAgICAgIGlmIChwYXJzZWQudG9vbHRpcHMubGVuZ3RoICE9PSBwYXJzZWQuaGFuZGxlcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogbXVzdCBwYXNzIGEgZm9ybWF0dGVyIGZvciBhbGwgaGFuZGxlcy5cIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhcnNlZC50b29sdGlwcy5mb3JFYWNoKGZ1bmN0aW9uKGZvcm1hdHRlcikge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGZvcm1hdHRlciAhPT0gXCJib29sZWFuXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBmb3JtYXR0ZXIgIT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZvcm1hdHRlci50byAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICd0b29sdGlwcycgbXVzdCBiZSBwYXNzZWQgYSBmb3JtYXR0ZXIgb3IgJ2ZhbHNlJy5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0QXJpYUZvcm1hdChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHBhcnNlZC5hcmlhRm9ybWF0ID0gZW50cnk7XG4gICAgICAgIHZhbGlkYXRlRm9ybWF0KGVudHJ5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0Rm9ybWF0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgcGFyc2VkLmZvcm1hdCA9IGVudHJ5O1xuICAgICAgICB2YWxpZGF0ZUZvcm1hdChlbnRyeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEtleWJvYXJkU3VwcG9ydChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHBhcnNlZC5rZXlib2FyZFN1cHBvcnQgPSBlbnRyeTtcblxuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAna2V5Ym9hcmRTdXBwb3J0JyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdERvY3VtZW50RWxlbWVudChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYW4gYWR2YW5jZWQgb3B0aW9uLiBQYXNzZWQgdmFsdWVzIGFyZSB1c2VkIHdpdGhvdXQgdmFsaWRhdGlvbi5cbiAgICAgICAgcGFyc2VkLmRvY3VtZW50RWxlbWVudCA9IGVudHJ5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RDc3NQcmVmaXgocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcInN0cmluZ1wiICYmIGVudHJ5ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnY3NzUHJlZml4JyBtdXN0IGJlIGEgc3RyaW5nIG9yIGBmYWxzZWAuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLmNzc1ByZWZpeCA9IGVudHJ5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RDc3NDbGFzc2VzKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnY3NzQ2xhc3NlcycgbXVzdCBiZSBhbiBvYmplY3QuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwYXJzZWQuY3NzUHJlZml4ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBwYXJzZWQuY3NzQ2xhc3NlcyA9IHt9O1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZW50cnkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWVudHJ5Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcGFyc2VkLmNzc0NsYXNzZXNba2V5XSA9IHBhcnNlZC5jc3NQcmVmaXggKyBlbnRyeVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VkLmNzc0NsYXNzZXMgPSBlbnRyeTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRlc3QgYWxsIGRldmVsb3BlciBzZXR0aW5ncyBhbmQgcGFyc2UgdG8gYXNzdW1wdGlvbi1zYWZlIHZhbHVlcy5cbiAgICBmdW5jdGlvbiB0ZXN0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIC8vIFRvIHByb3ZlIGEgZml4IGZvciAjNTM3LCBmcmVlemUgb3B0aW9ucyBoZXJlLlxuICAgICAgICAvLyBJZiB0aGUgb2JqZWN0IGlzIG1vZGlmaWVkLCBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAgICAgICAgLy8gT2JqZWN0LmZyZWV6ZShvcHRpb25zKTtcblxuICAgICAgICB2YXIgcGFyc2VkID0ge1xuICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgbGltaXQ6IDAsXG4gICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgYW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAzMDAsXG4gICAgICAgICAgICBhcmlhRm9ybWF0OiBkZWZhdWx0Rm9ybWF0dGVyLFxuICAgICAgICAgICAgZm9ybWF0OiBkZWZhdWx0Rm9ybWF0dGVyXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVGVzdHMgYXJlIGV4ZWN1dGVkIGluIHRoZSBvcmRlciB0aGV5IGFyZSBwcmVzZW50ZWQgaGVyZS5cbiAgICAgICAgdmFyIHRlc3RzID0ge1xuICAgICAgICAgICAgc3RlcDogeyByOiBmYWxzZSwgdDogdGVzdFN0ZXAgfSxcbiAgICAgICAgICAgIHN0YXJ0OiB7IHI6IHRydWUsIHQ6IHRlc3RTdGFydCB9LFxuICAgICAgICAgICAgY29ubmVjdDogeyByOiB0cnVlLCB0OiB0ZXN0Q29ubmVjdCB9LFxuICAgICAgICAgICAgZGlyZWN0aW9uOiB7IHI6IHRydWUsIHQ6IHRlc3REaXJlY3Rpb24gfSxcbiAgICAgICAgICAgIHNuYXA6IHsgcjogZmFsc2UsIHQ6IHRlc3RTbmFwIH0sXG4gICAgICAgICAgICBhbmltYXRlOiB7IHI6IGZhbHNlLCB0OiB0ZXN0QW5pbWF0ZSB9LFxuICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246IHsgcjogZmFsc2UsIHQ6IHRlc3RBbmltYXRpb25EdXJhdGlvbiB9LFxuICAgICAgICAgICAgcmFuZ2U6IHsgcjogdHJ1ZSwgdDogdGVzdFJhbmdlIH0sXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogeyByOiBmYWxzZSwgdDogdGVzdE9yaWVudGF0aW9uIH0sXG4gICAgICAgICAgICBtYXJnaW46IHsgcjogZmFsc2UsIHQ6IHRlc3RNYXJnaW4gfSxcbiAgICAgICAgICAgIGxpbWl0OiB7IHI6IGZhbHNlLCB0OiB0ZXN0TGltaXQgfSxcbiAgICAgICAgICAgIHBhZGRpbmc6IHsgcjogZmFsc2UsIHQ6IHRlc3RQYWRkaW5nIH0sXG4gICAgICAgICAgICBiZWhhdmlvdXI6IHsgcjogdHJ1ZSwgdDogdGVzdEJlaGF2aW91ciB9LFxuICAgICAgICAgICAgYXJpYUZvcm1hdDogeyByOiBmYWxzZSwgdDogdGVzdEFyaWFGb3JtYXQgfSxcbiAgICAgICAgICAgIGZvcm1hdDogeyByOiBmYWxzZSwgdDogdGVzdEZvcm1hdCB9LFxuICAgICAgICAgICAgdG9vbHRpcHM6IHsgcjogZmFsc2UsIHQ6IHRlc3RUb29sdGlwcyB9LFxuICAgICAgICAgICAga2V5Ym9hcmRTdXBwb3J0OiB7IHI6IHRydWUsIHQ6IHRlc3RLZXlib2FyZFN1cHBvcnQgfSxcbiAgICAgICAgICAgIGRvY3VtZW50RWxlbWVudDogeyByOiBmYWxzZSwgdDogdGVzdERvY3VtZW50RWxlbWVudCB9LFxuICAgICAgICAgICAgY3NzUHJlZml4OiB7IHI6IHRydWUsIHQ6IHRlc3RDc3NQcmVmaXggfSxcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IHsgcjogdHJ1ZSwgdDogdGVzdENzc0NsYXNzZXMgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIGNvbm5lY3Q6IGZhbHNlLFxuICAgICAgICAgICAgZGlyZWN0aW9uOiBcImx0clwiLFxuICAgICAgICAgICAgYmVoYXZpb3VyOiBcInRhcFwiLFxuICAgICAgICAgICAgb3JpZW50YXRpb246IFwiaG9yaXpvbnRhbFwiLFxuICAgICAgICAgICAga2V5Ym9hcmRTdXBwb3J0OiB0cnVlLFxuICAgICAgICAgICAgY3NzUHJlZml4OiBcIm5vVWktXCIsXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiBjc3NDbGFzc2VzXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gQXJpYUZvcm1hdCBkZWZhdWx0cyB0byByZWd1bGFyIGZvcm1hdCwgaWYgYW55LlxuICAgICAgICBpZiAob3B0aW9ucy5mb3JtYXQgJiYgIW9wdGlvbnMuYXJpYUZvcm1hdCkge1xuICAgICAgICAgICAgb3B0aW9ucy5hcmlhRm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSdW4gYWxsIG9wdGlvbnMgdGhyb3VnaCBhIHRlc3RpbmcgbWVjaGFuaXNtIHRvIGVuc3VyZSBjb3JyZWN0XG4gICAgICAgIC8vIGlucHV0LiBJdCBzaG91bGQgYmUgbm90ZWQgdGhhdCBvcHRpb25zIG1pZ2h0IGdldCBtb2RpZmllZCB0b1xuICAgICAgICAvLyBiZSBoYW5kbGVkIHByb3Blcmx5LiBFLmcuIHdyYXBwaW5nIGludGVnZXJzIGluIGFycmF5cy5cbiAgICAgICAgT2JqZWN0LmtleXModGVzdHMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIG9wdGlvbiBpc24ndCBzZXQsIGJ1dCBpdCBpcyByZXF1aXJlZCwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICAgICAgICBpZiAoIWlzU2V0KG9wdGlvbnNbbmFtZV0pICYmIGRlZmF1bHRzW25hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVzdHNbbmFtZV0ucikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdcIiArIG5hbWUgKyBcIicgaXMgcmVxdWlyZWQuXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0ZXN0c1tuYW1lXS50KHBhcnNlZCwgIWlzU2V0KG9wdGlvbnNbbmFtZV0pID8gZGVmYXVsdHNbbmFtZV0gOiBvcHRpb25zW25hbWVdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRm9yd2FyZCBwaXBzIG9wdGlvbnNcbiAgICAgICAgcGFyc2VkLnBpcHMgPSBvcHRpb25zLnBpcHM7XG5cbiAgICAgICAgLy8gQWxsIHJlY2VudCBicm93c2VycyBhY2NlcHQgdW5wcmVmaXhlZCB0cmFuc2Zvcm0uXG4gICAgICAgIC8vIFdlIG5lZWQgLW1zLSBmb3IgSUU5IGFuZCAtd2Via2l0LSBmb3Igb2xkZXIgQW5kcm9pZDtcbiAgICAgICAgLy8gQXNzdW1lIHVzZSBvZiAtd2Via2l0LSBpZiB1bnByZWZpeGVkIGFuZCAtbXMtIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgICAgICAvLyBodHRwczovL2Nhbml1c2UuY29tLyNmZWF0PXRyYW5zZm9ybXMyZFxuICAgICAgICB2YXIgZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHZhciBtc1ByZWZpeCA9IGQuc3R5bGUubXNUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIG5vUHJlZml4ID0gZC5zdHlsZS50cmFuc2Zvcm0gIT09IHVuZGVmaW5lZDtcblxuICAgICAgICBwYXJzZWQudHJhbnNmb3JtUnVsZSA9IG5vUHJlZml4ID8gXCJ0cmFuc2Zvcm1cIiA6IG1zUHJlZml4ID8gXCJtc1RyYW5zZm9ybVwiIDogXCJ3ZWJraXRUcmFuc2Zvcm1cIjtcblxuICAgICAgICAvLyBQaXBzIGRvbid0IG1vdmUsIHNvIHdlIGNhbiBwbGFjZSB0aGVtIHVzaW5nIGxlZnQvdG9wLlxuICAgICAgICB2YXIgc3R5bGVzID0gW1tcImxlZnRcIiwgXCJ0b3BcIl0sIFtcInJpZ2h0XCIsIFwiYm90dG9tXCJdXTtcblxuICAgICAgICBwYXJzZWQuc3R5bGUgPSBzdHlsZXNbcGFyc2VkLmRpcl1bcGFyc2VkLm9ydF07XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9XG5cbiAgICAvL2VuZHJlZ2lvblxuXG4gICAgZnVuY3Rpb24gc2NvcGUodGFyZ2V0LCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBnZXRBY3Rpb25zKCk7XG4gICAgICAgIHZhciBzdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSA9IGdldFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lKCk7XG4gICAgICAgIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBzdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSAmJiBnZXRTdXBwb3J0c1Bhc3NpdmUoKTtcblxuICAgICAgICAvLyBBbGwgdmFyaWFibGVzIGxvY2FsIHRvICdzY29wZScgYXJlIHByZWZpeGVkIHdpdGggJ3Njb3BlXydcblxuICAgICAgICAvLyBTbGlkZXIgRE9NIE5vZGVzXG4gICAgICAgIHZhciBzY29wZV9UYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHZhciBzY29wZV9CYXNlO1xuICAgICAgICB2YXIgc2NvcGVfSGFuZGxlcztcbiAgICAgICAgdmFyIHNjb3BlX0Nvbm5lY3RzO1xuICAgICAgICB2YXIgc2NvcGVfUGlwcztcbiAgICAgICAgdmFyIHNjb3BlX1Rvb2x0aXBzO1xuXG4gICAgICAgIC8vIFNsaWRlciBzdGF0ZSB2YWx1ZXNcbiAgICAgICAgdmFyIHNjb3BlX1NwZWN0cnVtID0gb3B0aW9ucy5zcGVjdHJ1bTtcbiAgICAgICAgdmFyIHNjb3BlX1ZhbHVlcyA9IFtdO1xuICAgICAgICB2YXIgc2NvcGVfTG9jYXRpb25zID0gW107XG4gICAgICAgIHZhciBzY29wZV9IYW5kbGVOdW1iZXJzID0gW107XG4gICAgICAgIHZhciBzY29wZV9BY3RpdmVIYW5kbGVzQ291bnQgPSAwO1xuICAgICAgICB2YXIgc2NvcGVfRXZlbnRzID0ge307XG5cbiAgICAgICAgLy8gRXhwb3NlZCBBUElcbiAgICAgICAgdmFyIHNjb3BlX1NlbGY7XG5cbiAgICAgICAgLy8gRG9jdW1lbnQgTm9kZXNcbiAgICAgICAgdmFyIHNjb3BlX0RvY3VtZW50ID0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIHZhciBzY29wZV9Eb2N1bWVudEVsZW1lbnQgPSBvcHRpb25zLmRvY3VtZW50RWxlbWVudCB8fCBzY29wZV9Eb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBzY29wZV9Cb2R5ID0gc2NvcGVfRG9jdW1lbnQuYm9keTtcblxuICAgICAgICAvLyBQaXBzIGNvbnN0YW50c1xuICAgICAgICB2YXIgUElQU19OT05FID0gLTE7XG4gICAgICAgIHZhciBQSVBTX05PX1ZBTFVFID0gMDtcbiAgICAgICAgdmFyIFBJUFNfTEFSR0VfVkFMVUUgPSAxO1xuICAgICAgICB2YXIgUElQU19TTUFMTF9WQUxVRSA9IDI7XG5cbiAgICAgICAgLy8gRm9yIGhvcml6b250YWwgc2xpZGVycyBpbiBzdGFuZGFyZCBsdHIgZG9jdW1lbnRzLFxuICAgICAgICAvLyBtYWtlIC5ub1VpLW9yaWdpbiBvdmVyZmxvdyB0byB0aGUgbGVmdCBzbyB0aGUgZG9jdW1lbnQgZG9lc24ndCBzY3JvbGwuXG4gICAgICAgIHZhciBzY29wZV9EaXJPZmZzZXQgPSBzY29wZV9Eb2N1bWVudC5kaXIgPT09IFwicnRsXCIgfHwgb3B0aW9ucy5vcnQgPT09IDEgPyAwIDogMTAwO1xuXG4gICAgICAgIC8vIENyZWF0ZXMgYSBub2RlLCBhZGRzIGl0IHRvIHRhcmdldCwgcmV0dXJucyB0aGUgbmV3IG5vZGUuXG4gICAgICAgIGZ1bmN0aW9uIGFkZE5vZGVUbyhhZGRUYXJnZXQsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgdmFyIGRpdiA9IHNjb3BlX0RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhkaXYsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFkZFRhcmdldC5hcHBlbmRDaGlsZChkaXYpO1xuXG4gICAgICAgICAgICByZXR1cm4gZGl2O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXBwZW5kIGEgb3JpZ2luIHRvIHRoZSBiYXNlXG4gICAgICAgIGZ1bmN0aW9uIGFkZE9yaWdpbihiYXNlLCBoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBvcmlnaW4gPSBhZGROb2RlVG8oYmFzZSwgb3B0aW9ucy5jc3NDbGFzc2VzLm9yaWdpbik7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gYWRkTm9kZVRvKG9yaWdpbiwgb3B0aW9ucy5jc3NDbGFzc2VzLmhhbmRsZSk7XG5cbiAgICAgICAgICAgIGFkZE5vZGVUbyhoYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50b3VjaEFyZWEpO1xuXG4gICAgICAgICAgICBoYW5kbGUuc2V0QXR0cmlidXRlKFwiZGF0YS1oYW5kbGVcIiwgaGFuZGxlTnVtYmVyKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMua2V5Ym9hcmRTdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy90YWJpbmRleFxuICAgICAgICAgICAgICAgIC8vIDAgPSBmb2N1c2FibGUgYW5kIHJlYWNoYWJsZVxuICAgICAgICAgICAgICAgIGhhbmRsZS5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgaGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudEtleWRvd24oZXZlbnQsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGhhbmRsZS5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwic2xpZGVyXCIpO1xuICAgICAgICAgICAgaGFuZGxlLnNldEF0dHJpYnV0ZShcImFyaWEtb3JpZW50YXRpb25cIiwgb3B0aW9ucy5vcnQgPyBcInZlcnRpY2FsXCIgOiBcImhvcml6b250YWxcIik7XG5cbiAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhoYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5oYW5kbGVMb3dlcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZU51bWJlciA9PT0gb3B0aW9ucy5oYW5kbGVzIC0gMSkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmhhbmRsZVVwcGVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluc2VydCBub2RlcyBmb3IgY29ubmVjdCBlbGVtZW50c1xuICAgICAgICBmdW5jdGlvbiBhZGRDb25uZWN0KGJhc2UsIGFkZCkge1xuICAgICAgICAgICAgaWYgKCFhZGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhZGROb2RlVG8oYmFzZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmNvbm5lY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGhhbmRsZXMgdG8gdGhlIHNsaWRlciBiYXNlLlxuICAgICAgICBmdW5jdGlvbiBhZGRFbGVtZW50cyhjb25uZWN0T3B0aW9ucywgYmFzZSkge1xuICAgICAgICAgICAgdmFyIGNvbm5lY3RCYXNlID0gYWRkTm9kZVRvKGJhc2UsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5jb25uZWN0cyk7XG5cbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZXMgPSBbXTtcbiAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzID0gW107XG5cbiAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzLnB1c2goYWRkQ29ubmVjdChjb25uZWN0QmFzZSwgY29ubmVjdE9wdGlvbnNbMF0pKTtcblxuICAgICAgICAgICAgLy8gWzo6OjpPPT09PU89PT09Tz09PT1dXG4gICAgICAgICAgICAvLyBjb25uZWN0T3B0aW9ucyA9IFswLCAxLCAxLCAxXVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnMuaGFuZGxlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gS2VlcCBhIGxpc3Qgb2YgYWxsIGFkZGVkIGhhbmRsZXMuXG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlcy5wdXNoKGFkZE9yaWdpbihiYXNlLCBpKSk7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVyc1tpXSA9IGk7XG4gICAgICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMucHVzaChhZGRDb25uZWN0KGNvbm5lY3RCYXNlLCBjb25uZWN0T3B0aW9uc1tpICsgMV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXRpYWxpemUgYSBzaW5nbGUgc2xpZGVyLlxuICAgICAgICBmdW5jdGlvbiBhZGRTbGlkZXIoYWRkVGFyZ2V0KSB7XG4gICAgICAgICAgICAvLyBBcHBseSBjbGFzc2VzIGFuZCBkYXRhIHRvIHRoZSB0YXJnZXQuXG4gICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50YXJnZXQpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kaXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5sdHIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5ydGwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vcnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5ob3Jpem9udGFsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudmVydGljYWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdGV4dERpcmVjdGlvbiA9IGdldENvbXB1dGVkU3R5bGUoYWRkVGFyZ2V0KS5kaXJlY3Rpb247XG5cbiAgICAgICAgICAgIGlmICh0ZXh0RGlyZWN0aW9uID09PSBcInJ0bFwiKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGV4dERpcmVjdGlvblJ0bCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRleHREaXJlY3Rpb25MdHIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYWRkTm9kZVRvKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmJhc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkVG9vbHRpcChoYW5kbGUsIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnRvb2x0aXBzW2hhbmRsZU51bWJlcl0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhZGROb2RlVG8oaGFuZGxlLmZpcnN0Q2hpbGQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50b29sdGlwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzU2xpZGVyRGlzYWJsZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NvcGVfVGFyZ2V0Lmhhc0F0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGlzYWJsZSB0aGUgc2xpZGVyIGRyYWdnaW5nIGlmIGFueSBoYW5kbGUgaXMgZGlzYWJsZWRcbiAgICAgICAgZnVuY3Rpb24gaXNIYW5kbGVEaXNhYmxlZChoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVPcmlnaW4gPSBzY29wZV9IYW5kbGVzW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlT3JpZ2luLmhhc0F0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlVG9vbHRpcHMoKSB7XG4gICAgICAgICAgICBpZiAoc2NvcGVfVG9vbHRpcHMpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVFdmVudChcInVwZGF0ZS50b29sdGlwc1wiKTtcbiAgICAgICAgICAgICAgICBzY29wZV9Ub29sdGlwcy5mb3JFYWNoKGZ1bmN0aW9uKHRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQodG9vbHRpcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzY29wZV9Ub29sdGlwcyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgdG9vbHRpcHMgb3B0aW9uIGlzIGEgc2hvcnRoYW5kIGZvciB1c2luZyB0aGUgJ3VwZGF0ZScgZXZlbnQuXG4gICAgICAgIGZ1bmN0aW9uIHRvb2x0aXBzKCkge1xuICAgICAgICAgICAgcmVtb3ZlVG9vbHRpcHMoKTtcblxuICAgICAgICAgICAgLy8gVG9vbHRpcHMgYXJlIGFkZGVkIHdpdGggb3B0aW9ucy50b29sdGlwcyBpbiBvcmlnaW5hbCBvcmRlci5cbiAgICAgICAgICAgIHNjb3BlX1Rvb2x0aXBzID0gc2NvcGVfSGFuZGxlcy5tYXAoYWRkVG9vbHRpcCk7XG5cbiAgICAgICAgICAgIGJpbmRFdmVudChcInVwZGF0ZS50b29sdGlwc1wiLCBmdW5jdGlvbih2YWx1ZXMsIGhhbmRsZU51bWJlciwgdW5lbmNvZGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzY29wZV9Ub29sdGlwc1toYW5kbGVOdW1iZXJdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZm9ybWF0dGVkVmFsdWUgPSB2YWx1ZXNbaGFuZGxlTnVtYmVyXTtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2x0aXBzW2hhbmRsZU51bWJlcl0gIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkVmFsdWUgPSBvcHRpb25zLnRvb2x0aXBzW2hhbmRsZU51bWJlcl0udG8odW5lbmNvZGVkW2hhbmRsZU51bWJlcl0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNjb3BlX1Rvb2x0aXBzW2hhbmRsZU51bWJlcl0uaW5uZXJIVE1MID0gZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFyaWEoKSB7XG4gICAgICAgICAgICBiaW5kRXZlbnQoXCJ1cGRhdGVcIiwgZnVuY3Rpb24odmFsdWVzLCBoYW5kbGVOdW1iZXIsIHVuZW5jb2RlZCwgdGFwLCBwb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgQXJpYSBWYWx1ZXMgZm9yIGFsbCBoYW5kbGVzLCBhcyBhIGNoYW5nZSBpbiBvbmUgY2hhbmdlcyBtaW4gYW5kIG1heCB2YWx1ZXMgZm9yIHRoZSBuZXh0LlxuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlID0gc2NvcGVfSGFuZGxlc1tpbmRleF07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pbiA9IGNoZWNrSGFuZGxlUG9zaXRpb24oc2NvcGVfTG9jYXRpb25zLCBpbmRleCwgMCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXggPSBjaGVja0hhbmRsZVBvc2l0aW9uKHNjb3BlX0xvY2F0aW9ucywgaW5kZXgsIDEwMCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vdyA9IHBvc2l0aW9uc1tpbmRleF07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRm9ybWF0dGVkIHZhbHVlIGZvciBkaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gb3B0aW9ucy5hcmlhRm9ybWF0LnRvKHVuZW5jb2RlZFtpbmRleF0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hcCB0byBzbGlkZXIgcmFuZ2UgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhtaW4pLnRvRml4ZWQoMSk7XG4gICAgICAgICAgICAgICAgICAgIG1heCA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhtYXgpLnRvRml4ZWQoMSk7XG4gICAgICAgICAgICAgICAgICAgIG5vdyA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhub3cpLnRvRml4ZWQoMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVtaW5cIiwgbWluKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVtYXhcIiwgbWF4KTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVub3dcIiwgbm93KTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWV0ZXh0XCIsIHRleHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRHcm91cChtb2RlLCB2YWx1ZXMsIHN0ZXBwZWQpIHtcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgcmFuZ2UuXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gXCJyYW5nZVwiIHx8IG1vZGUgPT09IFwic3RlcHNcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9TcGVjdHJ1bS54VmFsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gXCJjb3VudFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlcyA8IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAndmFsdWVzJyAoPj0gMikgcmVxdWlyZWQgZm9yIG1vZGUgJ2NvdW50Jy5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRGl2aWRlIDAgLSAxMDAgaW4gJ2NvdW50JyBwYXJ0cy5cbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSB2YWx1ZXMgLSAxO1xuICAgICAgICAgICAgICAgIHZhciBzcHJlYWQgPSAxMDAgLyBpbnRlcnZhbDtcblxuICAgICAgICAgICAgICAgIHZhbHVlcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgLy8gTGlzdCB0aGVzZSBwYXJ0cyBhbmQgaGF2ZSB0aGVtIGhhbmRsZWQgYXMgJ3Bvc2l0aW9ucycuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGludGVydmFsLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2ludGVydmFsXSA9IGludGVydmFsICogc3ByZWFkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKDEwMCk7XG5cbiAgICAgICAgICAgICAgICBtb2RlID0gXCJwb3NpdGlvbnNcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwicG9zaXRpb25zXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBNYXAgYWxsIHBlcmNlbnRhZ2VzIHRvIG9uLXJhbmdlIHZhbHVlcy5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHN0ZXBwZWQgPyBzY29wZV9TcGVjdHJ1bS5nZXRTdGVwKHZhbHVlKSA6IHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwidmFsdWVzXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdmFsdWUgbXVzdCBiZSBzdGVwcGVkLCBpdCBuZWVkcyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBwZXJjZW50YWdlIGZpcnN0LlxuICAgICAgICAgICAgICAgIGlmIChzdGVwcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb252ZXJ0IHRvIHBlcmNlbnRhZ2UsIGFwcGx5IHN0ZXAsIHJldHVybiB0byB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcoc2NvcGVfU3BlY3RydW0uZ2V0U3RlcChzY29wZV9TcGVjdHJ1bS50b1N0ZXBwaW5nKHZhbHVlKSkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIHdlIGNhbiBzaW1wbHkgdXNlIHRoZSB2YWx1ZXMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlU3ByZWFkKGRlbnNpdHksIG1vZGUsIGdyb3VwKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBzYWZlSW5jcmVtZW50KHZhbHVlLCBpbmNyZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBBdm9pZCBmbG9hdGluZyBwb2ludCB2YXJpYW5jZSBieSBkcm9wcGluZyB0aGUgc21hbGxlc3QgZGVjaW1hbCBwbGFjZXMuXG4gICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSArIGluY3JlbWVudCkudG9GaXhlZCg3KSAvIDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpbmRleGVzID0ge307XG4gICAgICAgICAgICB2YXIgZmlyc3RJblJhbmdlID0gc2NvcGVfU3BlY3RydW0ueFZhbFswXTtcbiAgICAgICAgICAgIHZhciBsYXN0SW5SYW5nZSA9IHNjb3BlX1NwZWN0cnVtLnhWYWxbc2NvcGVfU3BlY3RydW0ueFZhbC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIHZhciBpZ25vcmVGaXJzdCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGlnbm9yZUxhc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBwcmV2UGN0ID0gMDtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgY29weSBvZiB0aGUgZ3JvdXAsIHNvcnQgaXQgYW5kIGZpbHRlciBhd2F5IGFsbCBkdXBsaWNhdGVzLlxuICAgICAgICAgICAgZ3JvdXAgPSB1bmlxdWUoXG4gICAgICAgICAgICAgICAgZ3JvdXAuc2xpY2UoKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHJhbmdlIHN0YXJ0cyB3aXRoIHRoZSBmaXJzdCBlbGVtZW50LlxuICAgICAgICAgICAgaWYgKGdyb3VwWzBdICE9PSBmaXJzdEluUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBncm91cC51bnNoaWZ0KGZpcnN0SW5SYW5nZSk7XG4gICAgICAgICAgICAgICAgaWdub3JlRmlyc3QgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBMaWtld2lzZSBmb3IgdGhlIGxhc3Qgb25lLlxuICAgICAgICAgICAgaWYgKGdyb3VwW2dyb3VwLmxlbmd0aCAtIDFdICE9PSBsYXN0SW5SYW5nZSkge1xuICAgICAgICAgICAgICAgIGdyb3VwLnB1c2gobGFzdEluUmFuZ2UpO1xuICAgICAgICAgICAgICAgIGlnbm9yZUxhc3QgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBncm91cC5mb3JFYWNoKGZ1bmN0aW9uKGN1cnJlbnQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHN0ZXAgYW5kIHRoZSBsb3dlciArIHVwcGVyIHBvc2l0aW9ucy5cbiAgICAgICAgICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICB2YXIgcTtcbiAgICAgICAgICAgICAgICB2YXIgbG93ID0gY3VycmVudDtcbiAgICAgICAgICAgICAgICB2YXIgaGlnaCA9IGdyb3VwW2luZGV4ICsgMV07XG4gICAgICAgICAgICAgICAgdmFyIG5ld1BjdDtcbiAgICAgICAgICAgICAgICB2YXIgcGN0RGlmZmVyZW5jZTtcbiAgICAgICAgICAgICAgICB2YXIgcGN0UG9zO1xuICAgICAgICAgICAgICAgIHZhciB0eXBlO1xuICAgICAgICAgICAgICAgIHZhciBzdGVwcztcbiAgICAgICAgICAgICAgICB2YXIgcmVhbFN0ZXBzO1xuICAgICAgICAgICAgICAgIHZhciBzdGVwU2l6ZTtcbiAgICAgICAgICAgICAgICB2YXIgaXNTdGVwcyA9IG1vZGUgPT09IFwic3RlcHNcIjtcblxuICAgICAgICAgICAgICAgIC8vIFdoZW4gdXNpbmcgJ3N0ZXBzJyBtb2RlLCB1c2UgdGhlIHByb3ZpZGVkIHN0ZXBzLlxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2UnbGwgc3RlcCBvbiB0byB0aGUgbmV4dCBzdWJyYW5nZS5cbiAgICAgICAgICAgICAgICBpZiAoaXNTdGVwcykge1xuICAgICAgICAgICAgICAgICAgICBzdGVwID0gc2NvcGVfU3BlY3RydW0ueE51bVN0ZXBzW2luZGV4XTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGEgJ2Z1bGwnIHN0ZXAuXG4gICAgICAgICAgICAgICAgaWYgKCFzdGVwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgPSBoaWdoIC0gbG93O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIExvdyBjYW4gYmUgMCwgc28gdGVzdCBmb3IgZmFsc2UuIElmIGhpZ2ggaXMgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBhdCB0aGUgbGFzdCBzdWJyYW5nZS4gSW5kZXggMCBpcyBhbHJlYWR5IGhhbmRsZWQuXG4gICAgICAgICAgICAgICAgaWYgKGxvdyA9PT0gZmFsc2UgfHwgaGlnaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgc3RlcCBpc24ndCAwLCB3aGljaCB3b3VsZCBjYXVzZSBhbiBpbmZpbml0ZSBsb29wICgjNjU0KVxuICAgICAgICAgICAgICAgIHN0ZXAgPSBNYXRoLm1heChzdGVwLCAwLjAwMDAwMDEpO1xuXG4gICAgICAgICAgICAgICAgLy8gRmluZCBhbGwgc3RlcHMgaW4gdGhlIHN1YnJhbmdlLlxuICAgICAgICAgICAgICAgIGZvciAoaSA9IGxvdzsgaSA8PSBoaWdoOyBpID0gc2FmZUluY3JlbWVudChpLCBzdGVwKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHBlcmNlbnRhZ2UgdmFsdWUgZm9yIHRoZSBjdXJyZW50IHN0ZXAsXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgc2l6ZSBmb3IgdGhlIHN1YnJhbmdlLlxuICAgICAgICAgICAgICAgICAgICBuZXdQY3QgPSBzY29wZV9TcGVjdHJ1bS50b1N0ZXBwaW5nKGkpO1xuICAgICAgICAgICAgICAgICAgICBwY3REaWZmZXJlbmNlID0gbmV3UGN0IC0gcHJldlBjdDtcblxuICAgICAgICAgICAgICAgICAgICBzdGVwcyA9IHBjdERpZmZlcmVuY2UgLyBkZW5zaXR5O1xuICAgICAgICAgICAgICAgICAgICByZWFsU3RlcHMgPSBNYXRoLnJvdW5kKHN0ZXBzKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHJhdGlvIHJlcHJlc2VudHMgdGhlIGFtb3VudCBvZiBwZXJjZW50YWdlLXNwYWNlIGEgcG9pbnQgaW5kaWNhdGVzLlxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgYSBkZW5zaXR5IDEgdGhlIHBvaW50cy9wZXJjZW50YWdlID0gMS4gRm9yIGRlbnNpdHkgMiwgdGhhdCBwZXJjZW50YWdlIG5lZWRzIHRvIGJlIHJlLWRpdmlkZWQuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJvdW5kIHRoZSBwZXJjZW50YWdlIG9mZnNldCB0byBhbiBldmVuIG51bWJlciwgdGhlbiBkaXZpZGUgYnkgdHdvXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIHNwcmVhZCB0aGUgb2Zmc2V0IG9uIGJvdGggc2lkZXMgb2YgdGhlIHJhbmdlLlxuICAgICAgICAgICAgICAgICAgICBzdGVwU2l6ZSA9IHBjdERpZmZlcmVuY2UgLyByZWFsU3RlcHM7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGl2aWRlIGFsbCBwb2ludHMgZXZlbmx5LCBhZGRpbmcgdGhlIGNvcnJlY3QgbnVtYmVyIHRvIHRoaXMgc3VicmFuZ2UuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJ1biB1cCB0byA8PSBzbyB0aGF0IDEwMCUgZ2V0cyBhIHBvaW50LCBldmVudCBpZiBpZ25vcmVMYXN0IGlzIHNldC5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChxID0gMTsgcSA8PSByZWFsU3RlcHM7IHEgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJhdGlvIGJldHdlZW4gdGhlIHJvdW5kZWQgdmFsdWUgYW5kIHRoZSBhY3R1YWwgc2l6ZSBtaWdodCBiZSB+MSUgb2ZmLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29ycmVjdCB0aGUgcGVyY2VudGFnZSBvZmZzZXQgYnkgdGhlIG51bWJlciBvZiBwb2ludHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBlciBzdWJyYW5nZS4gZGVuc2l0eSA9IDEgd2lsbCByZXN1bHQgaW4gMTAwIHBvaW50cyBvbiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZ1bGwgcmFuZ2UsIDIgZm9yIDUwLCA0IGZvciAyNSwgZXRjLlxuICAgICAgICAgICAgICAgICAgICAgICAgcGN0UG9zID0gcHJldlBjdCArIHEgKiBzdGVwU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ZXNbcGN0UG9zLnRvRml4ZWQoNSldID0gW3Njb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhwY3RQb3MpLCAwXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIERldGVybWluZSB0aGUgcG9pbnQgdHlwZS5cbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IGdyb3VwLmluZGV4T2YoaSkgPiAtMSA/IFBJUFNfTEFSR0VfVkFMVUUgOiBpc1N0ZXBzID8gUElQU19TTUFMTF9WQUxVRSA6IFBJUFNfTk9fVkFMVUU7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRW5mb3JjZSB0aGUgJ2lnbm9yZUZpcnN0JyBvcHRpb24gYnkgb3ZlcndyaXRpbmcgdGhlIHR5cGUgZm9yIDAuXG4gICAgICAgICAgICAgICAgICAgIGlmICghaW5kZXggJiYgaWdub3JlRmlyc3QgJiYgaSAhPT0gaGlnaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIShpID09PSBoaWdoICYmIGlnbm9yZUxhc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSAndHlwZScgb2YgdGhpcyBwb2ludC4gMCA9IHBsYWluLCAxID0gcmVhbCB2YWx1ZSwgMiA9IHN0ZXAgdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleGVzW25ld1BjdC50b0ZpeGVkKDUpXSA9IFtpLCB0eXBlXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcGVyY2VudGFnZSBjb3VudC5cbiAgICAgICAgICAgICAgICAgICAgcHJldlBjdCA9IG5ld1BjdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhZGRNYXJraW5nKHNwcmVhZCwgZmlsdGVyRnVuYywgZm9ybWF0dGVyKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHNjb3BlX0RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICAgICAgICAgIHZhciB2YWx1ZVNpemVDbGFzc2VzID0gW107XG4gICAgICAgICAgICB2YWx1ZVNpemVDbGFzc2VzW1BJUFNfTk9fVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlTm9ybWFsO1xuICAgICAgICAgICAgdmFsdWVTaXplQ2xhc3Nlc1tQSVBTX0xBUkdFX1ZBTFVFXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZUxhcmdlO1xuICAgICAgICAgICAgdmFsdWVTaXplQ2xhc3Nlc1tQSVBTX1NNQUxMX1ZBTFVFXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZVN1YjtcblxuICAgICAgICAgICAgdmFyIG1hcmtlclNpemVDbGFzc2VzID0gW107XG4gICAgICAgICAgICBtYXJrZXJTaXplQ2xhc3Nlc1tQSVBTX05PX1ZBTFVFXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXJOb3JtYWw7XG4gICAgICAgICAgICBtYXJrZXJTaXplQ2xhc3Nlc1tQSVBTX0xBUkdFX1ZBTFVFXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXJMYXJnZTtcbiAgICAgICAgICAgIG1hcmtlclNpemVDbGFzc2VzW1BJUFNfU01BTExfVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlclN1YjtcblxuICAgICAgICAgICAgdmFyIHZhbHVlT3JpZW50YXRpb25DbGFzc2VzID0gW29wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZUhvcml6b250YWwsIG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZVZlcnRpY2FsXTtcbiAgICAgICAgICAgIHZhciBtYXJrZXJPcmllbnRhdGlvbkNsYXNzZXMgPSBbb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlckhvcml6b250YWwsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXJWZXJ0aWNhbF07XG5cbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5waXBzKTtcbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIG9wdGlvbnMub3J0ID09PSAwID8gb3B0aW9ucy5jc3NDbGFzc2VzLnBpcHNIb3Jpem9udGFsIDogb3B0aW9ucy5jc3NDbGFzc2VzLnBpcHNWZXJ0aWNhbCk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldENsYXNzZXModHlwZSwgc291cmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBzb3VyY2UgPT09IG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgb3JpZW50YXRpb25DbGFzc2VzID0gYSA/IHZhbHVlT3JpZW50YXRpb25DbGFzc2VzIDogbWFya2VyT3JpZW50YXRpb25DbGFzc2VzO1xuICAgICAgICAgICAgICAgIHZhciBzaXplQ2xhc3NlcyA9IGEgPyB2YWx1ZVNpemVDbGFzc2VzIDogbWFya2VyU2l6ZUNsYXNzZXM7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlICsgXCIgXCIgKyBvcmllbnRhdGlvbkNsYXNzZXNbb3B0aW9ucy5vcnRdICsgXCIgXCIgKyBzaXplQ2xhc3Nlc1t0eXBlXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gYWRkU3ByZWFkKG9mZnNldCwgdmFsdWUsIHR5cGUpIHtcbiAgICAgICAgICAgICAgICAvLyBBcHBseSB0aGUgZmlsdGVyIGZ1bmN0aW9uLCBpZiBpdCBpcyBzZXQuXG4gICAgICAgICAgICAgICAgdHlwZSA9IGZpbHRlckZ1bmMgPyBmaWx0ZXJGdW5jKHZhbHVlLCB0eXBlKSA6IHR5cGU7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gUElQU19OT05FKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgYSBtYXJrZXIgZm9yIGV2ZXJ5IHBvaW50XG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBhZGROb2RlVG8oZWxlbWVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIG5vZGUuY2xhc3NOYW1lID0gZ2V0Q2xhc3Nlcyh0eXBlLCBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyKTtcbiAgICAgICAgICAgICAgICBub2RlLnN0eWxlW29wdGlvbnMuc3R5bGVdID0gb2Zmc2V0ICsgXCIlXCI7XG5cbiAgICAgICAgICAgICAgICAvLyBWYWx1ZXMgYXJlIG9ubHkgYXBwZW5kZWQgZm9yIHBvaW50cyBtYXJrZWQgJzEnIG9yICcyJy5cbiAgICAgICAgICAgICAgICBpZiAodHlwZSA+IFBJUFNfTk9fVkFMVUUpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGFkZE5vZGVUbyhlbGVtZW50LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuY2xhc3NOYW1lID0gZ2V0Q2xhc3Nlcyh0eXBlLCBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlW29wdGlvbnMuc3R5bGVdID0gb2Zmc2V0ICsgXCIlXCI7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuaW5uZXJIVE1MID0gZm9ybWF0dGVyLnRvKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFwcGVuZCBhbGwgcG9pbnRzLlxuICAgICAgICAgICAgT2JqZWN0LmtleXMoc3ByZWFkKS5mb3JFYWNoKGZ1bmN0aW9uKG9mZnNldCkge1xuICAgICAgICAgICAgICAgIGFkZFNwcmVhZChvZmZzZXQsIHNwcmVhZFtvZmZzZXRdWzBdLCBzcHJlYWRbb2Zmc2V0XVsxXSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZW1vdmVQaXBzKCkge1xuICAgICAgICAgICAgaWYgKHNjb3BlX1BpcHMpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50KHNjb3BlX1BpcHMpO1xuICAgICAgICAgICAgICAgIHNjb3BlX1BpcHMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcGlwcyhncmlkKSB7XG4gICAgICAgICAgICAvLyBGaXggIzY2OVxuICAgICAgICAgICAgcmVtb3ZlUGlwcygpO1xuXG4gICAgICAgICAgICB2YXIgbW9kZSA9IGdyaWQubW9kZTtcbiAgICAgICAgICAgIHZhciBkZW5zaXR5ID0gZ3JpZC5kZW5zaXR5IHx8IDE7XG4gICAgICAgICAgICB2YXIgZmlsdGVyID0gZ3JpZC5maWx0ZXIgfHwgZmFsc2U7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gZ3JpZC52YWx1ZXMgfHwgZmFsc2U7XG4gICAgICAgICAgICB2YXIgc3RlcHBlZCA9IGdyaWQuc3RlcHBlZCB8fCBmYWxzZTtcbiAgICAgICAgICAgIHZhciBncm91cCA9IGdldEdyb3VwKG1vZGUsIHZhbHVlcywgc3RlcHBlZCk7XG4gICAgICAgICAgICB2YXIgc3ByZWFkID0gZ2VuZXJhdGVTcHJlYWQoZGVuc2l0eSwgbW9kZSwgZ3JvdXApO1xuICAgICAgICAgICAgdmFyIGZvcm1hdCA9IGdyaWQuZm9ybWF0IHx8IHtcbiAgICAgICAgICAgICAgICB0bzogTWF0aC5yb3VuZFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgc2NvcGVfUGlwcyA9IHNjb3BlX1RhcmdldC5hcHBlbmRDaGlsZChhZGRNYXJraW5nKHNwcmVhZCwgZmlsdGVyLCBmb3JtYXQpKTtcblxuICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1BpcHM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG9ydGhhbmQgZm9yIGJhc2UgZGltZW5zaW9ucy5cbiAgICAgICAgZnVuY3Rpb24gYmFzZVNpemUoKSB7XG4gICAgICAgICAgICB2YXIgcmVjdCA9IHNjb3BlX0Jhc2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB2YXIgYWx0ID0gXCJvZmZzZXRcIiArIFtcIldpZHRoXCIsIFwiSGVpZ2h0XCJdW29wdGlvbnMub3J0XTtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLm9ydCA9PT0gMCA/IHJlY3Qud2lkdGggfHwgc2NvcGVfQmFzZVthbHRdIDogcmVjdC5oZWlnaHQgfHwgc2NvcGVfQmFzZVthbHRdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlciBmb3IgYXR0YWNoaW5nIGV2ZW50cyB0cm91Z2ggYSBwcm94eS5cbiAgICAgICAgZnVuY3Rpb24gYXR0YWNoRXZlbnQoZXZlbnRzLCBlbGVtZW50LCBjYWxsYmFjaywgZGF0YSkge1xuICAgICAgICAgICAgLy8gVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byAnZmlsdGVyJyBldmVudHMgdG8gdGhlIHNsaWRlci5cbiAgICAgICAgICAgIC8vIGVsZW1lbnQgaXMgYSBub2RlLCBub3QgYSBub2RlTGlzdFxuXG4gICAgICAgICAgICB2YXIgbWV0aG9kID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGUgPSBmaXhFdmVudChlLCBkYXRhLnBhZ2VPZmZzZXQsIGRhdGEudGFyZ2V0IHx8IGVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgLy8gZml4RXZlbnQgcmV0dXJucyBmYWxzZSBpZiB0aGlzIGV2ZW50IGhhcyBhIGRpZmZlcmVudCB0YXJnZXRcbiAgICAgICAgICAgICAgICAvLyB3aGVuIGhhbmRsaW5nIChtdWx0aS0pIHRvdWNoIGV2ZW50cztcbiAgICAgICAgICAgICAgICBpZiAoIWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGRvTm90UmVqZWN0IGlzIHBhc3NlZCBieSBhbGwgZW5kIGV2ZW50cyB0byBtYWtlIHN1cmUgcmVsZWFzZWQgdG91Y2hlc1xuICAgICAgICAgICAgICAgIC8vIGFyZSBub3QgcmVqZWN0ZWQsIGxlYXZpbmcgdGhlIHNsaWRlciBcInN0dWNrXCIgdG8gdGhlIGN1cnNvcjtcbiAgICAgICAgICAgICAgICBpZiAoaXNTbGlkZXJEaXNhYmxlZCgpICYmICFkYXRhLmRvTm90UmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTdG9wIGlmIGFuIGFjdGl2ZSAndGFwJyB0cmFuc2l0aW9uIGlzIHRha2luZyBwbGFjZS5cbiAgICAgICAgICAgICAgICBpZiAoaGFzQ2xhc3Moc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGFwKSAmJiAhZGF0YS5kb05vdFJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIHJpZ2h0IG9yIG1pZGRsZSBjbGlja3Mgb24gc3RhcnQgIzQ1NFxuICAgICAgICAgICAgICAgIGlmIChldmVudHMgPT09IGFjdGlvbnMuc3RhcnQgJiYgZS5idXR0b25zICE9PSB1bmRlZmluZWQgJiYgZS5idXR0b25zID4gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIHJpZ2h0IG9yIG1pZGRsZSBjbGlja3Mgb24gc3RhcnQgIzQ1NFxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmhvdmVyICYmIGUuYnV0dG9ucykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gJ3N1cHBvcnRzUGFzc2l2ZScgaXMgb25seSB0cnVlIGlmIGEgYnJvd3NlciBhbHNvIHN1cHBvcnRzIHRvdWNoLWFjdGlvbjogbm9uZSBpbiBDU1MuXG4gICAgICAgICAgICAgICAgLy8gaU9TIHNhZmFyaSBkb2VzIG5vdCwgc28gaXQgZG9lc24ndCBnZXQgdG8gYmVuZWZpdCBmcm9tIHBhc3NpdmUgc2Nyb2xsaW5nLiBpT1MgZG9lcyBzdXBwb3J0XG4gICAgICAgICAgICAgICAgLy8gdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb24sIGJ1dCB0aGF0IGFsbG93cyBwYW5uaW5nLCB3aGljaCBicmVha3NcbiAgICAgICAgICAgICAgICAvLyBzbGlkZXJzIGFmdGVyIHpvb21pbmcvb24gbm9uLXJlc3BvbnNpdmUgcGFnZXMuXG4gICAgICAgICAgICAgICAgLy8gU2VlOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTMzMTEyXG4gICAgICAgICAgICAgICAgaWYgKCFzdXBwb3J0c1Bhc3NpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGUuY2FsY1BvaW50ID0gZS5wb2ludHNbb3B0aW9ucy5vcnRdO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2FsbCB0aGUgZXZlbnQgaGFuZGxlciB3aXRoIHRoZSBldmVudCBbIGFuZCBhZGRpdGlvbmFsIGRhdGEgXS5cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlLCBkYXRhKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBtZXRob2RzID0gW107XG5cbiAgICAgICAgICAgIC8vIEJpbmQgYSBjbG9zdXJlIG9uIHRoZSB0YXJnZXQgZm9yIGV2ZXJ5IGV2ZW50IHR5cGUuXG4gICAgICAgICAgICBldmVudHMuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbWV0aG9kLCBzdXBwb3J0c1Bhc3NpdmUgPyB7IHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBtZXRob2RzLnB1c2goW2V2ZW50TmFtZSwgbWV0aG9kXSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZHM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcm92aWRlIGEgY2xlYW4gZXZlbnQgd2l0aCBzdGFuZGFyZGl6ZWQgb2Zmc2V0IHZhbHVlcy5cbiAgICAgICAgZnVuY3Rpb24gZml4RXZlbnQoZSwgcGFnZU9mZnNldCwgZXZlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIC8vIEZpbHRlciB0aGUgZXZlbnQgdG8gcmVnaXN0ZXIgdGhlIHR5cGUsIHdoaWNoIGNhbiBiZVxuICAgICAgICAgICAgLy8gdG91Y2gsIG1vdXNlIG9yIHBvaW50ZXIuIE9mZnNldCBjaGFuZ2VzIG5lZWQgdG8gYmVcbiAgICAgICAgICAgIC8vIG1hZGUgb24gYW4gZXZlbnQgc3BlY2lmaWMgYmFzaXMuXG4gICAgICAgICAgICB2YXIgdG91Y2ggPSBlLnR5cGUuaW5kZXhPZihcInRvdWNoXCIpID09PSAwO1xuICAgICAgICAgICAgdmFyIG1vdXNlID0gZS50eXBlLmluZGV4T2YoXCJtb3VzZVwiKSA9PT0gMDtcbiAgICAgICAgICAgIHZhciBwb2ludGVyID0gZS50eXBlLmluZGV4T2YoXCJwb2ludGVyXCIpID09PSAwO1xuXG4gICAgICAgICAgICB2YXIgeDtcbiAgICAgICAgICAgIHZhciB5O1xuXG4gICAgICAgICAgICAvLyBJRTEwIGltcGxlbWVudGVkIHBvaW50ZXIgZXZlbnRzIHdpdGggYSBwcmVmaXg7XG4gICAgICAgICAgICBpZiAoZS50eXBlLmluZGV4T2YoXCJNU1BvaW50ZXJcIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwb2ludGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVGhlIG9ubHkgdGhpbmcgb25lIGhhbmRsZSBzaG91bGQgYmUgY29uY2VybmVkIGFib3V0IGlzIHRoZSB0b3VjaGVzIHRoYXQgb3JpZ2luYXRlZCBvbiB0b3Agb2YgaXQuXG4gICAgICAgICAgICBpZiAodG91Y2gpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm5zIHRydWUgaWYgYSB0b3VjaCBvcmlnaW5hdGVkIG9uIHRoZSB0YXJnZXQuXG4gICAgICAgICAgICAgICAgdmFyIGlzVG91Y2hPblRhcmdldCA9IGZ1bmN0aW9uKGNoZWNrVG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrVG91Y2gudGFyZ2V0ID09PSBldmVudFRhcmdldCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRUYXJnZXQuY29udGFpbnMoY2hlY2tUb3VjaC50YXJnZXQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoY2hlY2tUb3VjaC50YXJnZXQuc2hhZG93Um9vdCAmJiBjaGVja1RvdWNoLnRhcmdldC5zaGFkb3dSb290LmNvbnRhaW5zKGV2ZW50VGFyZ2V0KSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgdG91Y2hzdGFydCBldmVudHMsIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoZXJlIGlzIHN0aWxsIG5vIG1vcmUgdGhhbiBvbmVcbiAgICAgICAgICAgICAgICAvLyB0b3VjaCBvbiB0aGUgdGFyZ2V0IHNvIHdlIGxvb2sgYW1vbmdzdCBhbGwgdG91Y2hlcy5cbiAgICAgICAgICAgICAgICBpZiAoZS50eXBlID09PSBcInRvdWNoc3RhcnRcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0VG91Y2hlcyA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChlLnRvdWNoZXMsIGlzVG91Y2hPblRhcmdldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IHN1cHBvcnQgbW9yZSB0aGFuIG9uZSB0b3VjaCBwZXIgaGFuZGxlLlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB4ID0gdGFyZ2V0VG91Y2hlc1swXS5wYWdlWDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHRhcmdldFRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW4gdGhlIG90aGVyIGNhc2VzLCBmaW5kIG9uIGNoYW5nZWRUb3VjaGVzIGlzIGVub3VnaC5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldFRvdWNoID0gQXJyYXkucHJvdG90eXBlLmZpbmQuY2FsbChlLmNoYW5nZWRUb3VjaGVzLCBpc1RvdWNoT25UYXJnZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbmNlbCBpZiB0aGUgdGFyZ2V0IHRvdWNoIGhhcyBub3QgbW92ZWQuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0VG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHggPSB0YXJnZXRUb3VjaC5wYWdlWDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHRhcmdldFRvdWNoLnBhZ2VZO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFnZU9mZnNldCA9IHBhZ2VPZmZzZXQgfHwgZ2V0UGFnZU9mZnNldChzY29wZV9Eb2N1bWVudCk7XG5cbiAgICAgICAgICAgIGlmIChtb3VzZSB8fCBwb2ludGVyKSB7XG4gICAgICAgICAgICAgICAgeCA9IGUuY2xpZW50WCArIHBhZ2VPZmZzZXQueDtcbiAgICAgICAgICAgICAgICB5ID0gZS5jbGllbnRZICsgcGFnZU9mZnNldC55O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlLnBhZ2VPZmZzZXQgPSBwYWdlT2Zmc2V0O1xuICAgICAgICAgICAgZS5wb2ludHMgPSBbeCwgeV07XG4gICAgICAgICAgICBlLmN1cnNvciA9IG1vdXNlIHx8IHBvaW50ZXI7IC8vIEZpeCAjNDM1XG5cbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVHJhbnNsYXRlIGEgY29vcmRpbmF0ZSBpbiB0aGUgZG9jdW1lbnQgdG8gYSBwZXJjZW50YWdlIG9uIHRoZSBzbGlkZXJcbiAgICAgICAgZnVuY3Rpb24gY2FsY1BvaW50VG9QZXJjZW50YWdlKGNhbGNQb2ludCkge1xuICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gY2FsY1BvaW50IC0gb2Zmc2V0KHNjb3BlX0Jhc2UsIG9wdGlvbnMub3J0KTtcbiAgICAgICAgICAgIHZhciBwcm9wb3NhbCA9IChsb2NhdGlvbiAqIDEwMCkgLyBiYXNlU2l6ZSgpO1xuXG4gICAgICAgICAgICAvLyBDbGFtcCBwcm9wb3NhbCBiZXR3ZWVuIDAlIGFuZCAxMDAlXG4gICAgICAgICAgICAvLyBPdXQtb2YtYm91bmQgY29vcmRpbmF0ZXMgbWF5IG9jY3VyIHdoZW4gLm5vVWktYmFzZSBwc2V1ZG8tZWxlbWVudHNcbiAgICAgICAgICAgIC8vIGFyZSB1c2VkIChlLmcuIGNvbnRhaW5lZCBoYW5kbGVzIGZlYXR1cmUpXG4gICAgICAgICAgICBwcm9wb3NhbCA9IGxpbWl0KHByb3Bvc2FsKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGlyID8gMTAwIC0gcHJvcG9zYWwgOiBwcm9wb3NhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbmQgaGFuZGxlIGNsb3Nlc3QgdG8gYSBjZXJ0YWluIHBlcmNlbnRhZ2Ugb24gdGhlIHNsaWRlclxuICAgICAgICBmdW5jdGlvbiBnZXRDbG9zZXN0SGFuZGxlKGNsaWNrZWRQb3NpdGlvbikge1xuICAgICAgICAgICAgdmFyIHNtYWxsZXN0RGlmZmVyZW5jZSA9IDEwMDtcbiAgICAgICAgICAgIHZhciBoYW5kbGVOdW1iZXIgPSBmYWxzZTtcblxuICAgICAgICAgICAgc2NvcGVfSGFuZGxlcy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAvLyBEaXNhYmxlZCBoYW5kbGVzIGFyZSBpZ25vcmVkXG4gICAgICAgICAgICAgICAgaWYgKGlzSGFuZGxlRGlzYWJsZWQoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlUG9zaXRpb24gPSBzY29wZV9Mb2NhdGlvbnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHZhciBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUgPSBNYXRoLmFicyhoYW5kbGVQb3NpdGlvbiAtIGNsaWNrZWRQb3NpdGlvbik7XG5cbiAgICAgICAgICAgICAgICAvLyBJbml0aWFsIHN0YXRlXG4gICAgICAgICAgICAgICAgdmFyIGNsaWNrQXRFZGdlID0gZGlmZmVyZW5jZVdpdGhUaGlzSGFuZGxlID09PSAxMDAgJiYgc21hbGxlc3REaWZmZXJlbmNlID09PSAxMDA7XG5cbiAgICAgICAgICAgICAgICAvLyBEaWZmZXJlbmNlIHdpdGggdGhpcyBoYW5kbGUgaXMgc21hbGxlciB0aGFuIHRoZSBwcmV2aW91c2x5IGNoZWNrZWQgaGFuZGxlXG4gICAgICAgICAgICAgICAgdmFyIGlzQ2xvc2VyID0gZGlmZmVyZW5jZVdpdGhUaGlzSGFuZGxlIDwgc21hbGxlc3REaWZmZXJlbmNlO1xuICAgICAgICAgICAgICAgIHZhciBpc0Nsb3NlckFmdGVyID0gZGlmZmVyZW5jZVdpdGhUaGlzSGFuZGxlIDw9IHNtYWxsZXN0RGlmZmVyZW5jZSAmJiBjbGlja2VkUG9zaXRpb24gPiBoYW5kbGVQb3NpdGlvbjtcblxuICAgICAgICAgICAgICAgIGlmIChpc0Nsb3NlciB8fCBpc0Nsb3NlckFmdGVyIHx8IGNsaWNrQXRFZGdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlciA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICBzbWFsbGVzdERpZmZlcmVuY2UgPSBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVOdW1iZXI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaXJlICdlbmQnIHdoZW4gYSBtb3VzZSBvciBwZW4gbGVhdmVzIHRoZSBkb2N1bWVudC5cbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRMZWF2ZShldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IFwibW91c2VvdXRcIiAmJiBldmVudC50YXJnZXQubm9kZU5hbWUgPT09IFwiSFRNTFwiICYmIGV2ZW50LnJlbGF0ZWRUYXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBldmVudEVuZChldmVudCwgZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUgbW92ZW1lbnQgb24gZG9jdW1lbnQgZm9yIGhhbmRsZSBhbmQgcmFuZ2UgZHJhZy5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRNb3ZlKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgICAgICAvLyBGaXggIzQ5OFxuICAgICAgICAgICAgLy8gQ2hlY2sgdmFsdWUgb2YgLmJ1dHRvbnMgaW4gJ3N0YXJ0JyB0byB3b3JrIGFyb3VuZCBhIGJ1ZyBpbiBJRTEwIG1vYmlsZSAoZGF0YS5idXR0b25zUHJvcGVydHkpLlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy85MjcwMDUvbW9iaWxlLWllMTAtd2luZG93cy1waG9uZS1idXR0b25zLXByb3BlcnR5LW9mLXBvaW50ZXJtb3ZlLWV2ZW50LWFsd2F5cy16ZXJvXG4gICAgICAgICAgICAvLyBJRTkgaGFzIC5idXR0b25zIGFuZCAud2hpY2ggemVybyBvbiBtb3VzZW1vdmUuXG4gICAgICAgICAgICAvLyBGaXJlZm94IGJyZWFrcyB0aGUgc3BlYyBNRE4gZGVmaW5lcy5cbiAgICAgICAgICAgIGlmIChuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKFwiTVNJRSA5XCIpID09PSAtMSAmJiBldmVudC5idXR0b25zID09PSAwICYmIGRhdGEuYnV0dG9uc1Byb3BlcnR5ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50RW5kKGV2ZW50LCBkYXRhKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgYXJlIG1vdmluZyB1cCBvciBkb3duXG4gICAgICAgICAgICB2YXIgbW92ZW1lbnQgPSAob3B0aW9ucy5kaXIgPyAtMSA6IDEpICogKGV2ZW50LmNhbGNQb2ludCAtIGRhdGEuc3RhcnRDYWxjUG9pbnQpO1xuXG4gICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSBtb3ZlbWVudCBpbnRvIGEgcGVyY2VudGFnZSBvZiB0aGUgc2xpZGVyIHdpZHRoL2hlaWdodFxuICAgICAgICAgICAgdmFyIHByb3Bvc2FsID0gKG1vdmVtZW50ICogMTAwKSAvIGRhdGEuYmFzZVNpemU7XG5cbiAgICAgICAgICAgIG1vdmVIYW5kbGVzKG1vdmVtZW50ID4gMCwgcHJvcG9zYWwsIGRhdGEubG9jYXRpb25zLCBkYXRhLmhhbmRsZU51bWJlcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVW5iaW5kIG1vdmUgZXZlbnRzIG9uIGRvY3VtZW50LCBjYWxsIGNhbGxiYWNrcy5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRFbmQoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIC8vIFRoZSBoYW5kbGUgaXMgbm8gbG9uZ2VyIGFjdGl2ZSwgc28gcmVtb3ZlIHRoZSBjbGFzcy5cbiAgICAgICAgICAgIGlmIChkYXRhLmhhbmRsZSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGRhdGEuaGFuZGxlLCBvcHRpb25zLmNzc0NsYXNzZXMuYWN0aXZlKTtcbiAgICAgICAgICAgICAgICBzY29wZV9BY3RpdmVIYW5kbGVzQ291bnQgLT0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVW5iaW5kIHRoZSBtb3ZlIGFuZCBlbmQgZXZlbnRzLCB3aGljaCBhcmUgYWRkZWQgb24gJ3N0YXJ0Jy5cbiAgICAgICAgICAgIGRhdGEubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgICAgIHNjb3BlX0RvY3VtZW50RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGNbMF0sIGNbMV0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChzY29wZV9BY3RpdmVIYW5kbGVzQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZHJhZ2dpbmcgY2xhc3MuXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3Moc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMuZHJhZyk7XG4gICAgICAgICAgICAgICAgc2V0WmluZGV4KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgY3Vyc29yIHN0eWxlcyBhbmQgdGV4dC1zZWxlY3Rpb24gZXZlbnRzIGJvdW5kIHRvIHRoZSBib2R5LlxuICAgICAgICAgICAgICAgIGlmIChldmVudC5jdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVfQm9keS5zdHlsZS5jdXJzb3IgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzZWxlY3RzdGFydFwiLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhLmhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJjaGFuZ2VcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJzZXRcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJlbmRcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmluZCBtb3ZlIGV2ZW50cyBvbiBkb2N1bWVudC5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRTdGFydChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgLy8gSWdub3JlIGV2ZW50IGlmIGFueSBoYW5kbGUgaXMgZGlzYWJsZWRcbiAgICAgICAgICAgIGlmIChkYXRhLmhhbmRsZU51bWJlcnMuc29tZShpc0hhbmRsZURpc2FibGVkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGhhbmRsZTtcblxuICAgICAgICAgICAgaWYgKGRhdGEuaGFuZGxlTnVtYmVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlT3JpZ2luID0gc2NvcGVfSGFuZGxlc1tkYXRhLmhhbmRsZU51bWJlcnNbMF1dO1xuXG4gICAgICAgICAgICAgICAgaGFuZGxlID0gaGFuZGxlT3JpZ2luLmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgICAgIHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCArPSAxO1xuXG4gICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgaGFuZGxlIGFzICdhY3RpdmUnIHNvIGl0IGNhbiBiZSBzdHlsZWQuXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoaGFuZGxlLCBvcHRpb25zLmNzc0NsYXNzZXMuYWN0aXZlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQSBkcmFnIHNob3VsZCBuZXZlciBwcm9wYWdhdGUgdXAgdG8gdGhlICd0YXAnIGV2ZW50LlxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgIC8vIFJlY29yZCB0aGUgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gICAgICAgICAgICAvLyBBdHRhY2ggdGhlIG1vdmUgYW5kIGVuZCBldmVudHMuXG4gICAgICAgICAgICB2YXIgbW92ZUV2ZW50ID0gYXR0YWNoRXZlbnQoYWN0aW9ucy5tb3ZlLCBzY29wZV9Eb2N1bWVudEVsZW1lbnQsIGV2ZW50TW92ZSwge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBldmVudCB0YXJnZXQgaGFzIGNoYW5nZWQgc28gd2UgbmVlZCB0byBwcm9wYWdhdGUgdGhlIG9yaWdpbmFsIG9uZSBzbyB0aGF0IHdlIGtlZXBcbiAgICAgICAgICAgICAgICAvLyByZWx5aW5nIG9uIGl0IHRvIGV4dHJhY3QgdGFyZ2V0IHRvdWNoZXMuXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBoYW5kbGUsXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsXG4gICAgICAgICAgICAgICAgc3RhcnRDYWxjUG9pbnQ6IGV2ZW50LmNhbGNQb2ludCxcbiAgICAgICAgICAgICAgICBiYXNlU2l6ZTogYmFzZVNpemUoKSxcbiAgICAgICAgICAgICAgICBwYWdlT2Zmc2V0OiBldmVudC5wYWdlT2Zmc2V0LFxuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnM6IGRhdGEuaGFuZGxlTnVtYmVycyxcbiAgICAgICAgICAgICAgICBidXR0b25zUHJvcGVydHk6IGV2ZW50LmJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgbG9jYXRpb25zOiBzY29wZV9Mb2NhdGlvbnMuc2xpY2UoKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBlbmRFdmVudCA9IGF0dGFjaEV2ZW50KGFjdGlvbnMuZW5kLCBzY29wZV9Eb2N1bWVudEVsZW1lbnQsIGV2ZW50RW5kLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBoYW5kbGUsXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsXG4gICAgICAgICAgICAgICAgZG9Ob3RSZWplY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogZGF0YS5oYW5kbGVOdW1iZXJzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIG91dEV2ZW50ID0gYXR0YWNoRXZlbnQoXCJtb3VzZW91dFwiLCBzY29wZV9Eb2N1bWVudEVsZW1lbnQsIGRvY3VtZW50TGVhdmUsIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGV2ZW50LnRhcmdldCxcbiAgICAgICAgICAgICAgICBoYW5kbGU6IGhhbmRsZSxcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnM6IGxpc3RlbmVycyxcbiAgICAgICAgICAgICAgICBkb05vdFJlamVjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBkYXRhLmhhbmRsZU51bWJlcnNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBXZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBwdXNoZWQgdGhlIGxpc3RlbmVycyBpbiB0aGUgbGlzdGVuZXIgbGlzdCByYXRoZXIgdGhhbiBjcmVhdGluZ1xuICAgICAgICAgICAgLy8gYSBuZXcgb25lIGFzIGl0IGhhcyBhbHJlYWR5IGJlZW4gcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVycy5cbiAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoLmFwcGx5KGxpc3RlbmVycywgbW92ZUV2ZW50LmNvbmNhdChlbmRFdmVudCwgb3V0RXZlbnQpKTtcblxuICAgICAgICAgICAgLy8gVGV4dCBzZWxlY3Rpb24gaXNuJ3QgYW4gaXNzdWUgb24gdG91Y2ggZGV2aWNlcyxcbiAgICAgICAgICAgIC8vIHNvIGFkZGluZyBjdXJzb3Igc3R5bGVzIGNhbiBiZSBza2lwcGVkLlxuICAgICAgICAgICAgaWYgKGV2ZW50LmN1cnNvcikge1xuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdGhlICdJJyBjdXJzb3IgYW5kIGV4dGVuZCB0aGUgcmFuZ2UtZHJhZyBjdXJzb3IuXG4gICAgICAgICAgICAgICAgc2NvcGVfQm9keS5zdHlsZS5jdXJzb3IgPSBnZXRDb21wdXRlZFN0eWxlKGV2ZW50LnRhcmdldCkuY3Vyc29yO1xuXG4gICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgdGFyZ2V0IHdpdGggYSBkcmFnZ2luZyBzdGF0ZS5cbiAgICAgICAgICAgICAgICBpZiAoc2NvcGVfSGFuZGxlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmRyYWcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdGV4dCBzZWxlY3Rpb24gd2hlbiBkcmFnZ2luZyB0aGUgaGFuZGxlcy5cbiAgICAgICAgICAgICAgICAvLyBJbiBub1VpU2xpZGVyIDw9IDkuMi4wLCB0aGlzIHdhcyBoYW5kbGVkIGJ5IGNhbGxpbmcgcHJldmVudERlZmF1bHQgb24gbW91c2UvdG91Y2ggc3RhcnQvbW92ZSxcbiAgICAgICAgICAgICAgICAvLyB3aGljaCBpcyBzY3JvbGwgYmxvY2tpbmcuIFRoZSBzZWxlY3RzdGFydCBldmVudCBpcyBzdXBwb3J0ZWQgYnkgRmlyZUZveCBzdGFydGluZyBmcm9tIHZlcnNpb24gNTIsXG4gICAgICAgICAgICAgICAgLy8gbWVhbmluZyB0aGUgb25seSBob2xkb3V0IGlzIGlPUyBTYWZhcmkuIFRoaXMgZG9lc24ndCBtYXR0ZXI6IHRleHQgc2VsZWN0aW9uIGlzbid0IHRyaWdnZXJlZCB0aGVyZS5cbiAgICAgICAgICAgICAgICAvLyBUaGUgJ2N1cnNvcicgZmxhZyBpcyBmYWxzZS5cbiAgICAgICAgICAgICAgICAvLyBTZWU6IGh0dHA6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXNlbGVjdHN0YXJ0XG4gICAgICAgICAgICAgICAgc2NvcGVfQm9keS5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0c3RhcnRcIiwgcHJldmVudERlZmF1bHQsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0YS5oYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic3RhcnRcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTW92ZSBjbG9zZXN0IGhhbmRsZSB0byB0YXBwZWQgbG9jYXRpb24uXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50VGFwKGV2ZW50KSB7XG4gICAgICAgICAgICAvLyBUaGUgdGFwIGV2ZW50IHNob3VsZG4ndCBwcm9wYWdhdGUgdXBcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICB2YXIgcHJvcG9zYWwgPSBjYWxjUG9pbnRUb1BlcmNlbnRhZ2UoZXZlbnQuY2FsY1BvaW50KTtcbiAgICAgICAgICAgIHZhciBoYW5kbGVOdW1iZXIgPSBnZXRDbG9zZXN0SGFuZGxlKHByb3Bvc2FsKTtcblxuICAgICAgICAgICAgLy8gVGFja2xlIHRoZSBjYXNlIHRoYXQgYWxsIGhhbmRsZXMgYXJlICdkaXNhYmxlZCcuXG4gICAgICAgICAgICBpZiAoaGFuZGxlTnVtYmVyID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmxhZyB0aGUgc2xpZGVyIGFzIGl0IGlzIG5vdyBpbiBhIHRyYW5zaXRpb25hbCBzdGF0ZS5cbiAgICAgICAgICAgIC8vIFRyYW5zaXRpb24gdGFrZXMgYSBjb25maWd1cmFibGUgYW1vdW50IG9mIG1zIChkZWZhdWx0IDMwMCkuIFJlLWVuYWJsZSB0aGUgc2xpZGVyIGFmdGVyIHRoYXQuXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuZXZlbnRzLnNuYXApIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzc0ZvcihzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50YXAsIG9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCBwcm9wb3NhbCwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIHNldFppbmRleCgpO1xuXG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJzbGlkZVwiLCBoYW5kbGVOdW1iZXIsIHRydWUpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlciwgdHJ1ZSk7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJjaGFuZ2VcIiwgaGFuZGxlTnVtYmVyLCB0cnVlKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ldmVudHMuc25hcCkge1xuICAgICAgICAgICAgICAgIGV2ZW50U3RhcnQoZXZlbnQsIHsgaGFuZGxlTnVtYmVyczogW2hhbmRsZU51bWJlcl0gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaXJlcyBhICdob3ZlcicgZXZlbnQgZm9yIGEgaG92ZXJlZCBtb3VzZS9wZW4gcG9zaXRpb24uXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50SG92ZXIoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBwcm9wb3NhbCA9IGNhbGNQb2ludFRvUGVyY2VudGFnZShldmVudC5jYWxjUG9pbnQpO1xuXG4gICAgICAgICAgICB2YXIgdG8gPSBzY29wZV9TcGVjdHJ1bS5nZXRTdGVwKHByb3Bvc2FsKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyh0byk7XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNjb3BlX0V2ZW50cykuZm9yRWFjaChmdW5jdGlvbih0YXJnZXRFdmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChcImhvdmVyXCIgPT09IHRhcmdldEV2ZW50LnNwbGl0KFwiLlwiKVswXSkge1xuICAgICAgICAgICAgICAgICAgICBzY29wZV9FdmVudHNbdGFyZ2V0RXZlbnRdLmZvckVhY2goZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoc2NvcGVfU2VsZiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZXMga2V5ZG93biBvbiBmb2N1c2VkIGhhbmRsZXNcbiAgICAgICAgLy8gRG9uJ3QgbW92ZSB0aGUgZG9jdW1lbnQgd2hlbiBwcmVzc2luZyBhcnJvdyBrZXlzIG9uIGZvY3VzZWQgaGFuZGxlc1xuICAgICAgICBmdW5jdGlvbiBldmVudEtleWRvd24oZXZlbnQsIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgaWYgKGlzU2xpZGVyRGlzYWJsZWQoKSB8fCBpc0hhbmRsZURpc2FibGVkKGhhbmRsZU51bWJlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBob3Jpem9udGFsS2V5cyA9IFtcIkxlZnRcIiwgXCJSaWdodFwiXTtcbiAgICAgICAgICAgIHZhciB2ZXJ0aWNhbEtleXMgPSBbXCJEb3duXCIsIFwiVXBcIl07XG4gICAgICAgICAgICB2YXIgbGFyZ2VTdGVwS2V5cyA9IFtcIlBhZ2VEb3duXCIsIFwiUGFnZVVwXCJdO1xuICAgICAgICAgICAgdmFyIGVkZ2VLZXlzID0gW1wiSG9tZVwiLCBcIkVuZFwiXTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGlyICYmICFvcHRpb25zLm9ydCkge1xuICAgICAgICAgICAgICAgIC8vIE9uIGFuIHJpZ2h0LXRvLWxlZnQgc2xpZGVyLCB0aGUgbGVmdCBhbmQgcmlnaHQga2V5cyBhY3QgaW52ZXJ0ZWRcbiAgICAgICAgICAgICAgICBob3Jpem9udGFsS2V5cy5yZXZlcnNlKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMub3J0ICYmICFvcHRpb25zLmRpcikge1xuICAgICAgICAgICAgICAgIC8vIE9uIGEgdG9wLXRvLWJvdHRvbSBzbGlkZXIsIHRoZSB1cCBhbmQgZG93biBrZXlzIGFjdCBpbnZlcnRlZFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsS2V5cy5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgbGFyZ2VTdGVwS2V5cy5yZXZlcnNlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFN0cmlwIFwiQXJyb3dcIiBmb3IgSUUgY29tcGF0aWJpbGl0eS4gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQva2V5XG4gICAgICAgICAgICB2YXIga2V5ID0gZXZlbnQua2V5LnJlcGxhY2UoXCJBcnJvd1wiLCBcIlwiKTtcblxuICAgICAgICAgICAgdmFyIGlzTGFyZ2VEb3duID0ga2V5ID09PSBsYXJnZVN0ZXBLZXlzWzBdO1xuICAgICAgICAgICAgdmFyIGlzTGFyZ2VVcCA9IGtleSA9PT0gbGFyZ2VTdGVwS2V5c1sxXTtcbiAgICAgICAgICAgIHZhciBpc0Rvd24gPSBrZXkgPT09IHZlcnRpY2FsS2V5c1swXSB8fCBrZXkgPT09IGhvcml6b250YWxLZXlzWzBdIHx8IGlzTGFyZ2VEb3duO1xuICAgICAgICAgICAgdmFyIGlzVXAgPSBrZXkgPT09IHZlcnRpY2FsS2V5c1sxXSB8fCBrZXkgPT09IGhvcml6b250YWxLZXlzWzFdIHx8IGlzTGFyZ2VVcDtcbiAgICAgICAgICAgIHZhciBpc01pbiA9IGtleSA9PT0gZWRnZUtleXNbMF07XG4gICAgICAgICAgICB2YXIgaXNNYXggPSBrZXkgPT09IGVkZ2VLZXlzWzFdO1xuXG4gICAgICAgICAgICBpZiAoIWlzRG93biAmJiAhaXNVcCAmJiAhaXNNaW4gJiYgIWlzTWF4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIHZhciB0bztcblxuICAgICAgICAgICAgaWYgKGlzVXAgfHwgaXNEb3duKSB7XG4gICAgICAgICAgICAgICAgdmFyIG11bHRpcGxpZXIgPSA1O1xuICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBpc0Rvd24gPyAwIDogMTtcbiAgICAgICAgICAgICAgICB2YXIgc3RlcHMgPSBnZXROZXh0U3RlcHNGb3JIYW5kbGUoaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICB2YXIgc3RlcCA9IHN0ZXBzW2RpcmVjdGlvbl07XG5cbiAgICAgICAgICAgICAgICAvLyBBdCB0aGUgZWRnZSBvZiBhIHNsaWRlciwgZG8gbm90aGluZ1xuICAgICAgICAgICAgICAgIGlmIChzdGVwID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBObyBzdGVwIHNldCwgdXNlIHRoZSBkZWZhdWx0IG9mIDEwJSBvZiB0aGUgc3ViLXJhbmdlXG4gICAgICAgICAgICAgICAgaWYgKHN0ZXAgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgPSBzY29wZV9TcGVjdHJ1bS5nZXREZWZhdWx0U3RlcChzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXSwgaXNEb3duLCAxMCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlzTGFyZ2VVcCB8fCBpc0xhcmdlRG93bikge1xuICAgICAgICAgICAgICAgICAgICBzdGVwICo9IG11bHRpcGxpZXI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU3RlcCBvdmVyIHplcm8tbGVuZ3RoIHJhbmdlcyAoIzk0OCk7XG4gICAgICAgICAgICAgICAgc3RlcCA9IE1hdGgubWF4KHN0ZXAsIDAuMDAwMDAwMSk7XG5cbiAgICAgICAgICAgICAgICAvLyBEZWNyZW1lbnQgZm9yIGRvd24gc3RlcHNcbiAgICAgICAgICAgICAgICBzdGVwID0gKGlzRG93biA/IC0xIDogMSkgKiBzdGVwO1xuXG4gICAgICAgICAgICAgICAgdG8gPSBzY29wZV9WYWx1ZXNbaGFuZGxlTnVtYmVyXSArIHN0ZXA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzTWF4KSB7XG4gICAgICAgICAgICAgICAgLy8gRW5kIGtleVxuICAgICAgICAgICAgICAgIHRvID0gb3B0aW9ucy5zcGVjdHJ1bS54VmFsW29wdGlvbnMuc3BlY3RydW0ueFZhbC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSG9tZSBrZXlcbiAgICAgICAgICAgICAgICB0byA9IG9wdGlvbnMuc3BlY3RydW0ueFZhbFswXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgc2NvcGVfU3BlY3RydW0udG9TdGVwcGluZyh0byksIHRydWUsIHRydWUpO1xuXG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJzbGlkZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJjaGFuZ2VcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBdHRhY2ggZXZlbnRzIHRvIHNldmVyYWwgc2xpZGVyIHBhcnRzLlxuICAgICAgICBmdW5jdGlvbiBiaW5kU2xpZGVyRXZlbnRzKGJlaGF2aW91cikge1xuICAgICAgICAgICAgLy8gQXR0YWNoIHRoZSBzdGFuZGFyZCBkcmFnIGV2ZW50IHRvIHRoZSBoYW5kbGVzLlxuICAgICAgICAgICAgaWYgKCFiZWhhdmlvdXIuZml4ZWQpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGVzZSBldmVudHMgYXJlIG9ubHkgYm91bmQgdG8gdGhlIHZpc3VhbCBoYW5kbGVcbiAgICAgICAgICAgICAgICAgICAgLy8gZWxlbWVudCwgbm90IHRoZSAncmVhbCcgb3JpZ2luIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIGF0dGFjaEV2ZW50KGFjdGlvbnMuc3RhcnQsIGhhbmRsZS5jaGlsZHJlblswXSwgZXZlbnRTdGFydCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogW2luZGV4XVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQXR0YWNoIHRoZSB0YXAgZXZlbnQgdG8gdGhlIHNsaWRlciBiYXNlLlxuICAgICAgICAgICAgaWYgKGJlaGF2aW91ci50YXApIHtcbiAgICAgICAgICAgICAgICBhdHRhY2hFdmVudChhY3Rpb25zLnN0YXJ0LCBzY29wZV9CYXNlLCBldmVudFRhcCwge30pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGaXJlIGhvdmVyIGV2ZW50c1xuICAgICAgICAgICAgaWYgKGJlaGF2aW91ci5ob3Zlcikge1xuICAgICAgICAgICAgICAgIGF0dGFjaEV2ZW50KGFjdGlvbnMubW92ZSwgc2NvcGVfQmFzZSwgZXZlbnRIb3Zlciwge1xuICAgICAgICAgICAgICAgICAgICBob3ZlcjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBNYWtlIHRoZSByYW5nZSBkcmFnZ2FibGUuXG4gICAgICAgICAgICBpZiAoYmVoYXZpb3VyLmRyYWcpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9Db25uZWN0cy5mb3JFYWNoKGZ1bmN0aW9uKGNvbm5lY3QsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25uZWN0ID09PSBmYWxzZSB8fCBpbmRleCA9PT0gMCB8fCBpbmRleCA9PT0gc2NvcGVfQ29ubmVjdHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZUJlZm9yZSA9IHNjb3BlX0hhbmRsZXNbaW5kZXggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZUFmdGVyID0gc2NvcGVfSGFuZGxlc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudEhvbGRlcnMgPSBbY29ubmVjdF07XG5cbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoY29ubmVjdCwgb3B0aW9ucy5jc3NDbGFzc2VzLmRyYWdnYWJsZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB0aGUgcmFuZ2UgaXMgZml4ZWQsIHRoZSBlbnRpcmUgcmFuZ2UgY2FuXG4gICAgICAgICAgICAgICAgICAgIC8vIGJlIGRyYWdnZWQgYnkgdGhlIGhhbmRsZXMuIFRoZSBoYW5kbGUgaW4gdGhlIGZpcnN0XG4gICAgICAgICAgICAgICAgICAgIC8vIG9yaWdpbiB3aWxsIHByb3BhZ2F0ZSB0aGUgc3RhcnQgZXZlbnQgdXB3YXJkLFxuICAgICAgICAgICAgICAgICAgICAvLyBidXQgaXQgbmVlZHMgdG8gYmUgYm91bmQgbWFudWFsbHkgb24gdGhlIG90aGVyLlxuICAgICAgICAgICAgICAgICAgICBpZiAoYmVoYXZpb3VyLmZpeGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudEhvbGRlcnMucHVzaChoYW5kbGVCZWZvcmUuY2hpbGRyZW5bMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRIb2xkZXJzLnB1c2goaGFuZGxlQWZ0ZXIuY2hpbGRyZW5bMF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZXZlbnRIb2xkZXJzLmZvckVhY2goZnVuY3Rpb24oZXZlbnRIb2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFjaEV2ZW50KGFjdGlvbnMuc3RhcnQsIGV2ZW50SG9sZGVyLCBldmVudFN0YXJ0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlczogW2hhbmRsZUJlZm9yZSwgaGFuZGxlQWZ0ZXJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnM6IFtpbmRleCAtIDEsIGluZGV4XVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXR0YWNoIGFuIGV2ZW50IHRvIHRoaXMgc2xpZGVyLCBwb3NzaWJseSBpbmNsdWRpbmcgYSBuYW1lc3BhY2VcbiAgICAgICAgZnVuY3Rpb24gYmluZEV2ZW50KG5hbWVzcGFjZWRFdmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHNjb3BlX0V2ZW50c1tuYW1lc3BhY2VkRXZlbnRdID0gc2NvcGVfRXZlbnRzW25hbWVzcGFjZWRFdmVudF0gfHwgW107XG4gICAgICAgICAgICBzY29wZV9FdmVudHNbbmFtZXNwYWNlZEV2ZW50XS5wdXNoKGNhbGxiYWNrKTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIGV2ZW50IGJvdW5kIGlzICd1cGRhdGUsJyBmaXJlIGl0IGltbWVkaWF0ZWx5IGZvciBhbGwgaGFuZGxlcy5cbiAgICAgICAgICAgIGlmIChuYW1lc3BhY2VkRXZlbnQuc3BsaXQoXCIuXCIpWzBdID09PSBcInVwZGF0ZVwiKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlcy5mb3JFYWNoKGZ1bmN0aW9uKGEsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVbmRvIGF0dGFjaG1lbnQgb2YgZXZlbnRcbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlRXZlbnQobmFtZXNwYWNlZEV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZXZlbnQgPSBuYW1lc3BhY2VkRXZlbnQgJiYgbmFtZXNwYWNlZEV2ZW50LnNwbGl0KFwiLlwiKVswXTtcbiAgICAgICAgICAgIHZhciBuYW1lc3BhY2UgPSBldmVudCAmJiBuYW1lc3BhY2VkRXZlbnQuc3Vic3RyaW5nKGV2ZW50Lmxlbmd0aCk7XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNjb3BlX0V2ZW50cykuZm9yRWFjaChmdW5jdGlvbihiaW5kKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRFdmVudCA9IGJpbmQuc3BsaXQoXCIuXCIpWzBdO1xuICAgICAgICAgICAgICAgIHZhciB0TmFtZXNwYWNlID0gYmluZC5zdWJzdHJpbmcodEV2ZW50Lmxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoKCFldmVudCB8fCBldmVudCA9PT0gdEV2ZW50KSAmJiAoIW5hbWVzcGFjZSB8fCBuYW1lc3BhY2UgPT09IHROYW1lc3BhY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzY29wZV9FdmVudHNbYmluZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFeHRlcm5hbCBldmVudCBoYW5kbGluZ1xuICAgICAgICBmdW5jdGlvbiBmaXJlRXZlbnQoZXZlbnROYW1lLCBoYW5kbGVOdW1iZXIsIHRhcCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoc2NvcGVfRXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKHRhcmdldEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50VHlwZSA9IHRhcmdldEV2ZW50LnNwbGl0KFwiLlwiKVswXTtcblxuICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWUgPT09IGV2ZW50VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBzY29wZV9FdmVudHNbdGFyZ2V0RXZlbnRdLmZvckVhY2goZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBzbGlkZXIgcHVibGljIEFQSSBhcyB0aGUgc2NvcGUgKCd0aGlzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZV9TZWxmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB2YWx1ZXMgYXMgYXJyYXksIHNvIGFyZ18xW2FyZ18yXSBpcyBhbHdheXMgdmFsaWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfVmFsdWVzLm1hcChvcHRpb25zLmZvcm1hdC50byksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIGluZGV4LCAwIG9yIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVW4tZm9ybWF0dGVkIHNsaWRlciB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZV9WYWx1ZXMuc2xpY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFdmVudCBpcyBmaXJlZCBieSB0YXAsIHRydWUgb3IgZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXAgfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGVmdCBvZmZzZXQgb2YgdGhlIGhhbmRsZSwgaW4gcmVsYXRpb24gdG8gdGhlIHNsaWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX0xvY2F0aW9ucy5zbGljZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgc2xpZGVyIHB1YmxpYyBBUEkgdG8gYW4gYWNjZXNzaWJsZSBwYXJhbWV0ZXIgd2hlbiB0aGlzIGlzIHVuYXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfU2VsZlxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTcGxpdCBvdXQgdGhlIGhhbmRsZSBwb3NpdGlvbmluZyBsb2dpYyBzbyB0aGUgTW92ZSBldmVudCBjYW4gdXNlIGl0LCB0b29cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tIYW5kbGVQb3NpdGlvbihyZWZlcmVuY2UsIGhhbmRsZU51bWJlciwgdG8sIGxvb2tCYWNrd2FyZCwgbG9va0ZvcndhcmQsIGdldFZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZGlzdGFuY2U7XG5cbiAgICAgICAgICAgIC8vIEZvciBzbGlkZXJzIHdpdGggbXVsdGlwbGUgaGFuZGxlcywgbGltaXQgbW92ZW1lbnQgdG8gdGhlIG90aGVyIGhhbmRsZS5cbiAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBtYXJnaW4gb3B0aW9uIGJ5IGFkZGluZyBpdCB0byB0aGUgaGFuZGxlIHBvc2l0aW9ucy5cbiAgICAgICAgICAgIGlmIChzY29wZV9IYW5kbGVzLmxlbmd0aCA+IDEgJiYgIW9wdGlvbnMuZXZlbnRzLnVuY29uc3RyYWluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9va0JhY2t3YXJkICYmIGhhbmRsZU51bWJlciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBzY29wZV9TcGVjdHJ1bS5nZXRBYnNvbHV0ZURpc3RhbmNlKHJlZmVyZW5jZVtoYW5kbGVOdW1iZXIgLSAxXSwgb3B0aW9ucy5tYXJnaW4sIDApO1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWF4KHRvLCBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGxvb2tGb3J3YXJkICYmIGhhbmRsZU51bWJlciA8IHNjb3BlX0hhbmRsZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHNjb3BlX1NwZWN0cnVtLmdldEFic29sdXRlRGlzdGFuY2UocmVmZXJlbmNlW2hhbmRsZU51bWJlciArIDFdLCBvcHRpb25zLm1hcmdpbiwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5taW4odG8sIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRoZSBsaW1pdCBvcHRpb24gaGFzIHRoZSBvcHBvc2l0ZSBlZmZlY3QsIGxpbWl0aW5nIGhhbmRsZXMgdG8gYVxuICAgICAgICAgICAgLy8gbWF4aW11bSBkaXN0YW5jZSBmcm9tIGFub3RoZXIuIExpbWl0IG11c3QgYmUgPiAwLCBhcyBvdGhlcndpc2VcbiAgICAgICAgICAgIC8vIGhhbmRsZXMgd291bGQgYmUgdW5tb3ZhYmxlLlxuICAgICAgICAgICAgaWYgKHNjb3BlX0hhbmRsZXMubGVuZ3RoID4gMSAmJiBvcHRpb25zLmxpbWl0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvb2tCYWNrd2FyZCAmJiBoYW5kbGVOdW1iZXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gc2NvcGVfU3BlY3RydW0uZ2V0QWJzb2x1dGVEaXN0YW5jZShyZWZlcmVuY2VbaGFuZGxlTnVtYmVyIC0gMV0sIG9wdGlvbnMubGltaXQsIDApO1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWluKHRvLCBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGxvb2tGb3J3YXJkICYmIGhhbmRsZU51bWJlciA8IHNjb3BlX0hhbmRsZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHNjb3BlX1NwZWN0cnVtLmdldEFic29sdXRlRGlzdGFuY2UocmVmZXJlbmNlW2hhbmRsZU51bWJlciArIDFdLCBvcHRpb25zLmxpbWl0LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSBNYXRoLm1heCh0bywgZGlzdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVGhlIHBhZGRpbmcgb3B0aW9uIGtlZXBzIHRoZSBoYW5kbGVzIGEgY2VydGFpbiBkaXN0YW5jZSBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gZWRnZXMgb2YgdGhlIHNsaWRlci4gUGFkZGluZyBtdXN0IGJlID4gMC5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnBhZGRpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlTnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gc2NvcGVfU3BlY3RydW0uZ2V0QWJzb2x1dGVEaXN0YW5jZSgwLCBvcHRpb25zLnBhZGRpbmdbMF0sIDApO1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWF4KHRvLCBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlciA9PT0gc2NvcGVfSGFuZGxlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gc2NvcGVfU3BlY3RydW0uZ2V0QWJzb2x1dGVEaXN0YW5jZSgxMDAsIG9wdGlvbnMucGFkZGluZ1sxXSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5taW4odG8sIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvID0gc2NvcGVfU3BlY3RydW0uZ2V0U3RlcCh0byk7XG5cbiAgICAgICAgICAgIC8vIExpbWl0IHBlcmNlbnRhZ2UgdG8gdGhlIDAgLSAxMDAgcmFuZ2VcbiAgICAgICAgICAgIHRvID0gbGltaXQodG8pO1xuXG4gICAgICAgICAgICAvLyBSZXR1cm4gZmFsc2UgaWYgaGFuZGxlIGNhbid0IG1vdmVcbiAgICAgICAgICAgIGlmICh0byA9PT0gcmVmZXJlbmNlW2hhbmRsZU51bWJlcl0gJiYgIWdldFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdG87XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVc2VzIHNsaWRlciBvcmllbnRhdGlvbiB0byBjcmVhdGUgQ1NTIHJ1bGVzLiBhID0gYmFzZSB2YWx1ZTtcbiAgICAgICAgZnVuY3Rpb24gaW5SdWxlT3JkZXIodiwgYSkge1xuICAgICAgICAgICAgdmFyIG8gPSBvcHRpb25zLm9ydDtcbiAgICAgICAgICAgIHJldHVybiAobyA/IGEgOiB2KSArIFwiLCBcIiArIChvID8gdiA6IGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTW92ZXMgaGFuZGxlKHMpIGJ5IGEgcGVyY2VudGFnZVxuICAgICAgICAvLyAoYm9vbCwgJSB0byBtb3ZlLCBbJSB3aGVyZSBoYW5kbGUgc3RhcnRlZCwgLi4uXSwgW2luZGV4IGluIHNjb3BlX0hhbmRsZXMsIC4uLl0pXG4gICAgICAgIGZ1bmN0aW9uIG1vdmVIYW5kbGVzKHVwd2FyZCwgcHJvcG9zYWwsIGxvY2F0aW9ucywgaGFuZGxlTnVtYmVycykge1xuICAgICAgICAgICAgdmFyIHByb3Bvc2FscyA9IGxvY2F0aW9ucy5zbGljZSgpO1xuXG4gICAgICAgICAgICB2YXIgYiA9IFshdXB3YXJkLCB1cHdhcmRdO1xuICAgICAgICAgICAgdmFyIGYgPSBbdXB3YXJkLCAhdXB3YXJkXTtcblxuICAgICAgICAgICAgLy8gQ29weSBoYW5kbGVOdW1iZXJzIHNvIHdlIGRvbid0IGNoYW5nZSB0aGUgZGF0YXNldFxuICAgICAgICAgICAgaGFuZGxlTnVtYmVycyA9IGhhbmRsZU51bWJlcnMuc2xpY2UoKTtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIHdoaWNoIGhhbmRsZSBpcyAnbGVhZGluZycuXG4gICAgICAgICAgICAvLyBJZiB0aGF0IG9uZSBjYW4ndCBtb3ZlIHRoZSBzZWNvbmQgY2FuJ3QgZWl0aGVyLlxuICAgICAgICAgICAgaWYgKHVwd2FyZCkge1xuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTdGVwIDE6IGdldCB0aGUgbWF4aW11bSBwZXJjZW50YWdlIHRoYXQgYW55IG9mIHRoZSBoYW5kbGVzIGNhbiBtb3ZlXG4gICAgICAgICAgICBpZiAoaGFuZGxlTnVtYmVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlciwgbykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG8gPSBjaGVja0hhbmRsZVBvc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWxzW2hhbmRsZU51bWJlcl0gKyBwcm9wb3NhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJbb10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmW29dLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTdG9wIGlmIG9uZSBvZiB0aGUgaGFuZGxlcyBjYW4ndCBtb3ZlLlxuICAgICAgICAgICAgICAgICAgICBpZiAodG8gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbCA9IHRvIC0gcHJvcG9zYWxzW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbHNbaGFuZGxlTnVtYmVyXSA9IHRvO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHVzaW5nIG9uZSBoYW5kbGUsIGNoZWNrIGJhY2t3YXJkIEFORCBmb3J3YXJkXG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBiID0gZiA9IFt0cnVlXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHN0YXRlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIFN0ZXAgMjogVHJ5IHRvIHNldCB0aGUgaGFuZGxlcyB3aXRoIHRoZSBmb3VuZCBwZXJjZW50YWdlXG4gICAgICAgICAgICBoYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyLCBvKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUgPSBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCBsb2NhdGlvbnNbaGFuZGxlTnVtYmVyXSArIHByb3Bvc2FsLCBiW29dLCBmW29dKSB8fCBzdGF0ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBTdGVwIDM6IElmIGEgaGFuZGxlIG1vdmVkLCBmaXJlIGV2ZW50c1xuICAgICAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic2xpZGVcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRha2VzIGEgYmFzZSB2YWx1ZSBhbmQgYW4gb2Zmc2V0LiBUaGlzIG9mZnNldCBpcyB1c2VkIGZvciB0aGUgY29ubmVjdCBiYXIgc2l6ZS5cbiAgICAgICAgLy8gSW4gdGhlIGluaXRpYWwgZGVzaWduIGZvciB0aGlzIGZlYXR1cmUsIHRoZSBvcmlnaW4gZWxlbWVudCB3YXMgMSUgd2lkZS5cbiAgICAgICAgLy8gVW5mb3J0dW5hdGVseSwgYSByb3VuZGluZyBidWcgaW4gQ2hyb21lIG1ha2VzIGl0IGltcG9zc2libGUgdG8gaW1wbGVtZW50IHRoaXMgZmVhdHVyZVxuICAgICAgICAvLyBpbiB0aGlzIG1hbm5lcjogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Nzk4MjIzXG4gICAgICAgIGZ1bmN0aW9uIHRyYW5zZm9ybURpcmVjdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kaXIgPyAxMDAgLSBhIC0gYiA6IGE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGVzIHNjb3BlX0xvY2F0aW9ucyBhbmQgc2NvcGVfVmFsdWVzLCB1cGRhdGVzIHZpc3VhbCBzdGF0ZVxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVIYW5kbGVQb3NpdGlvbihoYW5kbGVOdW1iZXIsIHRvKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgbG9jYXRpb25zLlxuICAgICAgICAgICAgc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl0gPSB0bztcblxuICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgdmFsdWUgdG8gdGhlIHNsaWRlciBzdGVwcGluZy9yYW5nZS5cbiAgICAgICAgICAgIHNjb3BlX1ZhbHVlc1toYW5kbGVOdW1iZXJdID0gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHRvKTtcblxuICAgICAgICAgICAgdmFyIHRyYW5zbGF0aW9uID0gMTAgKiAodHJhbnNmb3JtRGlyZWN0aW9uKHRvLCAwKSAtIHNjb3BlX0Rpck9mZnNldCk7XG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlUnVsZSA9IFwidHJhbnNsYXRlKFwiICsgaW5SdWxlT3JkZXIodHJhbnNsYXRpb24gKyBcIiVcIiwgXCIwXCIpICsgXCIpXCI7XG5cbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXS5zdHlsZVtvcHRpb25zLnRyYW5zZm9ybVJ1bGVdID0gdHJhbnNsYXRlUnVsZTtcblxuICAgICAgICAgICAgdXBkYXRlQ29ubmVjdChoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgdXBkYXRlQ29ubmVjdChoYW5kbGVOdW1iZXIgKyAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZXMgYmVmb3JlIHRoZSBzbGlkZXIgbWlkZGxlIGFyZSBzdGFja2VkIGxhdGVyID0gaGlnaGVyLFxuICAgICAgICAvLyBIYW5kbGVzIGFmdGVyIHRoZSBtaWRkbGUgbGF0ZXIgaXMgbG93ZXJcbiAgICAgICAgLy8gW1s3XSBbOF0gLi4uLi4uLi4uLiB8IC4uLi4uLi4uLi4gWzVdIFs0XVxuICAgICAgICBmdW5jdGlvbiBzZXRaaW5kZXgoKSB7XG4gICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpciA9IHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdID4gNTAgPyAtMSA6IDE7XG4gICAgICAgICAgICAgICAgdmFyIHpJbmRleCA9IDMgKyAoc2NvcGVfSGFuZGxlcy5sZW5ndGggKyBkaXIgKiBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXS5zdHlsZS56SW5kZXggPSB6SW5kZXg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRlc3Qgc3VnZ2VzdGVkIHZhbHVlcyBhbmQgYXBwbHkgbWFyZ2luLCBzdGVwLlxuICAgICAgICBmdW5jdGlvbiBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCB0bywgbG9va0JhY2t3YXJkLCBsb29rRm9yd2FyZCkge1xuICAgICAgICAgICAgdG8gPSBjaGVja0hhbmRsZVBvc2l0aW9uKHNjb3BlX0xvY2F0aW9ucywgaGFuZGxlTnVtYmVyLCB0bywgbG9va0JhY2t3YXJkLCBsb29rRm9yd2FyZCwgZmFsc2UpO1xuXG4gICAgICAgICAgICBpZiAodG8gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1cGRhdGVIYW5kbGVQb3NpdGlvbihoYW5kbGVOdW1iZXIsIHRvKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGVzIHN0eWxlIGF0dHJpYnV0ZSBmb3IgY29ubmVjdCBub2Rlc1xuICAgICAgICBmdW5jdGlvbiB1cGRhdGVDb25uZWN0KGluZGV4KSB7XG4gICAgICAgICAgICAvLyBTa2lwIGNvbm5lY3RzIHNldCB0byBmYWxzZVxuICAgICAgICAgICAgaWYgKCFzY29wZV9Db25uZWN0c1tpbmRleF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBsID0gMDtcbiAgICAgICAgICAgIHZhciBoID0gMTAwO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IDApIHtcbiAgICAgICAgICAgICAgICBsID0gc2NvcGVfTG9jYXRpb25zW2luZGV4IC0gMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gc2NvcGVfQ29ubmVjdHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGggPSBzY29wZV9Mb2NhdGlvbnNbaW5kZXhdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXZSB1c2UgdHdvIHJ1bGVzOlxuICAgICAgICAgICAgLy8gJ3RyYW5zbGF0ZScgdG8gY2hhbmdlIHRoZSBsZWZ0L3RvcCBvZmZzZXQ7XG4gICAgICAgICAgICAvLyAnc2NhbGUnIHRvIGNoYW5nZSB0aGUgd2lkdGggb2YgdGhlIGVsZW1lbnQ7XG4gICAgICAgICAgICAvLyBBcyB0aGUgZWxlbWVudCBoYXMgYSB3aWR0aCBvZiAxMDAlLCBhIHRyYW5zbGF0aW9uIG9mIDEwMCUgaXMgZXF1YWwgdG8gMTAwJSBvZiB0aGUgcGFyZW50ICgubm9VaS1iYXNlKVxuICAgICAgICAgICAgdmFyIGNvbm5lY3RXaWR0aCA9IGggLSBsO1xuICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZVJ1bGUgPSBcInRyYW5zbGF0ZShcIiArIGluUnVsZU9yZGVyKHRyYW5zZm9ybURpcmVjdGlvbihsLCBjb25uZWN0V2lkdGgpICsgXCIlXCIsIFwiMFwiKSArIFwiKVwiO1xuICAgICAgICAgICAgdmFyIHNjYWxlUnVsZSA9IFwic2NhbGUoXCIgKyBpblJ1bGVPcmRlcihjb25uZWN0V2lkdGggLyAxMDAsIFwiMVwiKSArIFwiKVwiO1xuXG4gICAgICAgICAgICBzY29wZV9Db25uZWN0c1tpbmRleF0uc3R5bGVbb3B0aW9ucy50cmFuc2Zvcm1SdWxlXSA9IHRyYW5zbGF0ZVJ1bGUgKyBcIiBcIiArIHNjYWxlUnVsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBhcnNlcyB2YWx1ZSBwYXNzZWQgdG8gLnNldCBtZXRob2QuIFJldHVybnMgY3VycmVudCB2YWx1ZSBpZiBub3QgcGFyc2UtYWJsZS5cbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZVRvVmFsdWUodG8sIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgLy8gU2V0dGluZyB3aXRoIG51bGwgaW5kaWNhdGVzIGFuICdpZ25vcmUnLlxuICAgICAgICAgICAgLy8gSW5wdXR0aW5nICdmYWxzZScgaXMgaW52YWxpZC5cbiAgICAgICAgICAgIGlmICh0byA9PT0gbnVsbCB8fCB0byA9PT0gZmFsc2UgfHwgdG8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgYSBmb3JtYXR0ZWQgbnVtYmVyIHdhcyBwYXNzZWQsIGF0dGVtcHQgdG8gZGVjb2RlIGl0LlxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHRvID0gU3RyaW5nKHRvKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdG8gPSBvcHRpb25zLmZvcm1hdC5mcm9tKHRvKTtcbiAgICAgICAgICAgIHRvID0gc2NvcGVfU3BlY3RydW0udG9TdGVwcGluZyh0byk7XG5cbiAgICAgICAgICAgIC8vIElmIHBhcnNpbmcgdGhlIG51bWJlciBmYWlsZWQsIHVzZSB0aGUgY3VycmVudCB2YWx1ZS5cbiAgICAgICAgICAgIGlmICh0byA9PT0gZmFsc2UgfHwgaXNOYU4odG8pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdG87XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdGhlIHNsaWRlciB2YWx1ZS5cbiAgICAgICAgZnVuY3Rpb24gdmFsdWVTZXQoaW5wdXQsIGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IGFzQXJyYXkoaW5wdXQpO1xuICAgICAgICAgICAgdmFyIGlzSW5pdCA9IHNjb3BlX0xvY2F0aW9uc1swXSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAvLyBFdmVudCBmaXJlcyBieSBkZWZhdWx0XG4gICAgICAgICAgICBmaXJlU2V0RXZlbnQgPSBmaXJlU2V0RXZlbnQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiAhIWZpcmVTZXRFdmVudDtcblxuICAgICAgICAgICAgLy8gQW5pbWF0aW9uIGlzIG9wdGlvbmFsLlxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBpbml0aWFsIHZhbHVlcyB3ZXJlIHNldCBiZWZvcmUgdXNpbmcgYW5pbWF0ZWQgcGxhY2VtZW50LlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0ZSAmJiAhaXNJbml0KSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3NGb3Ioc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGFwLCBvcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmlyc3QgcGFzcywgd2l0aG91dCBsb29rQWhlYWQgYnV0IHdpdGggbG9va0JhY2t3YXJkLiBWYWx1ZXMgYXJlIHNldCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgcmVzb2x2ZVRvVmFsdWUodmFsdWVzW2hhbmRsZU51bWJlcl0sIGhhbmRsZU51bWJlciksIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgaSA9IHNjb3BlX0hhbmRsZU51bWJlcnMubGVuZ3RoID09PSAxID8gMCA6IDE7XG5cbiAgICAgICAgICAgIC8vIFNlY29uZGFyeSBwYXNzZXMuIE5vdyB0aGF0IGFsbCBiYXNlIHZhbHVlcyBhcmUgc2V0LCBhcHBseSBjb25zdHJhaW50cy5cbiAgICAgICAgICAgIC8vIEl0ZXJhdGUgYWxsIGhhbmRsZXMgdG8gZW5zdXJlIGNvbnN0cmFpbnRzIGFyZSBhcHBsaWVkIGZvciB0aGUgZW50aXJlIHNsaWRlciAoSXNzdWUgIzEwMDkpXG4gICAgICAgICAgICBmb3IgKDsgaSA8IHNjb3BlX0hhbmRsZU51bWJlcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0WmluZGV4KCk7XG5cbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyKTtcblxuICAgICAgICAgICAgICAgIC8vIEZpcmUgdGhlIGV2ZW50IG9ubHkgZm9yIGhhbmRsZXMgdGhhdCByZWNlaXZlZCBhIG5ldyB2YWx1ZSwgYXMgcGVyICM1NzlcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2hhbmRsZU51bWJlcl0gIT09IG51bGwgJiYgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzZXQgc2xpZGVyIHRvIGluaXRpYWwgdmFsdWVzXG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlUmVzZXQoZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICB2YWx1ZVNldChvcHRpb25zLnN0YXJ0LCBmaXJlU2V0RXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHZhbHVlIGZvciBhIHNpbmdsZSBoYW5kbGVcbiAgICAgICAgZnVuY3Rpb24gdmFsdWVTZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCB2YWx1ZSwgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgbnVtZXJpYyBpbnB1dFxuICAgICAgICAgICAgaGFuZGxlTnVtYmVyID0gTnVtYmVyKGhhbmRsZU51bWJlcik7XG5cbiAgICAgICAgICAgIGlmICghKGhhbmRsZU51bWJlciA+PSAwICYmIGhhbmRsZU51bWJlciA8IHNjb3BlX0hhbmRsZU51bWJlcnMubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogaW52YWxpZCBoYW5kbGUgbnVtYmVyLCBnb3Q6IFwiICsgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTG9vayBib3RoIGJhY2t3YXJkIGFuZCBmb3J3YXJkLCBzaW5jZSB3ZSBkb24ndCB3YW50IHRoaXMgaGFuZGxlIHRvIFwicHVzaFwiIG90aGVyIGhhbmRsZXMgKCM5NjApO1xuICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgcmVzb2x2ZVRvVmFsdWUodmFsdWUsIGhhbmRsZU51bWJlciksIHRydWUsIHRydWUpO1xuXG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyKTtcblxuICAgICAgICAgICAgaWYgKGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBzbGlkZXIgdmFsdWUuXG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlR2V0KCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IHNjb3BlX1ZhbHVlcy5tYXAob3B0aW9ucy5mb3JtYXQudG8pO1xuXG4gICAgICAgICAgICAvLyBJZiBvbmx5IG9uZSBoYW5kbGUgaXMgdXNlZCwgcmV0dXJuIGEgc2luZ2xlIHZhbHVlLlxuICAgICAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzWzBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlcyBjbGFzc2VzIGZyb20gdGhlIHJvb3QgYW5kIGVtcHRpZXMgaXQuXG4gICAgICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jc3NDbGFzc2VzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLmNzc0NsYXNzZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3Moc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXNba2V5XSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdoaWxlIChzY29wZV9UYXJnZXQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgIHNjb3BlX1RhcmdldC5yZW1vdmVDaGlsZChzY29wZV9UYXJnZXQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSBzY29wZV9UYXJnZXQubm9VaVNsaWRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldE5leHRTdGVwc0ZvckhhbmRsZShoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgdmFyIG5lYXJieVN0ZXBzID0gc2NvcGVfU3BlY3RydW0uZ2V0TmVhcmJ5U3RlcHMobG9jYXRpb24pO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gc2NvcGVfVmFsdWVzW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICB2YXIgaW5jcmVtZW50ID0gbmVhcmJ5U3RlcHMudGhpc1N0ZXAuc3RlcDtcbiAgICAgICAgICAgIHZhciBkZWNyZW1lbnQgPSBudWxsO1xuXG4gICAgICAgICAgICAvLyBJZiBzbmFwcGVkLCBkaXJlY3RseSB1c2UgZGVmaW5lZCBzdGVwIHZhbHVlXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zbmFwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgLSBuZWFyYnlTdGVwcy5zdGVwQmVmb3JlLnN0YXJ0VmFsdWUgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbmVhcmJ5U3RlcHMuc3RlcEFmdGVyLnN0YXJ0VmFsdWUgLSB2YWx1ZSB8fCBudWxsXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIG5leHQgdmFsdWUgaW4gdGhpcyBzdGVwIG1vdmVzIGludG8gdGhlIG5leHQgc3RlcCxcbiAgICAgICAgICAgIC8vIHRoZSBpbmNyZW1lbnQgaXMgdGhlIHN0YXJ0IG9mIHRoZSBuZXh0IHN0ZXAgLSB0aGUgY3VycmVudCB2YWx1ZVxuICAgICAgICAgICAgaWYgKGluY3JlbWVudCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgKyBpbmNyZW1lbnQgPiBuZWFyYnlTdGVwcy5zdGVwQWZ0ZXIuc3RhcnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBuZWFyYnlTdGVwcy5zdGVwQWZ0ZXIuc3RhcnRWYWx1ZSAtIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIGJleW9uZCB0aGUgc3RhcnRpbmcgcG9pbnRcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IG5lYXJieVN0ZXBzLnRoaXNTdGVwLnN0YXJ0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSBuZWFyYnlTdGVwcy50aGlzU3RlcC5zdGVwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuZWFyYnlTdGVwcy5zdGVwQmVmb3JlLnN0ZXAgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIGEgaGFuZGxlIGlzIGF0IHRoZSBzdGFydCBvZiBhIHN0ZXAsIGl0IGFsd2F5cyBzdGVwcyBiYWNrIGludG8gdGhlIHByZXZpb3VzIHN0ZXAgZmlyc3RcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IHZhbHVlIC0gbmVhcmJ5U3RlcHMuc3RlcEJlZm9yZS5oaWdoZXN0U3RlcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTm93LCBpZiBhdCB0aGUgc2xpZGVyIGVkZ2VzLCB0aGVyZSBpcyBubyBpbi9kZWNyZW1lbnRcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbiA9PT0gMTAwKSB7XG4gICAgICAgICAgICAgICAgaW5jcmVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYXRpb24gPT09IDApIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBcyBwZXIgIzM5MSwgdGhlIGNvbXBhcmlzb24gZm9yIHRoZSBkZWNyZW1lbnQgc3RlcCBjYW4gaGF2ZSBzb21lIHJvdW5kaW5nIGlzc3Vlcy5cbiAgICAgICAgICAgIHZhciBzdGVwRGVjaW1hbHMgPSBzY29wZV9TcGVjdHJ1bS5jb3VudFN0ZXBEZWNpbWFscygpO1xuXG4gICAgICAgICAgICAvLyBSb3VuZCBwZXIgIzM5MVxuICAgICAgICAgICAgaWYgKGluY3JlbWVudCAhPT0gbnVsbCAmJiBpbmNyZW1lbnQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaW5jcmVtZW50ID0gTnVtYmVyKGluY3JlbWVudC50b0ZpeGVkKHN0ZXBEZWNpbWFscykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGVjcmVtZW50ICE9PSBudWxsICYmIGRlY3JlbWVudCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSBOdW1iZXIoZGVjcmVtZW50LnRvRml4ZWQoc3RlcERlY2ltYWxzKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBbZGVjcmVtZW50LCBpbmNyZW1lbnRdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHN0ZXAgc2l6ZSBmb3IgdGhlIHNsaWRlci5cbiAgICAgICAgZnVuY3Rpb24gZ2V0TmV4dFN0ZXBzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0hhbmRsZU51bWJlcnMubWFwKGdldE5leHRTdGVwc0ZvckhhbmRsZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGVhYmxlOiBtYXJnaW4sIGxpbWl0LCBwYWRkaW5nLCBzdGVwLCByYW5nZSwgYW5pbWF0ZSwgc25hcFxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVPcHRpb25zKG9wdGlvbnNUb1VwZGF0ZSwgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAvLyBTcGVjdHJ1bSBpcyBjcmVhdGVkIHVzaW5nIHRoZSByYW5nZSwgc25hcCwgZGlyZWN0aW9uIGFuZCBzdGVwIG9wdGlvbnMuXG4gICAgICAgICAgICAvLyAnc25hcCcgYW5kICdzdGVwJyBjYW4gYmUgdXBkYXRlZC5cbiAgICAgICAgICAgIC8vIElmICdzbmFwJyBhbmQgJ3N0ZXAnIGFyZSBub3QgcGFzc2VkLCB0aGV5IHNob3VsZCByZW1haW4gdW5jaGFuZ2VkLlxuICAgICAgICAgICAgdmFyIHYgPSB2YWx1ZUdldCgpO1xuXG4gICAgICAgICAgICB2YXIgdXBkYXRlQWJsZSA9IFtcbiAgICAgICAgICAgICAgICBcIm1hcmdpblwiLFxuICAgICAgICAgICAgICAgIFwibGltaXRcIixcbiAgICAgICAgICAgICAgICBcInBhZGRpbmdcIixcbiAgICAgICAgICAgICAgICBcInJhbmdlXCIsXG4gICAgICAgICAgICAgICAgXCJhbmltYXRlXCIsXG4gICAgICAgICAgICAgICAgXCJzbmFwXCIsXG4gICAgICAgICAgICAgICAgXCJzdGVwXCIsXG4gICAgICAgICAgICAgICAgXCJmb3JtYXRcIixcbiAgICAgICAgICAgICAgICBcInBpcHNcIixcbiAgICAgICAgICAgICAgICBcInRvb2x0aXBzXCJcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIC8vIE9ubHkgY2hhbmdlIG9wdGlvbnMgdGhhdCB3ZSdyZSBhY3R1YWxseSBwYXNzZWQgdG8gdXBkYXRlLlxuICAgICAgICAgICAgdXBkYXRlQWJsZS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgdW5kZWZpbmVkLiBudWxsIHJlbW92ZXMgdGhlIHZhbHVlLlxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zVG9VcGRhdGVbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbE9wdGlvbnNbbmFtZV0gPSBvcHRpb25zVG9VcGRhdGVbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBuZXdPcHRpb25zID0gdGVzdE9wdGlvbnMob3JpZ2luYWxPcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gTG9hZCBuZXcgb3B0aW9ucyBpbnRvIHRoZSBzbGlkZXIgc3RhdGVcbiAgICAgICAgICAgIHVwZGF0ZUFibGUuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNUb1VwZGF0ZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNbbmFtZV0gPSBuZXdPcHRpb25zW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzY29wZV9TcGVjdHJ1bSA9IG5ld09wdGlvbnMuc3BlY3RydW07XG5cbiAgICAgICAgICAgIC8vIExpbWl0LCBtYXJnaW4gYW5kIHBhZGRpbmcgZGVwZW5kIG9uIHRoZSBzcGVjdHJ1bSBidXQgYXJlIHN0b3JlZCBvdXRzaWRlIG9mIGl0LiAoIzY3NylcbiAgICAgICAgICAgIG9wdGlvbnMubWFyZ2luID0gbmV3T3B0aW9ucy5tYXJnaW47XG4gICAgICAgICAgICBvcHRpb25zLmxpbWl0ID0gbmV3T3B0aW9ucy5saW1pdDtcbiAgICAgICAgICAgIG9wdGlvbnMucGFkZGluZyA9IG5ld09wdGlvbnMucGFkZGluZztcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHBpcHMsIHJlbW92ZXMgZXhpc3RpbmcuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5waXBzKSB7XG4gICAgICAgICAgICAgICAgcGlwcyhvcHRpb25zLnBpcHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW1vdmVQaXBzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0b29sdGlwcywgcmVtb3ZlcyBleGlzdGluZy5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2x0aXBzKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcHMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlVG9vbHRpcHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW52YWxpZGF0ZSB0aGUgY3VycmVudCBwb3NpdGlvbmluZyBzbyB2YWx1ZVNldCBmb3JjZXMgYW4gdXBkYXRlLlxuICAgICAgICAgICAgc2NvcGVfTG9jYXRpb25zID0gW107XG4gICAgICAgICAgICB2YWx1ZVNldChvcHRpb25zVG9VcGRhdGUuc3RhcnQgfHwgdiwgZmlyZVNldEV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXRpYWxpemF0aW9uIHN0ZXBzXG4gICAgICAgIGZ1bmN0aW9uIHNldHVwU2xpZGVyKCkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBiYXNlIGVsZW1lbnQsIGluaXRpYWxpemUgSFRNTCBhbmQgc2V0IGNsYXNzZXMuXG4gICAgICAgICAgICAvLyBBZGQgaGFuZGxlcyBhbmQgY29ubmVjdCBlbGVtZW50cy5cbiAgICAgICAgICAgIHNjb3BlX0Jhc2UgPSBhZGRTbGlkZXIoc2NvcGVfVGFyZ2V0KTtcblxuICAgICAgICAgICAgYWRkRWxlbWVudHMob3B0aW9ucy5jb25uZWN0LCBzY29wZV9CYXNlKTtcblxuICAgICAgICAgICAgLy8gQXR0YWNoIHVzZXIgZXZlbnRzLlxuICAgICAgICAgICAgYmluZFNsaWRlckV2ZW50cyhvcHRpb25zLmV2ZW50cyk7XG5cbiAgICAgICAgICAgIC8vIFVzZSB0aGUgcHVibGljIHZhbHVlIG1ldGhvZCB0byBzZXQgdGhlIHN0YXJ0IHZhbHVlcy5cbiAgICAgICAgICAgIHZhbHVlU2V0KG9wdGlvbnMuc3RhcnQpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5waXBzKSB7XG4gICAgICAgICAgICAgICAgcGlwcyhvcHRpb25zLnBpcHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy50b29sdGlwcykge1xuICAgICAgICAgICAgICAgIHRvb2x0aXBzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFyaWEoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldHVwU2xpZGVyKCk7XG5cbiAgICAgICAgLy8gbm9pbnNwZWN0aW9uIEpTVW51c2VkR2xvYmFsU3ltYm9sc1xuICAgICAgICBzY29wZV9TZWxmID0ge1xuICAgICAgICAgICAgZGVzdHJveTogZGVzdHJveSxcbiAgICAgICAgICAgIHN0ZXBzOiBnZXROZXh0U3RlcHMsXG4gICAgICAgICAgICBvbjogYmluZEV2ZW50LFxuICAgICAgICAgICAgb2ZmOiByZW1vdmVFdmVudCxcbiAgICAgICAgICAgIGdldDogdmFsdWVHZXQsXG4gICAgICAgICAgICBzZXQ6IHZhbHVlU2V0LFxuICAgICAgICAgICAgc2V0SGFuZGxlOiB2YWx1ZVNldEhhbmRsZSxcbiAgICAgICAgICAgIHJlc2V0OiB2YWx1ZVJlc2V0LFxuICAgICAgICAgICAgLy8gRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLCBkb24ndCB1c2UgdGhpcyBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgICAgICAgICAgX19tb3ZlSGFuZGxlczogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgIG1vdmVIYW5kbGVzKGEsIGIsIHNjb3BlX0xvY2F0aW9ucywgYyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0aW9uczogb3JpZ2luYWxPcHRpb25zLCAvLyBJc3N1ZSAjNjAwLCAjNjc4XG4gICAgICAgICAgICB1cGRhdGVPcHRpb25zOiB1cGRhdGVPcHRpb25zLFxuICAgICAgICAgICAgdGFyZ2V0OiBzY29wZV9UYXJnZXQsIC8vIElzc3VlICM1OTdcbiAgICAgICAgICAgIHJlbW92ZVBpcHM6IHJlbW92ZVBpcHMsXG4gICAgICAgICAgICByZW1vdmVUb29sdGlwczogcmVtb3ZlVG9vbHRpcHMsXG4gICAgICAgICAgICBnZXRUb29sdGlwczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1Rvb2x0aXBzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldE9yaWdpbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9IYW5kbGVzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBpcHM6IHBpcHMgLy8gSXNzdWUgIzU5NFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzY29wZV9TZWxmO1xuICAgIH1cblxuICAgIC8vIFJ1biB0aGUgc3RhbmRhcmQgaW5pdGlhbGl6ZXJcbiAgICBmdW5jdGlvbiBpbml0aWFsaXplKHRhcmdldCwgb3JpZ2luYWxPcHRpb25zKSB7XG4gICAgICAgIGlmICghdGFyZ2V0IHx8ICF0YXJnZXQubm9kZU5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogY3JlYXRlIHJlcXVpcmVzIGEgc2luZ2xlIGVsZW1lbnQsIGdvdDogXCIgKyB0YXJnZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgdGhlIHNsaWRlciB3YXMgYWxyZWFkeSBpbml0aWFsaXplZC5cbiAgICAgICAgaWYgKHRhcmdldC5ub1VpU2xpZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6IFNsaWRlciB3YXMgYWxyZWFkeSBpbml0aWFsaXplZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUZXN0IHRoZSBvcHRpb25zIGFuZCBjcmVhdGUgdGhlIHNsaWRlciBlbnZpcm9ubWVudDtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0ZXN0T3B0aW9ucyhvcmlnaW5hbE9wdGlvbnMsIHRhcmdldCk7XG4gICAgICAgIHZhciBhcGkgPSBzY29wZSh0YXJnZXQsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucyk7XG5cbiAgICAgICAgdGFyZ2V0Lm5vVWlTbGlkZXIgPSBhcGk7XG5cbiAgICAgICAgcmV0dXJuIGFwaTtcbiAgICB9XG5cbiAgICAvLyBVc2UgYW4gb2JqZWN0IGluc3RlYWQgb2YgYSBmdW5jdGlvbiBmb3IgZnV0dXJlIGV4cGFuZGFiaWxpdHk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLCBkb24ndCB1c2UgdGhpcyBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgICAgICBfX3NwZWN0cnVtOiBTcGVjdHJ1bSxcbiAgICAgICAgdmVyc2lvbjogVkVSU0lPTixcbiAgICAgICAgLy8gQSByZWZlcmVuY2UgdG8gdGhlIGRlZmF1bHQgY2xhc3NlcywgYWxsb3dzIGdsb2JhbCBjaGFuZ2VzLlxuICAgICAgICAvLyBVc2UgdGhlIGNzc0NsYXNzZXMgb3B0aW9uIGZvciBjaGFuZ2VzIHRvIG9uZSBzbGlkZXIuXG4gICAgICAgIGNzc0NsYXNzZXM6IGNzc0NsYXNzZXMsXG4gICAgICAgIGNyZWF0ZTogaW5pdGlhbGl6ZVxuICAgIH07XG59KTtcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9ibG9ja3MvYXBhcnRtZW50LWNhcmQvYXBhcnRtZW50LWNhcmQuc2Nzc1wiOiA2LFxuXHRcIi4vYmxvY2tzL2FwYXJ0bWVudC1jYXJkL2ltYWdlcy9yb29tLTM1MC5qcGdcIjogNyxcblx0XCIuL2Jsb2Nrcy9hcGFydG1lbnQtY2FyZC9pbWFnZXMvcm9vbS0zNTIuanBnXCI6IDgsXG5cdFwiLi9ibG9ja3MvYXBhcnRtZW50LWNhcmQvaW1hZ2VzL3Jvb20tNDQ0LmpwZ1wiOiA5LFxuXHRcIi4vYmxvY2tzL2FwYXJ0bWVudC1jYXJkL2ltYWdlcy9yb29tLTQ1MC5qcGdcIjogMTAsXG5cdFwiLi9ibG9ja3MvYXBhcnRtZW50LWNhcmQvaW1hZ2VzL3Jvb20tNjY2LmpwZ1wiOiAxMSxcblx0XCIuL2Jsb2Nrcy9hcGFydG1lbnQtY2FyZC9pbWFnZXMvcm9vbS02NzguanBnXCI6IDEyLFxuXHRcIi4vYmxvY2tzL2FwYXJ0bWVudC1jYXJkL2ltYWdlcy9yb29tLTc0MC5qcGdcIjogMTMsXG5cdFwiLi9ibG9ja3MvYXBhcnRtZW50LWNhcmQvaW1hZ2VzL3Jvb20tODQwLmpwZ1wiOiAxNCxcblx0XCIuL2Jsb2Nrcy9hcGFydG1lbnQtY2FyZC9pbWFnZXMvcm9vbS04NTYuanBnXCI6IDE1LFxuXHRcIi4vYmxvY2tzL2FwYXJ0bWVudC1jYXJkL2ltYWdlcy9yb29tLTg4OC5qcGdcIjogMTYsXG5cdFwiLi9ibG9ja3MvYXBhcnRtZW50LWNhcmQvaW1hZ2VzL3Jvb20tOTgwLmpwZ1wiOiAxNyxcblx0XCIuL2Jsb2Nrcy9hcGFydG1lbnQtY2FyZC9pbWFnZXMvcm9vbS05ODIuanBnXCI6IDE4LFxuXHRcIi4vYmxvY2tzL2FwYXJ0bWVudC1mb3JtL2FwYXJ0bWVudC1mb3JtLmpzXCI6IDE5LFxuXHRcIi4vYmxvY2tzL2FwYXJ0bWVudC1mb3JtL2FwYXJ0bWVudC1mb3JtLnNjc3NcIjogMjAsXG5cdFwiLi9ibG9ja3MvYXBhcnRtZW50cy1maW5kZXIvYXBhcnRtZW50cy1maW5kZXIuc2Nzc1wiOiAyMSxcblx0XCIuL2Jsb2Nrcy9idXR0b24td2l0aC1hcnJvdy9idXR0b24td2l0aC1hcnJvdy5zY3NzXCI6IDIyLFxuXHRcIi4vYmxvY2tzL2J1dHRvbi9idXR0b24uc2Nzc1wiOiAyMyxcblx0XCIuL2Jsb2Nrcy9jaGVja2JveC1pdGVtL2NoZWNrYm94LWl0ZW0uc2Nzc1wiOiAyNCxcblx0XCIuL2Jsb2Nrcy9kYXRlcGlja2VyLTFmL2RhdGVwaWNrZXItMWYuanNcIjogMSxcblx0XCIuL2Jsb2Nrcy9kYXRlcGlja2VyLTFmL2RhdGVwaWNrZXItMWYuc2Nzc1wiOiAyNSxcblx0XCIuL2Jsb2Nrcy9kYXRlcGlja2VyLTJmL2RhdGVwaWNrZXItMmYuanNcIjogMixcblx0XCIuL2Jsb2Nrcy9kYXRlcGlja2VyLTJmL2RhdGVwaWNrZXItMmYuc2Nzc1wiOiAyNixcblx0XCIuL2Jsb2Nrcy9kYXRlcGlja2VyLTJmL2RhdGVwaWNrZXIuY3NzXCI6IDI3LFxuXHRcIi4vYmxvY2tzL2RhdGVwaWNrZXItMmYvZGF0ZXBpY2tlci5qc1wiOiAzLFxuXHRcIi4vYmxvY2tzL2Ryb3Bkb3duL2Ryb3Bkb3duLmpzXCI6IDI4LFxuXHRcIi4vYmxvY2tzL2Ryb3Bkb3duL2Ryb3Bkb3duLnNjc3NcIjogMjksXG5cdFwiLi9ibG9ja3MvZW1haWwvZW1haWwuc2Nzc1wiOiAzMCxcblx0XCIuL2Jsb2Nrcy9mb290ZXItbGFyZ2UvZm9vdGVyLWxhcmdlLnNjc3NcIjogMzEsXG5cdFwiLi9ibG9ja3MvZm9vdGVyLWxhcmdlL2ltYWdlcy9sb2dvLXRveGluLnBuZ1wiOiAzMixcblx0XCIuL2Jsb2Nrcy9mb290ZXItbWVkaXVtL2Zvb3Rlci1tZWRpdW0uc2Nzc1wiOiAzMyxcblx0XCIuL2Jsb2Nrcy9mb290ZXItbWVkaXVtL2ltYWdlcy9mYWNlYm9vay1pY29uLnBuZ1wiOiAzNCxcblx0XCIuL2Jsb2Nrcy9mb290ZXItbWVkaXVtL2ltYWdlcy9pbnN0YWdyYW0taWNvbi5wbmdcIjogMzUsXG5cdFwiLi9ibG9ja3MvZm9vdGVyLW1lZGl1bS9pbWFnZXMvdHdlZXRlci1pY29uLnBuZ1wiOiAzNixcblx0XCIuL2Jsb2Nrcy9mb290ZXItc21hbGwvZm9vdGVyLXNtYWxsLnNjc3NcIjogMzcsXG5cdFwiLi9ibG9ja3MvZm9vdGVyLXNtYWxsL2ltYWdlcy9mYWNlYm9vay1pY29uLnBuZ1wiOiAzOCxcblx0XCIuL2Jsb2Nrcy9mb290ZXItc21hbGwvaW1hZ2VzL2luc3RhZ3JhbS1pY29uLnBuZ1wiOiAzOSxcblx0XCIuL2Jsb2Nrcy9mb290ZXItc21hbGwvaW1hZ2VzL3R3ZWV0ZXItaWNvbi5wbmdcIjogNDAsXG5cdFwiLi9ibG9ja3MvaW4tZm9ybS9pbi1mb3JtLnNjc3NcIjogNDEsXG5cdFwiLi9ibG9ja3MvaW5mby1hcGFydG1lbnQvaW5mby1hcGFydG1lbnQuc2Nzc1wiOiA0Mixcblx0XCIuL2Jsb2Nrcy9saWtlLWJ1dHRvbi9saWtlLWJ1dHRvbi5zY3NzXCI6IDQzLFxuXHRcIi4vYmxvY2tzL25hdmJhci9pbWFnZXMvbG9nby10b3hpbi5wbmdcIjogNDQsXG5cdFwiLi9ibG9ja3MvbmF2YmFyL25hdmJhci5qc1wiOiA0NSxcblx0XCIuL2Jsb2Nrcy9uYXZiYXIvbmF2YmFyLnNjc3NcIjogNDYsXG5cdFwiLi9ibG9ja3Mvbm91aXNsaWRlci9jdXN0b21pc2UuanNcIjogNDcsXG5cdFwiLi9ibG9ja3Mvbm91aXNsaWRlci9ub3Vpc2xpZGVyLmNzc1wiOiA0OCxcblx0XCIuL2Jsb2Nrcy9ub3Vpc2xpZGVyL25vdWlzbGlkZXIuanNcIjogNCxcblx0XCIuL2Jsb2Nrcy9waWUtY2hhcnQtbGVnZW5kL3BpZS1jaGFydC1sZWdlbmQuc2Nzc1wiOiA0OSxcblx0XCIuL2Jsb2Nrcy9waWUtY2hhcnQvcGllLWNoYXJ0LnNjc3NcIjogNTAsXG5cdFwiLi9ibG9ja3MvcmFkaW8tYnV0dG9uL3JhZGlvLWJ1dHRvbi5zY3NzXCI6IDUxLFxuXHRcIi4vYmxvY2tzL3JlY2VpcHQvcmVjZWlwdC5zY3NzXCI6IDUyLFxuXHRcIi4vYmxvY2tzL3JlZ2lzdHJhdGlvbi1mb3JtL3JlZ2lzdHJhdGlvbi1mb3JtLnNjc3NcIjogNTMsXG5cdFwiLi9ibG9ja3MvdG9nZ2xlLWJ1dHRvbi90b2dnbGUtYnV0dG9uLnNjc3NcIjogNTQsXG5cdFwiLi9ibG9ja3MvdmlzaXRvci1yZXZpZXcvaW1hZ2VzL2d1ZXN0LTEuanBnXCI6IDU1LFxuXHRcIi4vYmxvY2tzL3Zpc2l0b3ItcmV2aWV3L2ltYWdlcy9ndWVzdC0yLmpwZ1wiOiA1Nixcblx0XCIuL2Jsb2Nrcy92aXNpdG9yLXJldmlldy92aXNpdG9yLXJldmlldy5zY3NzXCI6IDU3LFxuXHRcIi4vZmF2aWNvbnMvYW5kcm9pZC1jaHJvbWUtMTQ0eDE0NC5wbmdcIjogNTgsXG5cdFwiLi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLnBuZ1wiOiA1OSxcblx0XCIuL2Zhdmljb25zL2Zhdmljb24tMTZ4MTYucG5nXCI6IDYwLFxuXHRcIi4vZmF2aWNvbnMvZmF2aWNvbi0zMngzMi5wbmdcIjogNjEsXG5cdFwiLi9mYXZpY29ucy9tc3RpbGUtMTUweDE1MC5wbmdcIjogNjIsXG5cdFwiLi9mYXZpY29ucy9zYWZhcmktcGlubmVkLXRhYi5zdmdcIjogNjMsXG5cdFwiLi9mb250cy5zY3NzXCI6IDY0LFxuXHRcIi4vZm9udHMvTW9udHNlcnJhdC1Cb2xkLnN2Z1wiOiA2NSxcblx0XCIuL2ZvbnRzL01vbnRzZXJyYXQtTGlnaHQuc3ZnXCI6IDY2LFxuXHRcIi4vZm9udHMvTW9udHNlcnJhdC1NZWRpdW0uc3ZnXCI6IDY3LFxuXHRcIi4vZm9udHMvTW9udHNlcnJhdC1SZWd1bGFyLnN2Z1wiOiA2OCxcblx0XCIuL2ZvbnRzL01vbnRzZXJyYXQtU2VtaUJvbGQuc3ZnXCI6IDY5LFxuXHRcIi4vZm9udHMvUXVpY2tzYW5kLUJvbGQuc3ZnXCI6IDcwLFxuXHRcIi4vZm9udHMvUXVpY2tzYW5kLVJlZ3VsYXIuc3ZnXCI6IDcxLFxuXHRcIi4vaW5kZXguanNcIjogMCxcblx0XCIuL2luZGV4LnNjc3NcIjogNzIsXG5cdFwiLi9wYWdlcy9sYW5kaW5nLXBhZ2UvaW1hZ2VzL2xhbmRpbmdwYWdlLWJnLmpwZ1wiOiA3Myxcblx0XCIuL3BhZ2VzL2xhbmRpbmctcGFnZS9sYW5kaW5nLXBhZ2Uuc2Nzc1wiOiA3NCxcblx0XCIuL3BhZ2VzL3JlZ2lzdHJhdGlvbi9pbWFnZXMvcmVnaXN0cmF0aW9uLWJnLmpwZ1wiOiA3NSxcblx0XCIuL3BhZ2VzL3JlZ2lzdHJhdGlvbi9yZWdpc3RyYXRpb24uanNcIjogNzYsXG5cdFwiLi9wYWdlcy9yZWdpc3RyYXRpb24vcmVnaXN0cmF0aW9uLnNjc3NcIjogNzcsXG5cdFwiLi9wYWdlcy9yb29tLWRldGFpbHMvaW1hZ2VzL3Jvb20tODg4YS5qcGdcIjogNzgsXG5cdFwiLi9wYWdlcy9yb29tLWRldGFpbHMvaW1hZ2VzL3Jvb20tODg4Yi5qcGdcIjogNzksXG5cdFwiLi9wYWdlcy9yb29tLWRldGFpbHMvaW1hZ2VzL3Jvb20tODg4Yy5qcGdcIjogODAsXG5cdFwiLi9wYWdlcy9yb29tLWRldGFpbHMvcm9vbS1kZXRhaWxzLnNjc3NcIjogODEsXG5cdFwiLi9wYWdlcy9zZWFyY2gtcm9vbS9zZWFyY2gtcm9vbS5zY3NzXCI6IDgyLFxuXHRcIi4vcGFnZXMvdWktY2FyZHMvdWktY2FyZHMuc2Nzc1wiOiA4Myxcblx0XCIuL3BhZ2VzL3VpLWNvbG9ycy91aS1jb2xvcnMuc2Nzc1wiOiA4NCxcblx0XCIuL3BhZ2VzL3VpLWZvcm0tZWxlbWVudHMvdWktZm9ybS1lbGVtZW50cy5qc1wiOiA4NSxcblx0XCIuL3BhZ2VzL3VpLWZvcm0tZWxlbWVudHMvdWktZm9ybS1lbGVtZW50cy5zY3NzXCI6IDg2LFxuXHRcIi4vcGFnZXMvdWktaGVhZGVycy91aS1oZWFkZXJzLnNjc3NcIjogODcsXG5cdFwiLi90ZW1wbGF0ZS5zY3NzXCI6IDg4LFxuXHRcIi4vdmFyaWFibGVzLnNjc3NcIjogODlcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA1OyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWFnZXMvcm9vbS0zNTAuanBnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltYWdlcy9yb29tLTM1Mi5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1hZ2VzL3Jvb20tNDQ0LmpwZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWFnZXMvcm9vbS00NTAuanBnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltYWdlcy9yb29tLTY2Ni5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1hZ2VzL3Jvb20tNjc4LmpwZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWFnZXMvcm9vbS03NDAuanBnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltYWdlcy9yb29tLTg0MC5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1hZ2VzL3Jvb20tODU2LmpwZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWFnZXMvcm9vbS04ODguanBnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltYWdlcy9yb29tLTk4MC5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1hZ2VzL3Jvb20tOTgyLmpwZ1wiOyIsImNsYXNzIEFwYXJ0bWVudEZvcm0ge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5pbml0KCk7XHJcbiAgfVxyXG5cclxuICBpbml0KCkge1xyXG4gICAgY29uc3QgZHJvcGRvd25XcmFwcGVyTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJqcy1hcGFydG1lbnQtZm9ybV9fZHJvcGRvd24tdGl0bGVcIik7XHJcbiAgICBmb3IgKGxldCBpdGVtIG9mIGRyb3Bkb3duV3JhcHBlckxpc3QpIHtcclxuICAgICAgaXRlbS5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGV4cGFuZEJ1dHQgPSBpdGVtLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihcIi5qcy1hcGFydG1lbnQtZm9ybV9fc3ltYm9sLWV4cGFuZFwiKTtcclxuICAgICAgICBjb25zdCBjaGVja2JveGVzID0gaXRlbS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoXCIuanMtYXBhcnRtZW50LWZvcm1fX2NoZWNrYm94ZXNcIik7XHJcbiAgICAgICAgY2hlY2tib3hlcy5jbGFzc0xpc3QudG9nZ2xlKFwiYXBhcnRtZW50LWZvcm1fX2NoZWNrYm94ZXNfaGlkZGVuXCIpO1xyXG4gICAgICAgIGV4cGFuZEJ1dHQuY2xhc3NMaXN0LnRvZ2dsZShcImFwYXJ0bWVudC1mb3JtX19zeW1ib2wtZXhwYW5kX3JvdGF0ZWRcIik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbnRyeSB7XHJcbiAgY29uc3QgYXBhcnRtZW50Rm9ybSA9IG5ldyBBcGFydG1lbnRGb3JtKCk7XHJcbn0gY2F0Y2gge1xyXG4gIGNvbnNvbGUubG9nKFwiVGhlcmUgaXMgbm8gYXBhcnRtZW50J3MgZm9ybS5cIilcclxufVxyXG4iLCJjbGFzcyBEcm9wZG93biB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmluaXQoKTtcclxuICB9XHJcblxyXG4gIGluaXQoKSB7XHJcbiAgICBjb25zdCBpc0d1ZXN0c0Ryb3Bkb3duID0gZnVuY3Rpb24gKHBsYWNlaG9sZGVyKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBwbGFjZWhvbGRlci5pbm5lckhUTUwuc3BsaXQoXCI8c3BhblwiKVswXSA9PT0gXCLQodC60L7Qu9GM0LrQviDQs9C+0YHRgtC10LlcIlxyXG4gICAgICAgIHx8IHBsYWNlaG9sZGVyLmlubmVySFRNTC5zcGxpdChcIiBcIilbMF0gPT09IFwi0JPQvtGB0YLQtdC5XCJcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGlzQmVkc0Ryb3Bkb3duID0gZnVuY3Rpb24gKHBsYWNlaG9sZGVyKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBwbGFjZWhvbGRlci5pbm5lckhUTUwuc3BsaXQoXCI8c3BhblwiKVswXSA9PSBcItCS0YvQsdC10YDQuNGC0LUg0YPQtNC+0LHRgdGC0LLQsFwiXHJcbiAgICAgICAgfHwgcGxhY2Vob2xkZXIuaW5uZXJIVE1MLnNwbGl0KFwiIFwiKVswXSA9PSBcItCh0L/QsNC70LXQvVwiXHJcbiAgICAgICkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwbGFjZWhvbGRlckNoYW5nZXIgPSBmdW5jdGlvbiAocXVhbkxpc3QsIHBsYWNlaG9sZGVyKSB7XHJcbiAgICAgIGNvbnN0IGV4cGFuZCA9ICc8c3BhbiBjbGFzcyA9IFwibWF0ZXJpYWwtaWNvbnNcIj5leHBhbmRfbW9yZTwvc3Bhbj4nO1xyXG4gICAgICBpZiAoaXNHdWVzdHNEcm9wZG93bihwbGFjZWhvbGRlcikpIHtcclxuICAgICAgICBsZXQgcXVhblBlb3BsZSA9IHBhcnNlSW50KHF1YW5MaXN0Lml0ZW0oMCkuaW5uZXJIVE1MKSArIHBhcnNlSW50KHF1YW5MaXN0Lml0ZW0oMSkuaW5uZXJIVE1MKTtcclxuICAgICAgICBsZXQgcXVhbkJhYnkgPSBwYXJzZUludChxdWFuTGlzdC5pdGVtKDIpLmlubmVySFRNTCk7XHJcbiAgICAgICAgaWYgKHF1YW5CYWJ5ICE9PSAwKSB7XHJcbiAgICAgICAgICBwbGFjZWhvbGRlci5pbm5lckhUTUwgPSBg0JPQvtGB0YLQtdC5IC0gJHtxdWFuUGVvcGxlLnRvU3RyaW5nKCl9LCDQvNC70LDQtNC10L3RhtC10LIgLSAke3F1YW5CYWJ5LnRvU3RyaW5nKCl9YCArIGV4cGFuZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKHF1YW5QZW9wbGUgPT09IDApIHtcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXIuaW5uZXJIVE1MID0gXCLQodC60L7Qu9GM0LrQviDQs9C+0YHRgtC10LlcIiArIGV4cGFuZDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyLmlubmVySFRNTCA9IGDQk9C+0YHRgtC10LkgLSAke3F1YW5QZW9wbGUudG9TdHJpbmcoKX1gICsgZXhwYW5kO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChpc0JlZHNEcm9wZG93bihwbGFjZWhvbGRlcikpIHtcclxuICAgICAgICBsZXQgcXVhblJvb20gPSBwYXJzZUludChxdWFuTGlzdC5pdGVtKDApLmlubmVySFRNTCk7XHJcbiAgICAgICAgbGV0IHF1YW5CZWQgPSBwYXJzZUludChxdWFuTGlzdC5pdGVtKDEpLmlubmVySFRNTCk7XHJcbiAgICAgICAgaWYgKHF1YW5CZWQgIT09IDApIHtcclxuICAgICAgICAgIHBsYWNlaG9sZGVyLmlubmVySFRNTCA9IGDQodC/0LDQu9C10L0gLSAke3F1YW5Sb29tLnRvU3RyaW5nKCl9LCDQutGA0L7QstCw0YLQtdC5IC0gJHtxdWFuQmVkLnRvU3RyaW5nKCl9IC4uLmAgKyBleHBhbmQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmIChxdWFuUm9vbSA9PT0gMCkge1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlci5pbm5lckhUTUwgPSBcItCS0YvQsdC10YDQuNGC0LUg0YPQtNC+0LHRgdGC0LLQsFwiICsgZXhwYW5kO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXIuaW5uZXJIVE1MID0gYNCh0L/QsNC70LXQvSAtICR7cXVhblJvb20udG9TdHJpbmcoKX0sINGB0L/QsNGC0Ywg0YHQuNC00Y8gLi4uYCArIGV4cGFuZDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBsaXN0TWludXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwianMtZHJvcGRvd25fX21pbnVzXCIpO1xyXG4gICAgQXJyYXkuZnJvbShsaXN0TWludXMsIChpdGVtKSA9PiB7XHJcbiAgICAgIGl0ZW0ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICBsZXQgY29udGVudCA9IGl0ZW0ubmV4dFNpYmxpbmcuaW5uZXJIVE1MO1xyXG4gICAgICAgIGlmIChjb250ZW50ICE9PSBcIjBcIikge1xyXG4gICAgICAgICAgbGV0IG5ld0NvbnRlbnQgPSBwYXJzZUludChjb250ZW50KSAtIDE7XHJcbiAgICAgICAgICBpdGVtLm5leHRTaWJsaW5nLmlubmVySFRNTCA9IG5ld0NvbnRlbnQudG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGxpc3RQbHVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImpzLWRyb3Bkb3duX19wbHVzXCIpO1xyXG4gICAgQXJyYXkuZnJvbShsaXN0UGx1cywgKGl0ZW0pID0+IHtcclxuICAgICAgaXRlbS5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgIGxldCBjb250ZW50ID0gaXRlbS5wcmV2aW91c1NpYmxpbmcucHJldmlvdXNTaWJsaW5nLmlubmVySFRNTDtcclxuICAgICAgICBsZXQgbmV3Q29udGVudCA9IHBhcnNlSW50KGNvbnRlbnQpICsgMTtcclxuICAgICAgICBpdGVtLnByZXZpb3VzU2libGluZy5wcmV2aW91c1NpYmxpbmcuaW5uZXJIVE1MID0gbmV3Q29udGVudC50b1N0cmluZygpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBsaXN0Q2xlYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwianMtZHJvcGRvd25fX2NsZWFyXCIpO1xyXG4gICAgQXJyYXkuZnJvbShsaXN0Q2xlYXIsIChpdGVtKSA9PiB7XHJcbiAgICAgIGl0ZW0ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICBpdGVtLnBhcmVudE5vZGUucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKFwiLmpzLWRyb3Bkb3duX19xdWFudGl0eVwiKS5mb3JFYWNoKChxdWFuKSA9PiBxdWFuLmlubmVySFRNTCA9IFwiMFwiKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbGlzdEFwcGx5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImpzLWRyb3Bkb3duX19hcHBseVwiKTtcclxuICAgIEFycmF5LmZyb20obGlzdEFwcGx5LCAoaXRlbSkgPT4ge1xyXG4gICAgICBsZXQgcGxhY2Vob2xkZXIgPSBpdGVtLnBhcmVudE5vZGUucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKFwiLmpzLWRyb3Bkb3duX19maWVsZFwiKTtcclxuICAgICAgbGV0IHF1YW5MaXN0ID0gaXRlbS5wYXJlbnROb2RlLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChcIi5qcy1kcm9wZG93bl9fcXVhbnRpdHlcIik7XHJcbiAgICAgIGl0ZW0ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICBwbGFjZWhvbGRlckNoYW5nZXIocXVhbkxpc3QsIHBsYWNlaG9sZGVyKTtcclxuICAgICAgICBpdGVtLnBhcmVudE5vZGUucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKFwiLmpzLWRyb3Bkb3duX19saXN0XCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJkcm9wZG93bl9fbGlzdF9hY3RpdmF0ZWRcIik7XHJcbiAgICAgICAgaXRlbS5wYXJlbnROb2RlLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihcIi5kcm9wZG93bl9fZmllbGRfYWN0aXZhdGVkXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJkcm9wZG93bl9fZmllbGRfYWN0aXZhdGVkXCIpO1xyXG4gICAgICAgIGl0ZW0ucGFyZW50Tm9kZS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoXCIuanMtZHJvcGRvd25fX2J1dHRvbnNcIikuY2xhc3NMaXN0LnJlbW92ZShcImRyb3Bkb3duX19idXR0b25zX2FjdGl2YXRlZFwiKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbGlzdEZpZWxkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImpzLWRyb3Bkb3duX19maWVsZFwiKTtcclxuICAgIEFycmF5LmZyb20obGlzdEZpZWxkLCAoaXRlbSkgPT4ge1xyXG4gICAgICBpdGVtLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgbGV0IHF1YW5MaXN0ID0gaXRlbS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuanMtZHJvcGRvd25fX3F1YW50aXR5XCIpO1xyXG4gICAgICAgIHBsYWNlaG9sZGVyQ2hhbmdlcihxdWFuTGlzdCwgaXRlbSk7XHJcbiAgICAgICAgaXRlbS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoXCIuanMtZHJvcGRvd25fX2xpc3RcIikuY2xhc3NMaXN0LnRvZ2dsZShcImRyb3Bkb3duX19saXN0X2FjdGl2YXRlZFwiKTtcclxuICAgICAgICBpdGVtLmNsYXNzTGlzdC50b2dnbGUoXCJkcm9wZG93bl9fZmllbGRfYWN0aXZhdGVkXCIpO1xyXG4gICAgICAgIGlmICghaXRlbS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoXCIuanMtZHJvcGRvd25fX2J1dHRvbnNcIikuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZHJvcGRvd25fX2J1dHRvbnNfaGlkZGVuXCIpKSB7XHJcbiAgICAgICAgICBpdGVtLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihcIi5qcy1kcm9wZG93bl9fYnV0dG9uc1wiKS5jbGFzc0xpc3QudG9nZ2xlKFwiZHJvcGRvd25fX2J1dHRvbnNfYWN0aXZhdGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG50cnkge1xyXG4gIGNvbnN0IGRyb3Bkb3duID0gbmV3IERyb3Bkb3duKCk7XHJcbn0gY2F0Y2gge1xyXG4gIGNvbnNvbGUubG9nKFwiVGhlcmUgYXJlIG5vIGRyb3Bkb3duc1wiKVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWFnZXMvbG9nby10b3hpbi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1hZ2VzL2ZhY2Vib29rLWljb24ucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltYWdlcy9pbnN0YWdyYW0taWNvbi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1hZ2VzL3R3ZWV0ZXItaWNvbi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1hZ2VzL2ZhY2Vib29rLWljb24ucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltYWdlcy9pbnN0YWdyYW0taWNvbi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1hZ2VzL3R3ZWV0ZXItaWNvbi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1hZ2VzL2xvZ28tdG94aW4ucG5nXCI7IiwiY2xhc3MgTmF2YmFyIHtcclxuICBzdGF0aWMgaW5pdCgpIHtcclxuICAgIGNvbnN0IG5hdmJhckV4cGFuZEJ1dHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmpzLW5hdmJhcl9fZXhwYW5kLWJ0blwiKTtcclxuICAgIG5hdmJhckV4cGFuZEJ1dHQub25jbGljayA9ICgpID0+IHtcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy1uYXZiYXJfX2xpc3RcIikuY2xhc3NMaXN0LnRvZ2dsZShcIm5hdmJhcl9faXRlbV92aXNpYmxlX2ZsZXhcIik7XHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuanMtbmF2YmFyX19idXR0b25zXCIpLmNsYXNzTGlzdC50b2dnbGUoXCJuYXZiYXJfX2l0ZW1fdmlzaWJsZV9mbGV4XCIpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxudHJ5IHtcclxuICBOYXZiYXIuaW5pdCgpO1xyXG59IGNhdGNoIHtcclxuICBjb25zb2xlLmxvZyhcIlRoZXJlIGlzIG5vIG5hdmJhclwiKTtcclxufSIsImNsYXNzIE5vdWlzbGlkZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5pbml0KCk7XHJcbiAgfVxyXG5cclxuICBpbml0KCkge1xyXG4gICAgY29uc3Qgbm9VaVNsaWRlciA9IHJlcXVpcmUoXCIuL25vdWlzbGlkZXIuanNcIik7XHJcbiAgICBjb25zdCBzbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNsaWRlclwiKTtcclxuICAgIG5vVWlTbGlkZXIuY3JlYXRlKHNsaWRlciwge1xyXG4gICAgICBzdGFydDogWzIwMDAsIDgwMDBdLFxyXG4gICAgICBjb25uZWN0OiB0cnVlLFxyXG4gICAgICBzdGVwOiAxMDAsXHJcbiAgICAgIHJhbmdlOiB7XHJcbiAgICAgICAgJ21pbic6IDAsXHJcbiAgICAgICAgJ21heCc6IDE1MDAwXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBzbGlkZXIubm9VaVNsaWRlci5vbihcInVwZGF0ZVwiLCAoKSA9PiB7XHJcbiAgICAgIGxldCBtaW4gPSBzbGlkZXIubm9VaVNsaWRlci5nZXQoKVswXVxyXG4gICAgICAgIC5tYXRjaCgvLisoPz1cXC4wMCkvKVswXVxyXG4gICAgICAgIC5yZXBsYWNlKC8oXFxkKykoXFxkezN9JCkvLCAnJDEgJDLigr0nKTtcclxuICAgICAgbGV0IG1heCA9IHNsaWRlci5ub1VpU2xpZGVyLmdldCgpWzFdXHJcbiAgICAgICAgLm1hdGNoKC8uKyg/PVxcLjAwKS8pWzBdXHJcbiAgICAgICAgLnJlcGxhY2UoLyhcXGQrKShcXGR7M30kKS8sICckMSAkMuKCvScpO1xyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvcm0tcHJpY2VcIikuaW5uZXJIVE1MID0gYCR7bWlufSAtICR7bWF4fWA7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbnRyeSB7XHJcbiAgY29uc3Qgbm91aXNsaWRlciA9IG5ldyBOb3Vpc2xpZGVyKCk7XHJcbn0gY2F0Y2gge1xyXG4gIGNvbnNvbGUubG9nKFwiVGhlcmUgaXMgbm8gdWlzbGlkZXIuXCIpXHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltYWdlcy9ndWVzdC0xLmpwZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWFnZXMvZ3Vlc3QtMi5qcGdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL2Zhdmljb25zL2FuZHJvaWQtY2hyb21lLTE0NHgxNDQucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvZmF2aWNvbnMvZmF2aWNvbi0xNngxNi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL2Zhdmljb25zL2Zhdmljb24tMzJ4MzIucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9mYXZpY29ucy9tc3RpbGUtMTUweDE1MC5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL2Zhdmljb25zL3NhZmFyaS1waW5uZWQtdGFiLnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250cy9Nb250c2VycmF0LUJvbGQuc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL01vbnRzZXJyYXQtTGlnaHQuc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL01vbnRzZXJyYXQtTWVkaXVtLnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250cy9Nb250c2VycmF0LVJlZ3VsYXIuc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL01vbnRzZXJyYXQtU2VtaUJvbGQuc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL1F1aWNrc2FuZC1Cb2xkLnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250cy9RdWlja3NhbmQtUmVndWxhci5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1hZ2VzL2xhbmRpbmdwYWdlLWJnLmpwZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWFnZXMvcmVnaXN0cmF0aW9uLWJnLmpwZ1wiOyIsImNsYXNzIFJlZ2lzdHJhdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmluaXQoKTtcclxuICB9XHJcblxyXG4gIGluaXQoKSB7XHJcbiAgICBjb25zdCBpbkJ1dHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmpzLW5hdmJhcl9faW4tYnRuXCIpO1xyXG4gICAgY29uc3QgcmVnQnV0dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuanMtbmF2YmFyX19yZWctYnRuXCIpO1xyXG4gICAgY29uc3QgaW5Gb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy1yZWdpc3RyYXRpb25fX2luLWZvcm1cIik7XHJcbiAgICBjb25zdCByZWdGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy1yZWdpc3RyYXRpb25fX3JlZy1mb3JtXCIpO1xyXG4gICAgaW5CdXR0Lm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgIHJlZ0Zvcm0uY2xhc3NMaXN0LmFkZChcInJlZ2lzdHJhdGlvbl9fcmVnLWZvcm1faGlkZGVuXCIpO1xyXG4gICAgICBpbkZvcm0uY2xhc3NMaXN0LmFkZChcInJlZ2lzdHJhdGlvbl9faW4tZm9ybV9kaXNwbGF5ZWRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmVnQnV0dC5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICByZWdGb3JtLmNsYXNzTGlzdC5yZW1vdmUoXCJyZWdpc3RyYXRpb25fX3JlZy1mb3JtX2hpZGRlblwiKTtcclxuICAgICAgaW5Gb3JtLmNsYXNzTGlzdC5yZW1vdmUoXCJyZWdpc3RyYXRpb25fX2luLWZvcm1fZGlzcGxheWVkXCIpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG50cnkge1xyXG4gIGNvbnN0IHJlZ2lzdHJhdGlvbiA9IG5ldyBSZWdpc3RyYXRpb24oKTtcclxufSBjYXRjaCB7XHJcbiAgY29uc29sZS5sb2coXCJJdCdzIG5vdCBhIHJlZ2lzdHJhdGlvbiBwYWdlXCIpXHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltYWdlcy9yb29tLTg4OGEuanBnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltYWdlcy9yb29tLTg4OGIuanBnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltYWdlcy9yb29tLTg4OGMuanBnXCI7IiwiY2xhc3MgVUlGb3JtRWxlbWVudHMge1xyXG4gIHN0YXRpYyBpbml0KCkge1xyXG4gICAgY29uc3QgRHJvcGRvd25FbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJqcy11aS1mb3JtLWVsZW1lbnRzX19kcm9wZG93bl9leHBhbmRlZFwiKTtcclxuICAgIGNvbnN0IGNsaWNrRXZlbnQgPSBuZXcgRXZlbnQoXCJjbGlja1wiKTtcclxuXHJcbiAgICBBcnJheS5mcm9tKERyb3Bkb3duRWxlbXMsIChlbGVtKSA9PiB7XHJcbiAgICAgIGVsZW0ucXVlcnlTZWxlY3RvcihcIi5qcy1kcm9wZG93bl9fZmllbGRcIikuZGlzcGF0Y2hFdmVudChjbGlja0V2ZW50KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGNoZWNrYm94RWxlbXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwianMtdWktZm9ybS1lbGVtZW50c19fbW9yZS1vcHRpb25zX2NvbGxhcHNlZFwiKTtcclxuICAgIEFycmF5LmZyb20oY2hlY2tib3hFbGVtcywgKGVsZW0pID0+IHtcclxuICAgICAgY29uc3QgZXhwYW5kQnV0dCA9IGVsZW0ucXVlcnlTZWxlY3RvcihcInNwYW4ubWF0ZXJpYWwtaWNvbnNcIik7XHJcbiAgICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBlbGVtLnF1ZXJ5U2VsZWN0b3IoXCIuYXBhcnRtZW50LWZvcm1fX2NoZWNrYm94ZXNcIik7XHJcbiAgICAgIGNoZWNrYm94ZXMuY2xhc3NMaXN0LnRvZ2dsZShcImFwYXJ0bWVudC1mb3JtX19jaGVja2JveGVzX2Rpc2FwcGVhclwiKTtcclxuICAgICAgZXhwYW5kQnV0dC5jbGFzc0xpc3QudG9nZ2xlKFwiYXBhcnRtZW50LWZvcm1fX2V4cGFuZC1idXR0X3JvdGF0ZVwiKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxudHJ5IHtcclxuICBVSUZvcm1FbGVtZW50cy5pbml0KCk7XHJcbn0gY2F0Y2gge1xyXG4gIGNvbnNvbGUubG9nKFwiVGhlcmUgaXMgbm8gVUlGb3JtRWxlbWVudHNcIik7XHJcbn1cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=